
led_FREERTOS_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b8  080041b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080041b8  080041b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041b8  080041b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000010  080041d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019c4  080041d0  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c83  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298a  00000000  00000000  00031cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000356e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025c4  00000000  00000000  00036650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114be  00000000  00000000  00038c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a1f  00000000  00000000  0004a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daaf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  000dab44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004130 	.word	0x08004130

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004130 	.word	0x08004130

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f9aa 	bl	80004ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f816 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f858 	bl	8000210 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fad2 	bl	8001708 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	f001 fb33 	bl	80017d4 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x34>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f001 fafa 	bl	800176c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x28>
 800017a:	bf00      	nop
 800017c:	0800417c 	.word	0x0800417c
 8000180:	080002c1 	.word	0x080002c1
 8000184:	2000002c 	.word	0x2000002c

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f003 ffc2 	bl	8004120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001c6:	2300      	movs	r3, #0
 80001c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fc1a 	bl	8000a08 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x56>
  {
    Error_Handler();
 80001da:	f000 f88b 	bl	80002f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fe88 	bl	8000f0c <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000202:	f000 f877 	bl	80002f4 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	; 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b088      	sub	sp, #32
 8000214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <MX_GPIO_Init+0xa8>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a23      	ldr	r2, [pc, #140]	; (80002b8 <MX_GPIO_Init+0xa8>)
 800022a:	f043 0320 	orr.w	r3, r3, #32
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <MX_GPIO_Init+0xa8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0320 	and.w	r3, r3, #32
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <MX_GPIO_Init+0xa8>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <MX_GPIO_Init+0xa8>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_GPIO_Init+0xa8>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_GPIO_Init+0xa8>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <MX_GPIO_Init+0xa8>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_GPIO_Init+0xa8>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000272:	4812      	ldr	r0, [pc, #72]	; (80002bc <MX_GPIO_Init+0xac>)
 8000274:	f000 fbb0 	bl	80009d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000278:	2303      	movs	r3, #3
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000280:	2301      	movs	r3, #1
 8000282:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000284:	f107 0310 	add.w	r3, r7, #16
 8000288:	4619      	mov	r1, r3
 800028a:	480c      	ldr	r0, [pc, #48]	; (80002bc <MX_GPIO_Init+0xac>)
 800028c:	f000 fa20 	bl	80006d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000290:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2302      	movs	r3, #2
 80002a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	4619      	mov	r1, r3
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <MX_GPIO_Init+0xac>)
 80002aa:	f000 fa11 	bl	80006d0 <HAL_GPIO_Init>

}
 80002ae:	bf00      	nop
 80002b0:	3720      	adds	r7, #32
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40010c00 	.word	0x40010c00

080002c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f001 fb2d 	bl	8001928 <osDelay>
 80002ce:	e7fb      	b.n	80002c8 <StartDefaultTask+0x8>

080002d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d101      	bne.n	80002e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002e2:	f000 f8f9 	bl	80004d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40012c00 	.word	0x40012c00

080002f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <HAL_MspInit+0x5c>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	4a14      	ldr	r2, [pc, #80]	; (800035c <HAL_MspInit+0x5c>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6193      	str	r3, [r2, #24]
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_MspInit+0x5c>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_MspInit+0x5c>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <HAL_MspInit+0x5c>)
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	61d3      	str	r3, [r2, #28]
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <HAL_MspInit+0x5c>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <HAL_MspInit+0x60>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <HAL_MspInit+0x60>)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	40021000 	.word	0x40021000
 8000360:	40010000 	.word	0x40010000

08000364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08c      	sub	sp, #48	; 0x30
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000374:	2200      	movs	r2, #0
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	2019      	movs	r0, #25
 800037a:	f000 f97e 	bl	800067a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800037e:	2019      	movs	r0, #25
 8000380:	f000 f997 	bl	80006b2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <HAL_InitTick+0x9c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <HAL_InitTick+0x9c>)
 800038a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <HAL_InitTick+0x9c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800039c:	f107 0210 	add.w	r2, r7, #16
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 ff16 	bl	80011d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003ac:	f000 ff00 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 80003b0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80003b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <HAL_InitTick+0xa0>)
 80003b6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ba:	0c9b      	lsrs	r3, r3, #18
 80003bc:	3b01      	subs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_InitTick+0xa4>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <HAL_InitTick+0xa8>)
 80003c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <HAL_InitTick+0xa4>)
 80003c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <HAL_InitTick+0xa4>)
 80003d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_InitTick+0xa4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <HAL_InitTick+0xa4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <HAL_InitTick+0xa4>)
 80003e2:	f000 ff47 	bl	8001274 <HAL_TIM_Base_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d104      	bne.n	80003f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80003ec:	4806      	ldr	r0, [pc, #24]	; (8000408 <HAL_InitTick+0xa4>)
 80003ee:	f000 ff99 	bl	8001324 <HAL_TIM_Base_Start_IT>
 80003f2:	4603      	mov	r3, r0
 80003f4:	e000      	b.n	80003f8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3730      	adds	r7, #48	; 0x30
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	431bde83 	.word	0x431bde83
 8000408:	20000030 	.word	0x20000030
 800040c:	40012c00 	.word	0x40012c00

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <HardFault_Handler+0x4>

08000422 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <MemManage_Handler+0x4>

08000428 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <BusFault_Handler+0x4>

0800042e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <UsageFault_Handler+0x4>

08000434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <TIM1_UP_IRQHandler+0x10>)
 8000446:	f000 ffbf 	bl	80013c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000030 	.word	0x20000030

08000454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000486:	f7ff ffe5 	bl	8000454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f003 fe17 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff fe5f 	bl	8000150 <main>
  bx lr
 8000492:	4770      	bx	lr
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800049c:	080041c0 	.word	0x080041c0
  ldr r2, =_sbss
 80004a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004a4:	200019c4 	.word	0x200019c4

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>
	...

080004ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_Init+0x28>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <HAL_Init+0x28>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 f8d1 	bl	8000664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff ff4e 	bl	8000364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c8:	f7ff ff1a 	bl	8000300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40022000 	.word	0x40022000

080004d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_IncTick+0x1c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_IncTick+0x20>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <HAL_IncTick+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000078 	.word	0x20000078

080004fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <HAL_GetTick+0x10>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	20000078 	.word	0x20000078

08000510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800052c:	4013      	ands	r3, r2
 800052e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800053c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <__NVIC_GetPriorityGrouping+0x18>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f003 0307 	and.w	r3, r3, #7
}
 8000566:	4618      	mov	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4906      	ldr	r1, [pc, #24]	; (80005a8 <__NVIC_EnableIRQ+0x34>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	e000e100 	.word	0xe000e100

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000600:	b480      	push	{r7}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	f1c3 0307 	rsb	r3, r3, #7
 800061a:	2b04      	cmp	r3, #4
 800061c:	bf28      	it	cs
 800061e:	2304      	movcs	r3, #4
 8000620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3304      	adds	r3, #4
 8000626:	2b06      	cmp	r3, #6
 8000628:	d902      	bls.n	8000630 <NVIC_EncodePriority+0x30>
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	3b03      	subs	r3, #3
 800062e:	e000      	b.n	8000632 <NVIC_EncodePriority+0x32>
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	f04f 32ff 	mov.w	r2, #4294967295
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	43da      	mvns	r2, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	401a      	ands	r2, r3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	f04f 31ff 	mov.w	r1, #4294967295
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	43d9      	mvns	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	4313      	orrs	r3, r2
         );
}
 800065a:	4618      	mov	r0, r3
 800065c:	3724      	adds	r7, #36	; 0x24
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff4f 	bl	8000510 <__NVIC_SetPriorityGrouping>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800068c:	f7ff ff64 	bl	8000558 <__NVIC_GetPriorityGrouping>
 8000690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	6978      	ldr	r0, [r7, #20]
 8000698:	f7ff ffb2 	bl	8000600 <NVIC_EncodePriority>
 800069c:	4602      	mov	r2, r0
 800069e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff81 	bl	80005ac <__NVIC_SetPriority>
}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff57 	bl	8000574 <__NVIC_EnableIRQ>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b08b      	sub	sp, #44	; 0x2c
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006e2:	e169      	b.n	80009b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006e4:	2201      	movs	r2, #1
 80006e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	4013      	ands	r3, r2
 80006f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	f040 8158 	bne.w	80009b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4a9a      	ldr	r2, [pc, #616]	; (8000970 <HAL_GPIO_Init+0x2a0>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d05e      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 800070c:	4a98      	ldr	r2, [pc, #608]	; (8000970 <HAL_GPIO_Init+0x2a0>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d875      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 8000712:	4a98      	ldr	r2, [pc, #608]	; (8000974 <HAL_GPIO_Init+0x2a4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d058      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 8000718:	4a96      	ldr	r2, [pc, #600]	; (8000974 <HAL_GPIO_Init+0x2a4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d86f      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 800071e:	4a96      	ldr	r2, [pc, #600]	; (8000978 <HAL_GPIO_Init+0x2a8>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d052      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 8000724:	4a94      	ldr	r2, [pc, #592]	; (8000978 <HAL_GPIO_Init+0x2a8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d869      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 800072a:	4a94      	ldr	r2, [pc, #592]	; (800097c <HAL_GPIO_Init+0x2ac>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d04c      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 8000730:	4a92      	ldr	r2, [pc, #584]	; (800097c <HAL_GPIO_Init+0x2ac>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d863      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 8000736:	4a92      	ldr	r2, [pc, #584]	; (8000980 <HAL_GPIO_Init+0x2b0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d046      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 800073c:	4a90      	ldr	r2, [pc, #576]	; (8000980 <HAL_GPIO_Init+0x2b0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d85d      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 8000742:	2b12      	cmp	r3, #18
 8000744:	d82a      	bhi.n	800079c <HAL_GPIO_Init+0xcc>
 8000746:	2b12      	cmp	r3, #18
 8000748:	d859      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 800074a:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <HAL_GPIO_Init+0x80>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	080007cb 	.word	0x080007cb
 8000754:	080007a5 	.word	0x080007a5
 8000758:	080007b7 	.word	0x080007b7
 800075c:	080007f9 	.word	0x080007f9
 8000760:	080007ff 	.word	0x080007ff
 8000764:	080007ff 	.word	0x080007ff
 8000768:	080007ff 	.word	0x080007ff
 800076c:	080007ff 	.word	0x080007ff
 8000770:	080007ff 	.word	0x080007ff
 8000774:	080007ff 	.word	0x080007ff
 8000778:	080007ff 	.word	0x080007ff
 800077c:	080007ff 	.word	0x080007ff
 8000780:	080007ff 	.word	0x080007ff
 8000784:	080007ff 	.word	0x080007ff
 8000788:	080007ff 	.word	0x080007ff
 800078c:	080007ff 	.word	0x080007ff
 8000790:	080007ff 	.word	0x080007ff
 8000794:	080007ad 	.word	0x080007ad
 8000798:	080007c1 	.word	0x080007c1
 800079c:	4a79      	ldr	r2, [pc, #484]	; (8000984 <HAL_GPIO_Init+0x2b4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d013      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007a2:	e02c      	b.n	80007fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	623b      	str	r3, [r7, #32]
          break;
 80007aa:	e029      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	3304      	adds	r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
          break;
 80007b4:	e024      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	3308      	adds	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
          break;
 80007be:	e01f      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	330c      	adds	r3, #12
 80007c6:	623b      	str	r3, [r7, #32]
          break;
 80007c8:	e01a      	b.n	8000800 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007d2:	2304      	movs	r3, #4
 80007d4:	623b      	str	r3, [r7, #32]
          break;
 80007d6:	e013      	b.n	8000800 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d105      	bne.n	80007ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007e0:	2308      	movs	r3, #8
 80007e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	611a      	str	r2, [r3, #16]
          break;
 80007ea:	e009      	b.n	8000800 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007ec:	2308      	movs	r3, #8
 80007ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	69fa      	ldr	r2, [r7, #28]
 80007f4:	615a      	str	r2, [r3, #20]
          break;
 80007f6:	e003      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
          break;
 80007fc:	e000      	b.n	8000800 <HAL_GPIO_Init+0x130>
          break;
 80007fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	2bff      	cmp	r3, #255	; 0xff
 8000804:	d801      	bhi.n	800080a <HAL_GPIO_Init+0x13a>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	e001      	b.n	800080e <HAL_GPIO_Init+0x13e>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3304      	adds	r3, #4
 800080e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2bff      	cmp	r3, #255	; 0xff
 8000814:	d802      	bhi.n	800081c <HAL_GPIO_Init+0x14c>
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	e002      	b.n	8000822 <HAL_GPIO_Init+0x152>
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	3b08      	subs	r3, #8
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	210f      	movs	r1, #15
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	401a      	ands	r2, r3
 8000834:	6a39      	ldr	r1, [r7, #32]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	431a      	orrs	r2, r3
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 80b1 	beq.w	80009b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000850:	4b4d      	ldr	r3, [pc, #308]	; (8000988 <HAL_GPIO_Init+0x2b8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a4c      	ldr	r2, [pc, #304]	; (8000988 <HAL_GPIO_Init+0x2b8>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b4a      	ldr	r3, [pc, #296]	; (8000988 <HAL_GPIO_Init+0x2b8>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000868:	4a48      	ldr	r2, [pc, #288]	; (800098c <HAL_GPIO_Init+0x2bc>)
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	3302      	adds	r3, #2
 8000870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000874:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	220f      	movs	r2, #15
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a40      	ldr	r2, [pc, #256]	; (8000990 <HAL_GPIO_Init+0x2c0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d013      	beq.n	80008bc <HAL_GPIO_Init+0x1ec>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <HAL_GPIO_Init+0x2c4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d00d      	beq.n	80008b8 <HAL_GPIO_Init+0x1e8>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_GPIO_Init+0x2c8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d007      	beq.n	80008b4 <HAL_GPIO_Init+0x1e4>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a3d      	ldr	r2, [pc, #244]	; (800099c <HAL_GPIO_Init+0x2cc>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d101      	bne.n	80008b0 <HAL_GPIO_Init+0x1e0>
 80008ac:	2303      	movs	r3, #3
 80008ae:	e006      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008b0:	2304      	movs	r3, #4
 80008b2:	e004      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008b4:	2302      	movs	r3, #2
 80008b6:	e002      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008bc:	2300      	movs	r3, #0
 80008be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c0:	f002 0203 	and.w	r2, r2, #3
 80008c4:	0092      	lsls	r2, r2, #2
 80008c6:	4093      	lsls	r3, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008ce:	492f      	ldr	r1, [pc, #188]	; (800098c <HAL_GPIO_Init+0x2bc>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	3302      	adds	r3, #2
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008e8:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	492c      	ldr	r1, [pc, #176]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	600b      	str	r3, [r1, #0]
 80008f4:	e006      	b.n	8000904 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4928      	ldr	r1, [pc, #160]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000900:	4013      	ands	r3, r2
 8000902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	4922      	ldr	r1, [pc, #136]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	604b      	str	r3, [r1, #4]
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	43db      	mvns	r3, r3
 8000926:	491e      	ldr	r1, [pc, #120]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000928:	4013      	ands	r3, r2
 800092a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	4918      	ldr	r1, [pc, #96]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	608b      	str	r3, [r1, #8]
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	43db      	mvns	r3, r3
 800094e:	4914      	ldr	r1, [pc, #80]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000950:	4013      	ands	r3, r2
 8000952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d021      	beq.n	80009a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	490e      	ldr	r1, [pc, #56]	; (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	60cb      	str	r3, [r1, #12]
 800096c:	e021      	b.n	80009b2 <HAL_GPIO_Init+0x2e2>
 800096e:	bf00      	nop
 8000970:	10320000 	.word	0x10320000
 8000974:	10310000 	.word	0x10310000
 8000978:	10220000 	.word	0x10220000
 800097c:	10210000 	.word	0x10210000
 8000980:	10120000 	.word	0x10120000
 8000984:	10110000 	.word	0x10110000
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000
 800099c:	40011400 	.word	0x40011400
 80009a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_GPIO_Init+0x304>)
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4909      	ldr	r1, [pc, #36]	; (80009d4 <HAL_GPIO_Init+0x304>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	3301      	adds	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009be:	fa22 f303 	lsr.w	r3, r2, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f47f ae8e 	bne.w	80006e4 <HAL_GPIO_Init+0x14>
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	372c      	adds	r7, #44	; 0x2c
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40010400 	.word	0x40010400

080009d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
 80009e4:	4613      	mov	r3, r2
 80009e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009e8:	787b      	ldrb	r3, [r7, #1]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ee:	887a      	ldrh	r2, [r7, #2]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009f4:	e003      	b.n	80009fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	041a      	lsls	r2, r3, #16
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	611a      	str	r2, [r3, #16]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e272      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8087 	beq.w	8000b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a28:	4b92      	ldr	r3, [pc, #584]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 030c 	and.w	r3, r3, #12
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d00c      	beq.n	8000a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a34:	4b8f      	ldr	r3, [pc, #572]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 030c 	and.w	r3, r3, #12
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d112      	bne.n	8000a66 <HAL_RCC_OscConfig+0x5e>
 8000a40:	4b8c      	ldr	r3, [pc, #560]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a4c:	d10b      	bne.n	8000a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a4e:	4b89      	ldr	r3, [pc, #548]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d06c      	beq.n	8000b34 <HAL_RCC_OscConfig+0x12c>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d168      	bne.n	8000b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e24c      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a6e:	d106      	bne.n	8000a7e <HAL_RCC_OscConfig+0x76>
 8000a70:	4b80      	ldr	r3, [pc, #512]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a7f      	ldr	r2, [pc, #508]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e02e      	b.n	8000adc <HAL_RCC_OscConfig+0xd4>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10c      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x98>
 8000a86:	4b7b      	ldr	r3, [pc, #492]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a7a      	ldr	r2, [pc, #488]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	4b78      	ldr	r3, [pc, #480]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a77      	ldr	r2, [pc, #476]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e01d      	b.n	8000adc <HAL_RCC_OscConfig+0xd4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xbc>
 8000aaa:	4b72      	ldr	r3, [pc, #456]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a71      	ldr	r2, [pc, #452]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a6e      	ldr	r2, [pc, #440]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	e00b      	b.n	8000adc <HAL_RCC_OscConfig+0xd4>
 8000ac4:	4b6b      	ldr	r3, [pc, #428]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a6a      	ldr	r2, [pc, #424]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b68      	ldr	r3, [pc, #416]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a67      	ldr	r2, [pc, #412]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d013      	beq.n	8000b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fd0a 	bl	80004fc <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aec:	f7ff fd06 	bl	80004fc <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b64      	cmp	r3, #100	; 0x64
 8000af8:	d901      	bls.n	8000afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e200      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afe:	4b5d      	ldr	r3, [pc, #372]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f0      	beq.n	8000aec <HAL_RCC_OscConfig+0xe4>
 8000b0a:	e014      	b.n	8000b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0c:	f7ff fcf6 	bl	80004fc <HAL_GetTick>
 8000b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b14:	f7ff fcf2 	bl	80004fc <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b64      	cmp	r3, #100	; 0x64
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e1ec      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b26:	4b53      	ldr	r3, [pc, #332]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f0      	bne.n	8000b14 <HAL_RCC_OscConfig+0x10c>
 8000b32:	e000      	b.n	8000b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d063      	beq.n	8000c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b4e:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d11c      	bne.n	8000b94 <HAL_RCC_OscConfig+0x18c>
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d116      	bne.n	8000b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d005      	beq.n	8000b7e <HAL_RCC_OscConfig+0x176>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d001      	beq.n	8000b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e1c0      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4939      	ldr	r1, [pc, #228]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b92:	e03a      	b.n	8000c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d020      	beq.n	8000bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b9c:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <HAL_RCC_OscConfig+0x270>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fcab 	bl	80004fc <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba8:	e008      	b.n	8000bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000baa:	f7ff fca7 	bl	80004fc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e1a1      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f0      	beq.n	8000baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4927      	ldr	r1, [pc, #156]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	600b      	str	r3, [r1, #0]
 8000bdc:	e015      	b.n	8000c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_RCC_OscConfig+0x270>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fc8a 	bl	80004fc <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bec:	f7ff fc86 	bl	80004fc <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e180      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d03a      	beq.n	8000c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d019      	beq.n	8000c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_RCC_OscConfig+0x274>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c24:	f7ff fc6a 	bl	80004fc <HAL_GetTick>
 8000c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fc66 	bl	80004fc <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e160      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f0      	beq.n	8000c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 faf4 	bl	8001238 <RCC_Delay>
 8000c50:	e01c      	b.n	8000c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_RCC_OscConfig+0x274>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c58:	f7ff fc50 	bl	80004fc <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c5e:	e00f      	b.n	8000c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c60:	f7ff fc4c 	bl	80004fc <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d908      	bls.n	8000c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e146      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	42420000 	.word	0x42420000
 8000c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c80:	4b92      	ldr	r3, [pc, #584]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1e9      	bne.n	8000c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 80a6 	beq.w	8000de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c9e:	4b8b      	ldr	r3, [pc, #556]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10d      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a87      	ldr	r2, [pc, #540]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b85      	ldr	r3, [pc, #532]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc6:	4b82      	ldr	r3, [pc, #520]	; (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d118      	bne.n	8000d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd2:	4b7f      	ldr	r3, [pc, #508]	; (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a7e      	ldr	r2, [pc, #504]	; (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cde:	f7ff fc0d 	bl	80004fc <HAL_GetTick>
 8000ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce6:	f7ff fc09 	bl	80004fc <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b64      	cmp	r3, #100	; 0x64
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e103      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf8:	4b75      	ldr	r3, [pc, #468]	; (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f0      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d106      	bne.n	8000d1a <HAL_RCC_OscConfig+0x312>
 8000d0c:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4a6e      	ldr	r2, [pc, #440]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6213      	str	r3, [r2, #32]
 8000d18:	e02d      	b.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0x334>
 8000d22:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	4a69      	ldr	r2, [pc, #420]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	6213      	str	r3, [r2, #32]
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4a66      	ldr	r2, [pc, #408]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	6213      	str	r3, [r2, #32]
 8000d3a:	e01c      	b.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b05      	cmp	r3, #5
 8000d42:	d10c      	bne.n	8000d5e <HAL_RCC_OscConfig+0x356>
 8000d44:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6213      	str	r3, [r2, #32]
 8000d50:	4b5e      	ldr	r3, [pc, #376]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4a5d      	ldr	r2, [pc, #372]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6213      	str	r3, [r2, #32]
 8000d5c:	e00b      	b.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000d5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	6a1b      	ldr	r3, [r3, #32]
 8000d62:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	6213      	str	r3, [r2, #32]
 8000d6a:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	f023 0304 	bic.w	r3, r3, #4
 8000d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d015      	beq.n	8000daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fbbd 	bl	80004fc <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d84:	e00a      	b.n	8000d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d86:	f7ff fbb9 	bl	80004fc <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e0b1      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0ee      	beq.n	8000d86 <HAL_RCC_OscConfig+0x37e>
 8000da8:	e014      	b.n	8000dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000daa:	f7ff fba7 	bl	80004fc <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db0:	e00a      	b.n	8000dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db2:	f7ff fba3 	bl	80004fc <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e09b      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc8:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1ee      	bne.n	8000db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d105      	bne.n	8000de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8087 	beq.w	8000efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df0:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d061      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d146      	bne.n	8000e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_RCC_OscConfig+0x4cc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fb77 	bl	80004fc <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e12:	f7ff fb73 	bl	80004fc <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e06d      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e38:	d108      	bne.n	8000e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4921      	ldr	r1, [pc, #132]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a19      	ldr	r1, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	491b      	ldr	r1, [pc, #108]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_RCC_OscConfig+0x4cc>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fb47 	bl	80004fc <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff fb43 	bl	80004fc <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e03d      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x46a>
 8000e90:	e035      	b.n	8000efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_RCC_OscConfig+0x4cc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fb30 	bl	80004fc <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea0:	f7ff fb2c 	bl	80004fc <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e026      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x498>
 8000ebe:	e01e      	b.n	8000efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e019      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40007000 	.word	0x40007000
 8000ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x500>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d001      	beq.n	8000efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0d0      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f20:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d910      	bls.n	8000f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 0207 	bic.w	r2, r3, #7
 8000f36:	4965      	ldr	r1, [pc, #404]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0b8      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f8c:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	494d      	ldr	r1, [pc, #308]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d040      	beq.n	800102c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d107      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d115      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e07f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d107      	bne.n	8000fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fca:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e073      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e06b      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f023 0203 	bic.w	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4936      	ldr	r1, [pc, #216]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ffc:	f7ff fa7e 	bl	80004fc <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001002:	e00a      	b.n	800101a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001004:	f7ff fa7a 	bl	80004fc <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e053      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 020c 	and.w	r2, r3, #12
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	429a      	cmp	r2, r3
 800102a:	d1eb      	bne.n	8001004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d210      	bcs.n	800105c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 0207 	bic.w	r2, r3, #7
 8001042:	4922      	ldr	r1, [pc, #136]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e032      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800109a:	f000 f821 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 800109e:	4602      	mov	r2, r0
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	490a      	ldr	r1, [pc, #40]	; (80010d4 <HAL_RCC_ClockConfig+0x1c8>)
 80010ac:	5ccb      	ldrb	r3, [r1, r3]
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_RCC_ClockConfig+0x1cc>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1d0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f952 	bl	8000364 <HAL_InitTick>

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	080041a0 	.word	0x080041a0
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	b490      	push	{r4, r7}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_RCC_GetSysClockFreq+0xac>)
 80010e8:	1d3c      	adds	r4, r7, #4
 80010ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010f0:	f240 2301 	movw	r3, #513	; 0x201
 80010f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_RCC_GetSysClockFreq+0xb0>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d002      	beq.n	8001120 <HAL_RCC_GetSysClockFreq+0x40>
 800111a:	2b08      	cmp	r3, #8
 800111c:	d003      	beq.n	8001126 <HAL_RCC_GetSysClockFreq+0x46>
 800111e:	e02b      	b.n	8001178 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001122:	623b      	str	r3, [r7, #32]
      break;
 8001124:	e02b      	b.n	800117e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	0c9b      	lsrs	r3, r3, #18
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3328      	adds	r3, #40	; 0x28
 8001130:	443b      	add	r3, r7
 8001132:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001136:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d012      	beq.n	8001168 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	0c5b      	lsrs	r3, r3, #17
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	3328      	adds	r3, #40	; 0x28
 800114e:	443b      	add	r3, r7
 8001150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001154:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800115a:	fb03 f202 	mul.w	r2, r3, r2
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	e004      	b.n	8001172 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	623b      	str	r3, [r7, #32]
      break;
 8001176:	e002      	b.n	800117e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800117a:	623b      	str	r3, [r7, #32]
      break;
 800117c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800117e:	6a3b      	ldr	r3, [r7, #32]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bc90      	pop	{r4, r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	08004154 	.word	0x08004154
 8001190:	40021000 	.word	0x40021000
 8001194:	007a1200 	.word	0x007a1200
 8001198:	003d0900 	.word	0x003d0900

0800119c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_RCC_GetHCLKFreq+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011b4:	f7ff fff2 	bl	800119c <HAL_RCC_GetHCLKFreq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	0adb      	lsrs	r3, r3, #11
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	4903      	ldr	r1, [pc, #12]	; (80011d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	080041b0 	.word	0x080041b0

080011d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	220f      	movs	r2, #15
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_RCC_GetClockConfig+0x58>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_RCC_GetClockConfig+0x58>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_GetClockConfig+0x58>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_RCC_GetClockConfig+0x58>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_RCC_GetClockConfig+0x5c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0207 	and.w	r2, r3, #7
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000
 8001234:	40022000 	.word	0x40022000

08001238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <RCC_Delay+0x34>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <RCC_Delay+0x38>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0a5b      	lsrs	r3, r3, #9
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001254:	bf00      	nop
  }
  while (Delay --);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	60fa      	str	r2, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f9      	bne.n	8001254 <RCC_Delay+0x1c>
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000000 	.word	0x20000000
 8001270:	10624dd3 	.word	0x10624dd3

08001274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e041      	b.n	800130a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f839 	bl	8001312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3304      	adds	r3, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f000 f9b4 	bl	8001620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d001      	beq.n	800133c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e03a      	b.n	80013b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_TIM_Base_Start_IT+0x98>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00e      	beq.n	800137c <HAL_TIM_Base_Start_IT+0x58>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001366:	d009      	beq.n	800137c <HAL_TIM_Base_Start_IT+0x58>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d004      	beq.n	800137c <HAL_TIM_Base_Start_IT+0x58>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d111      	bne.n	80013a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b06      	cmp	r3, #6
 800138c:	d010      	beq.n	80013b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800139e:	e007      	b.n	80013b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40012c00 	.word	0x40012c00
 80013c0:	40000400 	.word	0x40000400
 80013c4:	40000800 	.word	0x40000800

080013c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d11b      	bne.n	8001424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 0202 	mvn.w	r2, #2
 80013f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f8ed 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
 8001410:	e005      	b.n	800141e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f8e0 	bl	80015d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f8ef 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b04      	cmp	r3, #4
 8001430:	d122      	bne.n	8001478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b04      	cmp	r3, #4
 800143e:	d11b      	bne.n	8001478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0204 	mvn.w	r2, #4
 8001448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2202      	movs	r2, #2
 800144e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f8c3 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
 8001464:	e005      	b.n	8001472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8b6 	bl	80015d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f8c5 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b08      	cmp	r3, #8
 8001484:	d122      	bne.n	80014cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b08      	cmp	r3, #8
 8001492:	d11b      	bne.n	80014cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f06f 0208 	mvn.w	r2, #8
 800149c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2204      	movs	r2, #4
 80014a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f899 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
 80014b8:	e005      	b.n	80014c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f88c 	bl	80015d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f89b 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d122      	bne.n	8001520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d11b      	bne.n	8001520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0210 	mvn.w	r2, #16
 80014f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2208      	movs	r2, #8
 80014f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f86f 	bl	80015ea <HAL_TIM_IC_CaptureCallback>
 800150c:	e005      	b.n	800151a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f862 	bl	80015d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f871 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b01      	cmp	r3, #1
 800152c:	d10e      	bne.n	800154c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0201 	mvn.w	r2, #1
 8001544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7fe fec2 	bl	80002d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d10e      	bne.n	8001578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001564:	2b80      	cmp	r3, #128	; 0x80
 8001566:	d107      	bne.n	8001578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f8bf 	bl	80016f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	2b40      	cmp	r3, #64	; 0x40
 8001584:	d10e      	bne.n	80015a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001590:	2b40      	cmp	r3, #64	; 0x40
 8001592:	d107      	bne.n	80015a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800159c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f835 	bl	800160e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d10e      	bne.n	80015d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d107      	bne.n	80015d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0220 	mvn.w	r2, #32
 80015c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f88a 	bl	80016e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <TIM_Base_SetConfig+0xb8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00b      	beq.n	8001650 <TIM_Base_SetConfig+0x30>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163e:	d007      	beq.n	8001650 <TIM_Base_SetConfig+0x30>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a26      	ldr	r2, [pc, #152]	; (80016dc <TIM_Base_SetConfig+0xbc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d003      	beq.n	8001650 <TIM_Base_SetConfig+0x30>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <TIM_Base_SetConfig+0xc0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d108      	bne.n	8001662 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <TIM_Base_SetConfig+0xb8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00b      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d007      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <TIM_Base_SetConfig+0xbc>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d003      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <TIM_Base_SetConfig+0xc0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d108      	bne.n	8001694 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <TIM_Base_SetConfig+0xb8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d103      	bne.n	80016c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	615a      	str	r2, [r3, #20]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40000800 	.word	0x40000800

080016e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800170e:	f3ef 8305 	mrs	r3, IPSR
 8001712:	60bb      	str	r3, [r7, #8]
  return(result);
 8001714:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800171a:	f3ef 8310 	mrs	r3, PRIMASK
 800171e:	607b      	str	r3, [r7, #4]
  return(result);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <osKernelInitialize+0x32>
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <osKernelInitialize+0x60>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d109      	bne.n	8001742 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800172e:	f3ef 8311 	mrs	r3, BASEPRI
 8001732:	603b      	str	r3, [r7, #0]
  return(result);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800173a:	f06f 0305 	mvn.w	r3, #5
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e00c      	b.n	800175c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <osKernelInitialize+0x60>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <osKernelInitialize+0x60>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e002      	b.n	800175c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	2000007c 	.word	0x2000007c

0800176c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001772:	f3ef 8305 	mrs	r3, IPSR
 8001776:	60bb      	str	r3, [r7, #8]
  return(result);
 8001778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800177e:	f3ef 8310 	mrs	r3, PRIMASK
 8001782:	607b      	str	r3, [r7, #4]
  return(result);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <osKernelStart+0x32>
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <osKernelStart+0x64>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d109      	bne.n	80017a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001792:	f3ef 8311 	mrs	r3, BASEPRI
 8001796:	603b      	str	r3, [r7, #0]
  return(result);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800179e:	f06f 0305 	mvn.w	r3, #5
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e00e      	b.n	80017c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <osKernelStart+0x64>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <osKernelStart+0x64>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80017b4:	f001 f878 	bl	80028a8 <vTaskStartScheduler>
      stat = osOK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e002      	b.n	80017c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000007c 	.word	0x2000007c

080017d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b092      	sub	sp, #72	; 0x48
 80017d8:	af04      	add	r7, sp, #16
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017e4:	f3ef 8305 	mrs	r3, IPSR
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 8094 	bne.w	800191a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017f2:	f3ef 8310 	mrs	r3, PRIMASK
 80017f6:	623b      	str	r3, [r7, #32]
  return(result);
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 808d 	bne.w	800191a <osThreadNew+0x146>
 8001800:	4b48      	ldr	r3, [pc, #288]	; (8001924 <osThreadNew+0x150>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d106      	bne.n	8001816 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001808:	f3ef 8311 	mrs	r3, BASEPRI
 800180c:	61fb      	str	r3, [r7, #28]
  return(result);
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 8082 	bne.w	800191a <osThreadNew+0x146>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d07e      	beq.n	800191a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001820:	2318      	movs	r3, #24
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001824:	2300      	movs	r3, #0
 8001826:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001828:	f107 031b 	add.w	r3, r7, #27
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d045      	beq.n	80018c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <osThreadNew+0x74>
        name = attr->name;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <osThreadNew+0x9a>
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	2b38      	cmp	r3, #56	; 0x38
 8001860:	d805      	bhi.n	800186e <osThreadNew+0x9a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <osThreadNew+0x9e>
        return (NULL);
 800186e:	2300      	movs	r3, #0
 8001870:	e054      	b.n	800191c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00e      	beq.n	80018a8 <osThreadNew+0xd4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b5b      	cmp	r3, #91	; 0x5b
 8001890:	d90a      	bls.n	80018a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <osThreadNew+0xd4>
        mem = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a6:	e010      	b.n	80018ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <osThreadNew+0xf6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <osThreadNew+0xf6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d104      	bne.n	80018ca <osThreadNew+0xf6>
          mem = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c4:	e001      	b.n	80018ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d110      	bne.n	80018f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018d8:	9202      	str	r2, [sp, #8]
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fe12 	bl	8002510 <xTaskCreateStatic>
 80018ec:	4603      	mov	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e013      	b.n	800191a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d110      	bne.n	800191a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fe5c 	bl	80025c8 <xTaskCreate>
 8001910:	4603      	mov	r3, r0
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <osThreadNew+0x146>
          hTask = NULL;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800191a:	697b      	ldr	r3, [r7, #20]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3738      	adds	r7, #56	; 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000007c 	.word	0x2000007c

08001928 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001930:	f3ef 8305 	mrs	r3, IPSR
 8001934:	613b      	str	r3, [r7, #16]
  return(result);
 8001936:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10f      	bne.n	800195c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800193c:	f3ef 8310 	mrs	r3, PRIMASK
 8001940:	60fb      	str	r3, [r7, #12]
  return(result);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <osDelay+0x34>
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <osDelay+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d109      	bne.n	8001964 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001950:	f3ef 8311 	mrs	r3, BASEPRI
 8001954:	60bb      	str	r3, [r7, #8]
  return(result);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <osDelay+0x3c>
    stat = osErrorISR;
 800195c:	f06f 0305 	mvn.w	r3, #5
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e007      	b.n	8001974 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <osDelay+0x4c>
      vTaskDelay(ticks);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 ff66 	bl	8002840 <vTaskDelay>
    }
  }

  return (stat);
 8001974:	697b      	ldr	r3, [r7, #20]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000007c 	.word	0x2000007c

08001984 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <vApplicationGetIdleTaskMemory+0x28>)
 8001994:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800199a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000080 	.word	0x20000080
 80019b0:	200000dc 	.word	0x200000dc

080019b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80019c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <vApplicationGetTimerTaskMemory+0x30>)
 80019ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	200002dc 	.word	0x200002dc
 80019e4:	20000338 	.word	0x20000338

080019e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 0208 	add.w	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 0208 	add.w	r2, r3, #8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f103 0208 	add.w	r2, r3, #8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d103      	bne.n	8001aa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e00c      	b.n	8001abe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e002      	b.n	8001ab2 <vListInsert+0x2e>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d2f6      	bcs.n	8001aac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6892      	ldr	r2, [r2, #8]
 8001b0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6852      	ldr	r2, [r2, #4]
 8001b14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d103      	bne.n	8001b28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
	...

08001b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10a      	bne.n	8001b72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b60:	f383 8811 	msr	BASEPRI, r3
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b6e:	bf00      	nop
 8001b70:	e7fe      	b.n	8001b70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b72:	f001 ffcb 	bl	8003b0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	441a      	add	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	441a      	add	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	22ff      	movs	r2, #255	; 0xff
 8001bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	22ff      	movs	r2, #255	; 0xff
 8001bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d114      	bne.n	8001bf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01a      	beq.n	8001c06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3310      	adds	r3, #16
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 f8f1 	bl	8002dbc <xTaskRemoveFromEventList>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <xQueueGenericReset+0xcc>)
 8001be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	e009      	b.n	8001c06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fef6 	bl	80019e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3324      	adds	r3, #36	; 0x24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fef1 	bl	80019e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c06:	f001 ffb1 	bl	8003b6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	e000ed04 	.word	0xe000ed04

08001c18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c3e:	bf00      	nop
 8001c40:	e7fe      	b.n	8001c40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c5a:	bf00      	nop
 8001c5c:	e7fe      	b.n	8001c5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <xQueueGenericCreateStatic+0x52>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <xQueueGenericCreateStatic+0x56>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <xQueueGenericCreateStatic+0x58>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	623b      	str	r3, [r7, #32]
}
 8001c86:	bf00      	nop
 8001c88:	e7fe      	b.n	8001c88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <xQueueGenericCreateStatic+0x7e>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <xQueueGenericCreateStatic+0x82>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <xQueueGenericCreateStatic+0x84>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca4:	f383 8811 	msr	BASEPRI, r3
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	61fb      	str	r3, [r7, #28]
}
 8001cb2:	bf00      	nop
 8001cb4:	e7fe      	b.n	8001cb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001cb6:	2350      	movs	r3, #80	; 0x50
 8001cb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b50      	cmp	r3, #80	; 0x50
 8001cbe:	d00a      	beq.n	8001cd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	61bb      	str	r3, [r7, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	e7fe      	b.n	8001cd4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ce8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f805 	bl	8001d06 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3730      	adds	r7, #48	; 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e002      	b.n	8001d28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d34:	2101      	movs	r1, #1
 8001d36:	69b8      	ldr	r0, [r7, #24]
 8001d38:	f7ff ff06 	bl	8001b48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08e      	sub	sp, #56	; 0x38
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <xQueueGenericSend+0x32>
	__asm volatile
 8001d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d7a:	bf00      	nop
 8001d7c:	e7fe      	b.n	8001d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <xQueueGenericSend+0x40>
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <xQueueGenericSend+0x44>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <xQueueGenericSend+0x46>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <xQueueGenericSend+0x60>
	__asm volatile
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001da8:	bf00      	nop
 8001daa:	e7fe      	b.n	8001daa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d103      	bne.n	8001dba <xQueueGenericSend+0x6e>
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <xQueueGenericSend+0x72>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <xQueueGenericSend+0x74>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <xQueueGenericSend+0x8e>
	__asm volatile
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	623b      	str	r3, [r7, #32]
}
 8001dd6:	bf00      	nop
 8001dd8:	e7fe      	b.n	8001dd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dda:	f001 f9b1 	bl	8003140 <xTaskGetSchedulerState>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <xQueueGenericSend+0x9e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <xQueueGenericSend+0xa2>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <xQueueGenericSend+0xa4>
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <xQueueGenericSend+0xbe>
	__asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	61fb      	str	r3, [r7, #28]
}
 8001e06:	bf00      	nop
 8001e08:	e7fe      	b.n	8001e08 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e0a:	f001 fe7f 	bl	8003b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <xQueueGenericSend+0xd4>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d129      	bne.n	8001e74 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e26:	f000 fa07 	bl	8002238 <prvCopyDataToQueue>
 8001e2a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	3324      	adds	r3, #36	; 0x24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 ffbf 	bl	8002dbc <xTaskRemoveFromEventList>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <xQueueGenericSend+0x1f8>)
 8001e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	e00a      	b.n	8001e6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <xQueueGenericSend+0x1f8>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e6c:	f001 fe7e 	bl	8003b6c <vPortExitCritical>
				return pdPASS;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e063      	b.n	8001f3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e7a:	f001 fe77 	bl	8003b6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e05c      	b.n	8001f3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fff9 	bl	8002e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e96:	f001 fe69 	bl	8003b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e9a:	f000 fd6b 	bl	8002974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e9e:	f001 fe35 	bl	8003b0c <vPortEnterCritical>
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d103      	bne.n	8001eb8 <xQueueGenericSend+0x16c>
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d103      	bne.n	8001ece <xQueueGenericSend+0x182>
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ece:	f001 fe4d 	bl	8003b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ed2:	1d3a      	adds	r2, r7, #4
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 ffe8 	bl	8002eb0 <xTaskCheckForTimeOut>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d124      	bne.n	8001f30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee8:	f000 fa9e 	bl	8002428 <prvIsQueueFull>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d018      	beq.n	8001f24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 ff0e 	bl	8002d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f02:	f000 fa29 	bl	8002358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f06:	f000 fd43 	bl	8002990 <xTaskResumeAll>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f af7c 	bne.w	8001e0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <xQueueGenericSend+0x1f8>)
 8001f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	e772      	b.n	8001e0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f26:	f000 fa17 	bl	8002358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f2a:	f000 fd31 	bl	8002990 <xTaskResumeAll>
 8001f2e:	e76c      	b.n	8001e0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f32:	f000 fa11 	bl	8002358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f36:	f000 fd2b 	bl	8002990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f3a:	2300      	movs	r3, #0
		}
	}
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3738      	adds	r7, #56	; 0x38
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	e000ed04 	.word	0xe000ed04

08001f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f72:	bf00      	nop
 8001f74:	e7fe      	b.n	8001f74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <xQueueGenericSendFromISR+0x3c>
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <xQueueGenericSendFromISR+0x40>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <xQueueGenericSendFromISR+0x42>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	623b      	str	r3, [r7, #32]
}
 8001fa0:	bf00      	nop
 8001fa2:	e7fe      	b.n	8001fa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d103      	bne.n	8001fb2 <xQueueGenericSendFromISR+0x6a>
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <xQueueGenericSendFromISR+0x6e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <xQueueGenericSendFromISR+0x70>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	61fb      	str	r3, [r7, #28]
}
 8001fce:	bf00      	nop
 8001fd0:	e7fe      	b.n	8001fd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fd2:	f001 fe5d 	bl	8003c90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8001fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	61ba      	str	r2, [r7, #24]
 8001fec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001fee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <xQueueGenericSendFromISR+0xbc>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d12c      	bne.n	800205e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800200a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002014:	f000 f910 	bl	8002238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002018:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d112      	bne.n	8002048 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	3324      	adds	r3, #36	; 0x24
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fec4 	bl	8002dbc <xTaskRemoveFromEventList>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00e      	beq.n	8002058 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800204c:	3301      	adds	r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	b25a      	sxtb	r2, r3
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002058:	2301      	movs	r3, #1
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800205c:	e001      	b.n	8002062 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800205e:	2300      	movs	r3, #0
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800206c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002070:	4618      	mov	r0, r3
 8002072:	3738      	adds	r7, #56	; 0x38
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <xQueueReceive+0x30>
	__asm volatile
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	623b      	str	r3, [r7, #32]
}
 80020a4:	bf00      	nop
 80020a6:	e7fe      	b.n	80020a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <xQueueReceive+0x3e>
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <xQueueReceive+0x42>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <xQueueReceive+0x44>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <xQueueReceive+0x5e>
	__asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	61fb      	str	r3, [r7, #28]
}
 80020d2:	bf00      	nop
 80020d4:	e7fe      	b.n	80020d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020d6:	f001 f833 	bl	8003140 <xTaskGetSchedulerState>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <xQueueReceive+0x6e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <xQueueReceive+0x72>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <xQueueReceive+0x74>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <xQueueReceive+0x8e>
	__asm volatile
 80020f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	61bb      	str	r3, [r7, #24]
}
 8002102:	bf00      	nop
 8002104:	e7fe      	b.n	8002104 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002106:	f001 fd01 	bl	8003b0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01f      	beq.n	8002156 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800211a:	f000 f8f7 	bl	800230c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00f      	beq.n	800214e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	3310      	adds	r3, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fe42 	bl	8002dbc <xTaskRemoveFromEventList>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <xQueueReceive+0x1bc>)
 8002140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800214e:	f001 fd0d 	bl	8003b6c <vPortExitCritical>
				return pdPASS;
 8002152:	2301      	movs	r3, #1
 8002154:	e069      	b.n	800222a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800215c:	f001 fd06 	bl	8003b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002160:	2300      	movs	r3, #0
 8002162:	e062      	b.n	800222a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fe88 	bl	8002e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002174:	2301      	movs	r3, #1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002178:	f001 fcf8 	bl	8003b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800217c:	f000 fbfa 	bl	8002974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002180:	f001 fcc4 	bl	8003b0c <vPortEnterCritical>
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800218a:	b25b      	sxtb	r3, r3
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d103      	bne.n	800219a <xQueueReceive+0x122>
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d103      	bne.n	80021b0 <xQueueReceive+0x138>
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021b0:	f001 fcdc 	bl	8003b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fe77 	bl	8002eb0 <xTaskCheckForTimeOut>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d123      	bne.n	8002210 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ca:	f000 f917 	bl	80023fc <prvIsQueueEmpty>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d017      	beq.n	8002204 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	3324      	adds	r3, #36	; 0x24
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fd9d 	bl	8002d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021e4:	f000 f8b8 	bl	8002358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021e8:	f000 fbd2 	bl	8002990 <xTaskResumeAll>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d189      	bne.n	8002106 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <xQueueReceive+0x1bc>)
 80021f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	e780      	b.n	8002106 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002206:	f000 f8a7 	bl	8002358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800220a:	f000 fbc1 	bl	8002990 <xTaskResumeAll>
 800220e:	e77a      	b.n	8002106 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002212:	f000 f8a1 	bl	8002358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002216:	f000 fbbb 	bl	8002990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800221a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800221c:	f000 f8ee 	bl	80023fc <prvIsQueueEmpty>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f43f af6f 	beq.w	8002106 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800222a:	4618      	mov	r0, r3
 800222c:	3730      	adds	r7, #48	; 0x30
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000ed04 	.word	0xe000ed04

08002238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d14d      	bne.n	80022fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 ff8a 	bl	800317c <xTaskPriorityDisinherit>
 8002268:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	e043      	b.n	80022fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d119      	bne.n	80022ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6898      	ldr	r0, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	461a      	mov	r2, r3
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	f001 ff3e 	bl	8004104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	441a      	add	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d32b      	bcc.n	80022fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e026      	b.n	80022fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	461a      	mov	r2, r3
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	f001 ff24 	bl	8004104 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	425b      	negs	r3, r3
 80022c6:	441a      	add	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d207      	bcs.n	80022e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	425b      	negs	r3, r3
 80022e2:	441a      	add	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d105      	bne.n	80022fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002302:	697b      	ldr	r3, [r7, #20]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	441a      	add	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d303      	bcc.n	8002340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68d9      	ldr	r1, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	461a      	mov	r2, r3
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f001 feda 	bl	8004104 <memcpy>
	}
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002360:	f001 fbd4 	bl	8003b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800236c:	e011      	b.n	8002392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3324      	adds	r3, #36	; 0x24
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fd1e 	bl	8002dbc <xTaskRemoveFromEventList>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002386:	f000 fdf5 	bl	8002f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3b01      	subs	r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	dce9      	bgt.n	800236e <prvUnlockQueue+0x16>
 800239a:	e000      	b.n	800239e <prvUnlockQueue+0x46>
					break;
 800239c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80023a6:	f001 fbe1 	bl	8003b6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023aa:	f001 fbaf 	bl	8003b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b6:	e011      	b.n	80023dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3310      	adds	r3, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fcf9 	bl	8002dbc <xTaskRemoveFromEventList>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023d0:	f000 fdd0 	bl	8002f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dce9      	bgt.n	80023b8 <prvUnlockQueue+0x60>
 80023e4:	e000      	b.n	80023e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023f0:	f001 fbbc 	bl	8003b6c <vPortExitCritical>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002404:	f001 fb82 	bl	8003b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002410:	2301      	movs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e001      	b.n	800241a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800241a:	f001 fba7 	bl	8003b6c <vPortExitCritical>

	return xReturn;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002430:	f001 fb6c 	bl	8003b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	429a      	cmp	r2, r3
 800243e:	d102      	bne.n	8002446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002440:	2301      	movs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e001      	b.n	800244a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800244a:	f001 fb8f 	bl	8003b6c <vPortExitCritical>

	return xReturn;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e014      	b.n	8002492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <vQueueAddToRegistry+0x4c>)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002474:	490b      	ldr	r1, [pc, #44]	; (80024a4 <vQueueAddToRegistry+0x4c>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <vQueueAddToRegistry+0x4c>)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800248a:	e006      	b.n	800249a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b07      	cmp	r3, #7
 8002496:	d9e7      	bls.n	8002468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	20000738 	.word	0x20000738

080024a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024b8:	f001 fb28 	bl	8003b0c <vPortEnterCritical>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d103      	bne.n	80024d2 <vQueueWaitForMessageRestricted+0x2a>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d103      	bne.n	80024e8 <vQueueWaitForMessageRestricted+0x40>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e8:	f001 fb40 	bl	8003b6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d106      	bne.n	8002502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fc31 	bl	8002d64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff28 	bl	8002358 <prvUnlockQueue>
	}
 8002508:	bf00      	nop
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08e      	sub	sp, #56	; 0x38
 8002514:	af04      	add	r7, sp, #16
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	623b      	str	r3, [r7, #32]
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <xTaskCreateStatic+0x46>
	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	61fb      	str	r3, [r7, #28]
}
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002556:	235c      	movs	r3, #92	; 0x5c
 8002558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b5c      	cmp	r3, #92	; 0x5c
 800255e:	d00a      	beq.n	8002576 <xTaskCreateStatic+0x66>
	__asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	61bb      	str	r3, [r7, #24]
}
 8002572:	bf00      	nop
 8002574:	e7fe      	b.n	8002574 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01e      	beq.n	80025ba <xTaskCreateStatic+0xaa>
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01b      	beq.n	80025ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800258a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002594:	2300      	movs	r3, #0
 8002596:	9303      	str	r3, [sp, #12]
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f850 	bl	8002652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025b4:	f000 f8d4 	bl	8002760 <prvAddNewTaskToReadyList>
 80025b8:	e001      	b.n	80025be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025be:	697b      	ldr	r3, [r7, #20]
	}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af04      	add	r7, sp, #16
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fb95 	bl	8003d0c <pvPortMalloc>
 80025e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00e      	beq.n	8002608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80025ea:	205c      	movs	r0, #92	; 0x5c
 80025ec:	f001 fb8e 	bl	8003d0c <pvPortMalloc>
 80025f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
 80025fe:	e005      	b.n	800260c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f001 fc47 	bl	8003e94 <vPortFree>
 8002606:	e001      	b.n	800260c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d017      	beq.n	8002642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	2300      	movs	r3, #0
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f80e 	bl	8002652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002636:	69f8      	ldr	r0, [r7, #28]
 8002638:	f000 f892 	bl	8002760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800263c:	2301      	movs	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	e002      	b.n	8002648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002648:	69bb      	ldr	r3, [r7, #24]
	}
 800264a:	4618      	mov	r0, r3
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	461a      	mov	r2, r3
 800266a:	21a5      	movs	r1, #165	; 0xa5
 800266c:	f001 fd58 	bl	8004120 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800267a:	3b01      	subs	r3, #1
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f023 0307 	bic.w	r3, r3, #7
 8002688:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <prvInitialiseNewTask+0x58>
	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	617b      	str	r3, [r7, #20]
}
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e012      	b.n	80026d6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	7819      	ldrb	r1, [r3, #0]
 80026b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	3334      	adds	r3, #52	; 0x34
 80026c0:	460a      	mov	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3301      	adds	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d9e9      	bls.n	80026b0 <prvInitialiseNewTask+0x5e>
 80026dc:	e000      	b.n	80026e0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80026de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b37      	cmp	r3, #55	; 0x37
 80026ec:	d901      	bls.n	80026f2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026ee:	2337      	movs	r3, #55	; 0x37
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	3304      	adds	r3, #4
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f98c 	bl	8001a26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	3318      	adds	r3, #24
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f987 	bl	8001a26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	2200      	movs	r2, #0
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	68f9      	ldr	r1, [r7, #12]
 8002740:	69b8      	ldr	r0, [r7, #24]
 8002742:	f001 f8ef 	bl	8003924 <pxPortInitialiseStack>
 8002746:	4602      	mov	r2, r0
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002768:	f001 f9d0 	bl	8003b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <prvAddNewTaskToReadyList+0xc4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <prvAddNewTaskToReadyList+0xc4>)
 8002774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002776:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <prvAddNewTaskToReadyList+0xc8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <prvAddNewTaskToReadyList+0xc8>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <prvAddNewTaskToReadyList+0xc4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d110      	bne.n	80027ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800278c:	f000 fc16 	bl	8002fbc <prvInitialiseTaskLists>
 8002790:	e00d      	b.n	80027ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <prvAddNewTaskToReadyList+0xcc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <prvAddNewTaskToReadyList+0xc8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d802      	bhi.n	80027ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027a8:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <prvAddNewTaskToReadyList+0xc8>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <prvAddNewTaskToReadyList+0xd0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <prvAddNewTaskToReadyList+0xd0>)
 80027b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <prvAddNewTaskToReadyList+0xd0>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <prvAddNewTaskToReadyList+0xd4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d903      	bls.n	80027d4 <prvAddNewTaskToReadyList+0x74>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <prvAddNewTaskToReadyList+0xd4>)
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4a15      	ldr	r2, [pc, #84]	; (8002838 <prvAddNewTaskToReadyList+0xd8>)
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f7ff f927 	bl	8001a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027f0:	f001 f9bc 	bl	8003b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <prvAddNewTaskToReadyList+0xcc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <prvAddNewTaskToReadyList+0xc8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	429a      	cmp	r2, r3
 8002808:	d207      	bcs.n	800281a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <prvAddNewTaskToReadyList+0xdc>)
 800280c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000c4c 	.word	0x20000c4c
 8002828:	20000778 	.word	0x20000778
 800282c:	20000c58 	.word	0x20000c58
 8002830:	20000c68 	.word	0x20000c68
 8002834:	20000c54 	.word	0x20000c54
 8002838:	2000077c 	.word	0x2000077c
 800283c:	e000ed04 	.word	0xe000ed04

08002840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <vTaskDelay+0x60>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <vTaskDelay+0x30>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	60bb      	str	r3, [r7, #8]
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002870:	f000 f880 	bl	8002974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002874:	2100      	movs	r1, #0
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fcee 	bl	8003258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800287c:	f000 f888 	bl	8002990 <xTaskResumeAll>
 8002880:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <vTaskDelay+0x64>)
 800288a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000c74 	.word	0x20000c74
 80028a4:	e000ed04 	.word	0xe000ed04

080028a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028b6:	463a      	mov	r2, r7
 80028b8:	1d39      	adds	r1, r7, #4
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f860 	bl	8001984 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	9202      	str	r2, [sp, #8]
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	460a      	mov	r2, r1
 80028d6:	4921      	ldr	r1, [pc, #132]	; (800295c <vTaskStartScheduler+0xb4>)
 80028d8:	4821      	ldr	r0, [pc, #132]	; (8002960 <vTaskStartScheduler+0xb8>)
 80028da:	f7ff fe19 	bl	8002510 <xTaskCreateStatic>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a20      	ldr	r2, [pc, #128]	; (8002964 <vTaskStartScheduler+0xbc>)
 80028e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <vTaskStartScheduler+0xbc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028ec:	2301      	movs	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e001      	b.n	80028f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d102      	bne.n	8002902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028fc:	f000 fd00 	bl	8003300 <xTimerCreateTimerTask>
 8002900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d116      	bne.n	8002936 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	613b      	str	r3, [r7, #16]
}
 800291a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <vTaskStartScheduler+0xc0>)
 800291e:	f04f 32ff 	mov.w	r2, #4294967295
 8002922:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <vTaskStartScheduler+0xc4>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <vTaskStartScheduler+0xc8>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002930:	f001 f87a 	bl	8003a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002934:	e00e      	b.n	8002954 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d10a      	bne.n	8002954 <vTaskStartScheduler+0xac>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	60fb      	str	r3, [r7, #12]
}
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <vTaskStartScheduler+0xaa>
}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	08004164 	.word	0x08004164
 8002960:	08002f8d 	.word	0x08002f8d
 8002964:	20000c70 	.word	0x20000c70
 8002968:	20000c6c 	.word	0x20000c6c
 800296c:	20000c58 	.word	0x20000c58
 8002970:	20000c50 	.word	0x20000c50

08002974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <vTaskSuspendAll+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <vTaskSuspendAll+0x18>)
 8002980:	6013      	str	r3, [r2, #0]
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000c74 	.word	0x20000c74

08002990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800299e:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <xTaskResumeAll+0x118>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <xTaskResumeAll+0x2c>
	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	603b      	str	r3, [r7, #0]
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029bc:	f001 f8a6 	bl	8003b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029c0:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <xTaskResumeAll+0x118>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <xTaskResumeAll+0x118>)
 80029c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <xTaskResumeAll+0x118>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d162      	bne.n	8002a98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <xTaskResumeAll+0x11c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d05e      	beq.n	8002a98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029da:	e02f      	b.n	8002a3c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <xTaskResumeAll+0x120>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3318      	adds	r3, #24
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f883 	bl	8001af4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f87e 	bl	8001af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <xTaskResumeAll+0x124>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d903      	bls.n	8002a0c <xTaskResumeAll+0x7c>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <xTaskResumeAll+0x124>)
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <xTaskResumeAll+0x128>)
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7ff f80b 	bl	8001a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <xTaskResumeAll+0x12c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <xTaskResumeAll+0x130>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <xTaskResumeAll+0x120>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1cb      	bne.n	80029dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a4a:	f000 fb55 	bl	80030f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <xTaskResumeAll+0x134>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d010      	beq.n	8002a7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a5a:	f000 f845 	bl	8002ae8 <xTaskIncrementTick>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <xTaskResumeAll+0x130>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f1      	bne.n	8002a5a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <xTaskResumeAll+0x134>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <xTaskResumeAll+0x130>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <xTaskResumeAll+0x138>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a98:	f001 f868 	bl	8003b6c <vPortExitCritical>

	return xAlreadyYielded;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000c74 	.word	0x20000c74
 8002aac:	20000c4c 	.word	0x20000c4c
 8002ab0:	20000c0c 	.word	0x20000c0c
 8002ab4:	20000c54 	.word	0x20000c54
 8002ab8:	2000077c 	.word	0x2000077c
 8002abc:	20000778 	.word	0x20000778
 8002ac0:	20000c60 	.word	0x20000c60
 8002ac4:	20000c5c 	.word	0x20000c5c
 8002ac8:	e000ed04 	.word	0xe000ed04

08002acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <xTaskGetTickCount+0x18>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ad8:	687b      	ldr	r3, [r7, #4]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	20000c50 	.word	0x20000c50

08002ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002af2:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <xTaskIncrementTick+0x150>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 808e 	bne.w	8002c18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002afc:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <xTaskIncrementTick+0x154>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b04:	4a4d      	ldr	r2, [pc, #308]	; (8002c3c <xTaskIncrementTick+0x154>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d120      	bne.n	8002b52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <xTaskIncrementTick+0x158>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <xTaskIncrementTick+0x48>
	__asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	603b      	str	r3, [r7, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	e7fe      	b.n	8002b2e <xTaskIncrementTick+0x46>
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <xTaskIncrementTick+0x158>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <xTaskIncrementTick+0x15c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <xTaskIncrementTick+0x158>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4a41      	ldr	r2, [pc, #260]	; (8002c44 <xTaskIncrementTick+0x15c>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <xTaskIncrementTick+0x160>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a3f      	ldr	r2, [pc, #252]	; (8002c48 <xTaskIncrementTick+0x160>)
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	f000 fad3 	bl	80030f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b52:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <xTaskIncrementTick+0x164>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d34e      	bcc.n	8002bfa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <xTaskIncrementTick+0x158>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <xTaskIncrementTick+0x82>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xTaskIncrementTick+0x84>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <xTaskIncrementTick+0x164>)
 8002b72:	f04f 32ff 	mov.w	r2, #4294967295
 8002b76:	601a      	str	r2, [r3, #0]
					break;
 8002b78:	e03f      	b.n	8002bfa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <xTaskIncrementTick+0x158>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d203      	bcs.n	8002b9a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b92:	4a2e      	ldr	r2, [pc, #184]	; (8002c4c <xTaskIncrementTick+0x164>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6013      	str	r3, [r2, #0]
						break;
 8002b98:	e02f      	b.n	8002bfa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe ffa8 	bl	8001af4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3318      	adds	r3, #24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe ff9f 	bl	8001af4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <xTaskIncrementTick+0x168>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d903      	bls.n	8002bca <xTaskIncrementTick+0xe2>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <xTaskIncrementTick+0x168>)
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <xTaskIncrementTick+0x16c>)
 8002bd8:	441a      	add	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f7fe ff2c 	bl	8001a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <xTaskIncrementTick+0x170>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3b3      	bcc.n	8002b5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bf8:	e7b0      	b.n	8002b5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <xTaskIncrementTick+0x170>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	4914      	ldr	r1, [pc, #80]	; (8002c54 <xTaskIncrementTick+0x16c>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d907      	bls.n	8002c22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e004      	b.n	8002c22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <xTaskIncrementTick+0x174>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <xTaskIncrementTick+0x174>)
 8002c20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <xTaskIncrementTick+0x178>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c2e:	697b      	ldr	r3, [r7, #20]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000c74 	.word	0x20000c74
 8002c3c:	20000c50 	.word	0x20000c50
 8002c40:	20000c04 	.word	0x20000c04
 8002c44:	20000c08 	.word	0x20000c08
 8002c48:	20000c64 	.word	0x20000c64
 8002c4c:	20000c6c 	.word	0x20000c6c
 8002c50:	20000c54 	.word	0x20000c54
 8002c54:	2000077c 	.word	0x2000077c
 8002c58:	20000778 	.word	0x20000778
 8002c5c:	20000c5c 	.word	0x20000c5c
 8002c60:	20000c60 	.word	0x20000c60

08002c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <vTaskSwitchContext+0xa4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <vTaskSwitchContext+0xa8>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c78:	e041      	b.n	8002cfe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <vTaskSwitchContext+0xa8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <vTaskSwitchContext+0xac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e010      	b.n	8002caa <vTaskSwitchContext+0x46>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <vTaskSwitchContext+0x40>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	607b      	str	r3, [r7, #4]
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <vTaskSwitchContext+0x3e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	491a      	ldr	r1, [pc, #104]	; (8002d14 <vTaskSwitchContext+0xb0>)
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0e4      	beq.n	8002c88 <vTaskSwitchContext+0x24>
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <vTaskSwitchContext+0xb0>)
 8002cca:	4413      	add	r3, r2
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d104      	bne.n	8002cee <vTaskSwitchContext+0x8a>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <vTaskSwitchContext+0xb4>)
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <vTaskSwitchContext+0xac>)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6013      	str	r3, [r2, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	20000c74 	.word	0x20000c74
 8002d0c:	20000c60 	.word	0x20000c60
 8002d10:	20000c54 	.word	0x20000c54
 8002d14:	2000077c 	.word	0x2000077c
 8002d18:	20000778 	.word	0x20000778

08002d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	60fb      	str	r3, [r7, #12]
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <vTaskPlaceOnEventList+0x44>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3318      	adds	r3, #24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fe9a 	bl	8001a84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d50:	2101      	movs	r1, #1
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	f000 fa80 	bl	8003258 <prvAddCurrentTaskToDelayedList>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000778 	.word	0x20000778

08002d64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	617b      	str	r3, [r7, #20]
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3318      	adds	r3, #24
 8002d92:	4619      	mov	r1, r3
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7fe fe52 	bl	8001a3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
 8002da4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	68b8      	ldr	r0, [r7, #8]
 8002daa:	f000 fa55 	bl	8003258 <prvAddCurrentTaskToDelayedList>
	}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000778 	.word	0x20000778

08002dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	60fb      	str	r3, [r7, #12]
}
 8002de4:	bf00      	nop
 8002de6:	e7fe      	b.n	8002de6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	3318      	adds	r3, #24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fe81 	bl	8001af4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <xTaskRemoveFromEventList+0xb0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11d      	bne.n	8002e36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fe78 	bl	8001af4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <xTaskRemoveFromEventList+0xb4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d903      	bls.n	8002e18 <xTaskRemoveFromEventList+0x5c>
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <xTaskRemoveFromEventList+0xb4>)
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <xTaskRemoveFromEventList+0xb8>)
 8002e26:	441a      	add	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7fe fe05 	bl	8001a3e <vListInsertEnd>
 8002e34:	e005      	b.n	8002e42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	3318      	adds	r3, #24
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480e      	ldr	r0, [pc, #56]	; (8002e78 <xTaskRemoveFromEventList+0xbc>)
 8002e3e:	f7fe fdfe 	bl	8001a3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <xTaskRemoveFromEventList+0xc0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d905      	bls.n	8002e5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <xTaskRemoveFromEventList+0xc4>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e001      	b.n	8002e60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002e60:	697b      	ldr	r3, [r7, #20]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000c74 	.word	0x20000c74
 8002e70:	20000c54 	.word	0x20000c54
 8002e74:	2000077c 	.word	0x2000077c
 8002e78:	20000c0c 	.word	0x20000c0c
 8002e7c:	20000778 	.word	0x20000778
 8002e80:	20000c60 	.word	0x20000c60

08002e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <vTaskInternalSetTimeOutState+0x24>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <vTaskInternalSetTimeOutState+0x28>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	605a      	str	r2, [r3, #4]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000c64 	.word	0x20000c64
 8002eac:	20000c50 	.word	0x20000c50

08002eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	613b      	str	r3, [r7, #16]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	60fb      	str	r3, [r7, #12]
}
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002ef2:	f000 fe0b 	bl	8003b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <xTaskCheckForTimeOut+0xbc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d102      	bne.n	8002f16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	e023      	b.n	8002f5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <xTaskCheckForTimeOut+0xc0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d007      	beq.n	8002f32 <xTaskCheckForTimeOut+0x82>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	e015      	b.n	8002f5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d20b      	bcs.n	8002f54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad2      	subs	r2, r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff9b 	bl	8002e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e004      	b.n	8002f5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f5e:	f000 fe05 	bl	8003b6c <vPortExitCritical>

	return xReturn;
 8002f62:	69fb      	ldr	r3, [r7, #28]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000c50 	.word	0x20000c50
 8002f70:	20000c64 	.word	0x20000c64

08002f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <vTaskMissedYield+0x14>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000c60 	.word	0x20000c60

08002f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f94:	f000 f852 	bl	800303c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <prvIdleTask+0x28>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d9f9      	bls.n	8002f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <prvIdleTask+0x2c>)
 8002fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fb0:	e7f0      	b.n	8002f94 <prvIdleTask+0x8>
 8002fb2:	bf00      	nop
 8002fb4:	2000077c 	.word	0x2000077c
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	e00c      	b.n	8002fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <prvInitialiseTaskLists+0x60>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fd06 	bl	80019e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b37      	cmp	r3, #55	; 0x37
 8002fe6:	d9ef      	bls.n	8002fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fe8:	480d      	ldr	r0, [pc, #52]	; (8003020 <prvInitialiseTaskLists+0x64>)
 8002fea:	f7fe fcfd 	bl	80019e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fee:	480d      	ldr	r0, [pc, #52]	; (8003024 <prvInitialiseTaskLists+0x68>)
 8002ff0:	f7fe fcfa 	bl	80019e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <prvInitialiseTaskLists+0x6c>)
 8002ff6:	f7fe fcf7 	bl	80019e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ffa:	480c      	ldr	r0, [pc, #48]	; (800302c <prvInitialiseTaskLists+0x70>)
 8002ffc:	f7fe fcf4 	bl	80019e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <prvInitialiseTaskLists+0x74>)
 8003002:	f7fe fcf1 	bl	80019e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <prvInitialiseTaskLists+0x78>)
 8003008:	4a05      	ldr	r2, [pc, #20]	; (8003020 <prvInitialiseTaskLists+0x64>)
 800300a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <prvInitialiseTaskLists+0x7c>)
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <prvInitialiseTaskLists+0x68>)
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000077c 	.word	0x2000077c
 8003020:	20000bdc 	.word	0x20000bdc
 8003024:	20000bf0 	.word	0x20000bf0
 8003028:	20000c0c 	.word	0x20000c0c
 800302c:	20000c20 	.word	0x20000c20
 8003030:	20000c38 	.word	0x20000c38
 8003034:	20000c04 	.word	0x20000c04
 8003038:	20000c08 	.word	0x20000c08

0800303c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003042:	e019      	b.n	8003078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003044:	f000 fd62 	bl	8003b0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <prvCheckTasksWaitingTermination+0x50>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fd4d 	bl	8001af4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <prvCheckTasksWaitingTermination+0x54>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3b01      	subs	r3, #1
 8003060:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <prvCheckTasksWaitingTermination+0x54>)
 8003062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <prvCheckTasksWaitingTermination+0x58>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3b01      	subs	r3, #1
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <prvCheckTasksWaitingTermination+0x58>)
 800306c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800306e:	f000 fd7d 	bl	8003b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f810 	bl	8003098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <prvCheckTasksWaitingTermination+0x58>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e1      	bne.n	8003044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000c20 	.word	0x20000c20
 8003090:	20000c4c 	.word	0x20000c4c
 8003094:	20000c34 	.word	0x20000c34

08003098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fef0 	bl	8003e94 <vPortFree>
				vPortFree( pxTCB );
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 feed 	bl	8003e94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030ba:	e018      	b.n	80030ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d103      	bne.n	80030ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fee4 	bl	8003e94 <vPortFree>
	}
 80030cc:	e00f      	b.n	80030ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d00a      	beq.n	80030ee <prvDeleteTCB+0x56>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	60fb      	str	r3, [r7, #12]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <prvDeleteTCB+0x54>
	}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <prvResetNextTaskUnblockTime+0x40>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <prvResetNextTaskUnblockTime+0x14>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <prvResetNextTaskUnblockTime+0x16>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <prvResetNextTaskUnblockTime+0x44>)
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800311a:	e008      	b.n	800312e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <prvResetNextTaskUnblockTime+0x40>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <prvResetNextTaskUnblockTime+0x44>)
 800312c:	6013      	str	r3, [r2, #0]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000c04 	.word	0x20000c04
 800313c:	20000c6c 	.word	0x20000c6c

08003140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <xTaskGetSchedulerState+0x34>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800314e:	2301      	movs	r3, #1
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	e008      	b.n	8003166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <xTaskGetSchedulerState+0x38>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800315c:	2302      	movs	r3, #2
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	e001      	b.n	8003166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003166:	687b      	ldr	r3, [r7, #4]
	}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000c58 	.word	0x20000c58
 8003178:	20000c74 	.word	0x20000c74

0800317c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d056      	beq.n	8003240 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <xTaskPriorityDisinherit+0xd0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	d00a      	beq.n	80031b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	60fb      	str	r3, [r7, #12]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	60bb      	str	r3, [r7, #8]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d02c      	beq.n	8003240 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d128      	bne.n	8003240 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fc7e 	bl	8001af4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <xTaskPriorityDisinherit+0xd4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d903      	bls.n	8003220 <xTaskPriorityDisinherit+0xa4>
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <xTaskPriorityDisinherit+0xd4>)
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4a09      	ldr	r2, [pc, #36]	; (8003254 <xTaskPriorityDisinherit+0xd8>)
 800322e:	441a      	add	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7fe fc01 	bl	8001a3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003240:	697b      	ldr	r3, [r7, #20]
	}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000778 	.word	0x20000778
 8003250:	20000c54 	.word	0x20000c54
 8003254:	2000077c 	.word	0x2000077c

08003258 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <prvAddCurrentTaskToDelayedList+0x94>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3304      	adds	r3, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fc40 	bl	8001af4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d10a      	bne.n	8003292 <prvAddCurrentTaskToDelayedList+0x3a>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <prvAddCurrentTaskToDelayedList+0x94>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4819      	ldr	r0, [pc, #100]	; (80032f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800328c:	f7fe fbd7 	bl	8001a3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003290:	e026      	b.n	80032e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <prvAddCurrentTaskToDelayedList+0x94>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d209      	bcs.n	80032be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <prvAddCurrentTaskToDelayedList+0x94>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fe fbe4 	bl	8001a84 <vListInsert>
}
 80032bc:	e010      	b.n	80032e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <prvAddCurrentTaskToDelayedList+0x94>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f7fe fbda 	bl	8001a84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d202      	bcs.n	80032e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000c50 	.word	0x20000c50
 80032ec:	20000778 	.word	0x20000778
 80032f0:	20000c38 	.word	0x20000c38
 80032f4:	20000c08 	.word	0x20000c08
 80032f8:	20000c04 	.word	0x20000c04
 80032fc:	20000c6c 	.word	0x20000c6c

08003300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800330a:	f000 facb 	bl	80038a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <xTimerCreateTimerTask+0x80>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d021      	beq.n	800335a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800331e:	1d3a      	adds	r2, r7, #4
 8003320:	f107 0108 	add.w	r1, r7, #8
 8003324:	f107 030c 	add.w	r3, r7, #12
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fb43 	bl	80019b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	9202      	str	r2, [sp, #8]
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2302      	movs	r3, #2
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2300      	movs	r3, #0
 800333e:	460a      	mov	r2, r1
 8003340:	4910      	ldr	r1, [pc, #64]	; (8003384 <xTimerCreateTimerTask+0x84>)
 8003342:	4811      	ldr	r0, [pc, #68]	; (8003388 <xTimerCreateTimerTask+0x88>)
 8003344:	f7ff f8e4 	bl	8002510 <xTaskCreateStatic>
 8003348:	4603      	mov	r3, r0
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <xTimerCreateTimerTask+0x8c>)
 800334c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <xTimerCreateTimerTask+0x8c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003356:	2301      	movs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	613b      	str	r3, [r7, #16]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003376:	697b      	ldr	r3, [r7, #20]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000ca8 	.word	0x20000ca8
 8003384:	0800416c 	.word	0x0800416c
 8003388:	080034ad 	.word	0x080034ad
 800338c:	20000cac 	.word	0x20000cac

08003390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xTimerGenericCommand+0x2e>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <xTimerGenericCommand+0x98>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02a      	beq.n	800341c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	dc18      	bgt.n	800340a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033d8:	f7ff feb2 	bl	8003140 <xTaskGetSchedulerState>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d109      	bne.n	80033f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <xTimerGenericCommand+0x98>)
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	f107 0110 	add.w	r1, r7, #16
 80033ea:	2300      	movs	r3, #0
 80033ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ee:	f7fe fcad 	bl	8001d4c <xQueueGenericSend>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24
 80033f4:	e012      	b.n	800341c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <xTimerGenericCommand+0x98>)
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	f107 0110 	add.w	r1, r7, #16
 80033fe:	2300      	movs	r3, #0
 8003400:	2200      	movs	r2, #0
 8003402:	f7fe fca3 	bl	8001d4c <xQueueGenericSend>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24
 8003408:	e008      	b.n	800341c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <xTimerGenericCommand+0x98>)
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	f107 0110 	add.w	r1, r7, #16
 8003412:	2300      	movs	r3, #0
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	f7fe fd97 	bl	8001f48 <xQueueGenericSendFromISR>
 800341a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800341e:	4618      	mov	r0, r3
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000ca8 	.word	0x20000ca8

0800342c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <prvProcessExpiredTimer+0x7c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3304      	adds	r3, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fb55 	bl	8001af4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d122      	bne.n	8003498 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	18d1      	adds	r1, r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f000 f8c8 	bl	80035f4 <prvInsertTimerInActiveList>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	2100      	movs	r1, #0
 8003474:	6978      	ldr	r0, [r7, #20]
 8003476:	f7ff ff8b 	bl	8003390 <xTimerGenericCommand>
 800347a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	60fb      	str	r3, [r7, #12]
}
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	4798      	blx	r3
}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000ca0 	.word	0x20000ca0

080034ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f857 	bl	800356c <prvGetNextExpireTime>
 80034be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4619      	mov	r1, r3
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f803 	bl	80034d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80034ca:	f000 f8d5 	bl	8003678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034ce:	e7f1      	b.n	80034b4 <prvTimerTask+0x8>

080034d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80034da:	f7ff fa4b 	bl	8002974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f866 	bl	80035b4 <prvSampleTimeNow>
 80034e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d130      	bne.n	8003552 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <prvProcessTimerOrBlockTask+0x3c>
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d806      	bhi.n	800350c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80034fe:	f7ff fa47 	bl	8002990 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff91 	bl	800342c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800350a:	e024      	b.n	8003556 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <prvProcessTimerOrBlockTask+0x90>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <prvProcessTimerOrBlockTask+0x94>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	f7fe ffb9 	bl	80024a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003536:	f7ff fa2b 	bl	8002990 <xTaskResumeAll>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <prvProcessTimerOrBlockTask+0x98>)
 8003542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
}
 8003550:	e001      	b.n	8003556 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003552:	f7ff fa1d 	bl	8002990 <xTaskResumeAll>
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000ca4 	.word	0x20000ca4
 8003564:	20000ca8 	.word	0x20000ca8
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003574:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <prvGetNextExpireTime+0x44>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <prvGetNextExpireTime+0x44>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e001      	b.n	80035a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000ca0 	.word	0x20000ca0

080035b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80035bc:	f7ff fa86 	bl	8002acc <xTaskGetTickCount>
 80035c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <prvSampleTimeNow+0x3c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d205      	bcs.n	80035d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80035cc:	f000 f908 	bl	80037e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e002      	b.n	80035de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <prvSampleTimeNow+0x3c>)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80035e4:	68fb      	ldr	r3, [r7, #12]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000cb0 	.word	0x20000cb0

080035f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d812      	bhi.n	8003640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	1ad2      	subs	r2, r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e01b      	b.n	8003666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <prvInsertTimerInActiveList+0x7c>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7fe fa23 	bl	8001a84 <vListInsert>
 800363e:	e012      	b.n	8003666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d206      	bcs.n	8003656 <prvInsertTimerInActiveList+0x62>
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e007      	b.n	8003666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <prvInsertTimerInActiveList+0x80>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7fe fa0f 	bl	8001a84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003666:	697b      	ldr	r3, [r7, #20]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000ca4 	.word	0x20000ca4
 8003674:	20000ca0 	.word	0x20000ca0

08003678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08e      	sub	sp, #56	; 0x38
 800367c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800367e:	e09d      	b.n	80037bc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	da18      	bge.n	80036b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	3304      	adds	r3, #4
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	61fb      	str	r3, [r7, #28]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ae:	6850      	ldr	r0, [r2, #4]
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db7d      	blt.n	80037ba <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fa10 	bl	8001af4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036d4:	463b      	mov	r3, r7
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ff6c 	bl	80035b4 <prvSampleTimeNow>
 80036dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b09      	cmp	r3, #9
 80036e2:	d86b      	bhi.n	80037bc <prvProcessReceivedCommands+0x144>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <prvProcessReceivedCommands+0x74>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003715 	.word	0x08003715
 80036f0:	08003715 	.word	0x08003715
 80036f4:	08003715 	.word	0x08003715
 80036f8:	080037bd 	.word	0x080037bd
 80036fc:	08003771 	.word	0x08003771
 8003700:	080037a9 	.word	0x080037a9
 8003704:	08003715 	.word	0x08003715
 8003708:	08003715 	.word	0x08003715
 800370c:	080037bd 	.word	0x080037bd
 8003710:	08003771 	.word	0x08003771
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	18d1      	adds	r1, r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003722:	f7ff ff67 	bl	80035f4 <prvInsertTimerInActiveList>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d047      	beq.n	80037bc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003732:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d13f      	bne.n	80037bc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	441a      	add	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	2100      	movs	r1, #0
 800374c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374e:	f7ff fe1f 	bl	8003390 <xTimerGenericCommand>
 8003752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d130      	bne.n	80037bc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	61bb      	str	r3, [r7, #24]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	617b      	str	r3, [r7, #20]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	18d1      	adds	r1, r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037a2:	f7ff ff27 	bl	80035f4 <prvInsertTimerInActiveList>
					break;
 80037a6:	e009      	b.n	80037bc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80037b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b4:	f000 fb6e 	bl	8003e94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80037b8:	e000      	b.n	80037bc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80037ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <prvProcessReceivedCommands+0x164>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1d39      	adds	r1, r7, #4
 80037c2:	2200      	movs	r2, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fc57 	bl	8002078 <xQueueReceive>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f47f af57 	bne.w	8003680 <prvProcessReceivedCommands+0x8>
	}
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000ca8 	.word	0x20000ca8

080037e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037e6:	e045      	b.n	8003874 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <prvSwitchTimerLists+0xbc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <prvSwitchTimerLists+0xbc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3304      	adds	r3, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe f977 	bl	8001af4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d12e      	bne.n	8003874 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d90e      	bls.n	8003846 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <prvSwitchTimerLists+0xbc>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f7fe f920 	bl	8001a84 <vListInsert>
 8003844:	e016      	b.n	8003874 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	2100      	movs	r1, #0
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fd9d 	bl	8003390 <xTimerGenericCommand>
 8003856:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <prvSwitchTimerLists+0x94>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	603b      	str	r3, [r7, #0]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <prvSwitchTimerLists+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1b4      	bne.n	80037e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvSwitchTimerLists+0xbc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <prvSwitchTimerLists+0xc0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <prvSwitchTimerLists+0xbc>)
 800388a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <prvSwitchTimerLists+0xc0>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	6013      	str	r3, [r2, #0]
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000ca0 	.word	0x20000ca0
 80038a0:	20000ca4 	.word	0x20000ca4

080038a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80038aa:	f000 f92f 	bl	8003b0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <prvCheckForValidListAndQueue+0x60>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d120      	bne.n	80038f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80038b6:	4814      	ldr	r0, [pc, #80]	; (8003908 <prvCheckForValidListAndQueue+0x64>)
 80038b8:	f7fe f896 	bl	80019e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038bc:	4813      	ldr	r0, [pc, #76]	; (800390c <prvCheckForValidListAndQueue+0x68>)
 80038be:	f7fe f893 	bl	80019e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <prvCheckForValidListAndQueue+0x6c>)
 80038c4:	4a10      	ldr	r2, [pc, #64]	; (8003908 <prvCheckForValidListAndQueue+0x64>)
 80038c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <prvCheckForValidListAndQueue+0x70>)
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <prvCheckForValidListAndQueue+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <prvCheckForValidListAndQueue+0x74>)
 80038d4:	4a11      	ldr	r2, [pc, #68]	; (800391c <prvCheckForValidListAndQueue+0x78>)
 80038d6:	2110      	movs	r1, #16
 80038d8:	200a      	movs	r0, #10
 80038da:	f7fe f99d 	bl	8001c18 <xQueueGenericCreateStatic>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a08      	ldr	r2, [pc, #32]	; (8003904 <prvCheckForValidListAndQueue+0x60>)
 80038e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <prvCheckForValidListAndQueue+0x60>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <prvCheckForValidListAndQueue+0x60>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	490b      	ldr	r1, [pc, #44]	; (8003920 <prvCheckForValidListAndQueue+0x7c>)
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fdb0 	bl	8002458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038f8:	f000 f938 	bl	8003b6c <vPortExitCritical>
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000ca8 	.word	0x20000ca8
 8003908:	20000c78 	.word	0x20000c78
 800390c:	20000c8c 	.word	0x20000c8c
 8003910:	20000ca0 	.word	0x20000ca0
 8003914:	20000ca4 	.word	0x20000ca4
 8003918:	20000d54 	.word	0x20000d54
 800391c:	20000cb4 	.word	0x20000cb4
 8003920:	08004174 	.word	0x08004174

08003924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b04      	subs	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800393c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b04      	subs	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b04      	subs	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003954:	4a08      	ldr	r2, [pc, #32]	; (8003978 <pxPortInitialiseStack+0x54>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b14      	subs	r3, #20
 800395e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b20      	subs	r3, #32
 800396a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	0800397d 	.word	0x0800397d

0800397c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <prvTaskExitError+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d00a      	beq.n	80039a6 <prvTaskExitError+0x2a>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60fb      	str	r3, [r7, #12]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <prvTaskExitError+0x28>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60bb      	str	r3, [r7, #8]
}
 80039b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039ba:	bf00      	nop
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0fc      	beq.n	80039bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	2000000c 	.word	0x2000000c
	...

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80039fe:	4770      	bx	lr

08003a00 <pxCurrentTCBConst2>:
 8003a00:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003a08:	4806      	ldr	r0, [pc, #24]	; (8003a24 <prvPortStartFirstTask+0x1c>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	b662      	cpsie	i
 8003a14:	b661      	cpsie	f
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	df00      	svc	0
 8003a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a22:	bf00      	nop
 8003a24:	e000ed08 	.word	0xe000ed08

08003a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a2e:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <xPortStartScheduler+0xd0>)
 8003a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22ff      	movs	r2, #255	; 0xff
 8003a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <xPortStartScheduler+0xd4>)
 8003a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a5c:	e009      	b.n	8003a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b80      	cmp	r3, #128	; 0x80
 8003a7c:	d0ef      	beq.n	8003a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d00a      	beq.n	8003aa0 <xPortStartScheduler+0x78>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60bb      	str	r3, [r7, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	e7fe      	b.n	8003a9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003aa8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <xPortStartScheduler+0xd8>)
 8003ab4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <xPortStartScheduler+0xdc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <xPortStartScheduler+0xdc>)
 8003ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <xPortStartScheduler+0xdc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <xPortStartScheduler+0xdc>)
 8003ad0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ad4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ad6:	f000 f8b9 	bl	8003c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <xPortStartScheduler+0xe0>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ae0:	f7ff ff92 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ae4:	f7ff f8be 	bl	8002c64 <vTaskSwitchContext>
	prvTaskExitError();
 8003ae8:	f7ff ff48 	bl	800397c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000e400 	.word	0xe000e400
 8003afc:	20000da4 	.word	0x20000da4
 8003b00:	20000da8 	.word	0x20000da8
 8003b04:	e000ed20 	.word	0xe000ed20
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	607b      	str	r3, [r7, #4]
}
 8003b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <vPortEnterCritical+0x58>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <vPortEnterCritical+0x58>)
 8003b2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <vPortEnterCritical+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10f      	bne.n	8003b58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <vPortEnterCritical+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <vPortEnterCritical+0x4a>
	}
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <vPortExitCritical+0x24>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <vPortExitCritical+0x42>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f383 8811 	msr	BASEPRI, r3
}
 8003bac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	2000000c 	.word	0x2000000c
 8003bbc:	00000000 	.word	0x00000000

08003bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bc0:	f3ef 8009 	mrs	r0, PSP
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <pxCurrentTCBConst>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bd0:	6010      	str	r0, [r2, #0]
 8003bd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003bd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bda:	f380 8811 	msr	BASEPRI, r0
 8003bde:	f7ff f841 	bl	8002c64 <vTaskSwitchContext>
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8811 	msr	BASEPRI, r0
 8003bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bf6:	f380 8809 	msr	PSP, r0
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	4770      	bx	lr

08003c00 <pxCurrentTCBConst>:
 8003c00:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f7fe ff61 	bl	8002ae8 <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <SysTick_Handler+0x40>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
}
 8003c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <vPortSetupTimerInterrupt+0x30>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <vPortSetupTimerInterrupt+0x38>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <vPortSetupTimerInterrupt+0x3c>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <vPortSetupTimerInterrupt+0x40>)
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c6e:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <vPortSetupTimerInterrupt+0x30>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e010 	.word	0xe000e010
 8003c80:	e000e018 	.word	0xe000e018
 8003c84:	20000000 	.word	0x20000000
 8003c88:	10624dd3 	.word	0x10624dd3
 8003c8c:	e000e014 	.word	0xe000e014

08003c90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c96:	f3ef 8305 	mrs	r3, IPSR
 8003c9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	d914      	bls.n	8003ccc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <vPortValidateInterruptPriority+0x6c>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <vPortValidateInterruptPriority+0x70>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	7afa      	ldrb	r2, [r7, #11]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20a      	bcs.n	8003ccc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	607b      	str	r3, [r7, #4]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <vPortValidateInterruptPriority+0x74>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <vPortValidateInterruptPriority+0x78>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d90a      	bls.n	8003cf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	603b      	str	r3, [r7, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <vPortValidateInterruptPriority+0x60>
	}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	e000e3f0 	.word	0xe000e3f0
 8003d00:	20000da4 	.word	0x20000da4
 8003d04:	e000ed0c 	.word	0xe000ed0c
 8003d08:	20000da8 	.word	0x20000da8

08003d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d18:	f7fe fe2c 	bl	8002974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <pvPortMalloc+0x174>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d24:	f000 f910 	bl	8003f48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d28:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <pvPortMalloc+0x178>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 808e 	bne.w	8003e52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01d      	beq.n	8003d78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d014      	beq.n	8003d78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	3308      	adds	r3, #8
 8003d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <pvPortMalloc+0x6c>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	617b      	str	r3, [r7, #20]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d069      	beq.n	8003e52 <pvPortMalloc+0x146>
 8003d7e:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <pvPortMalloc+0x17c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d864      	bhi.n	8003e52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d88:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <pvPortMalloc+0x180>)
 8003d8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d8c:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <pvPortMalloc+0x180>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d92:	e004      	b.n	8003d9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d903      	bls.n	8003db0 <pvPortMalloc+0xa4>
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f1      	bne.n	8003d94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <pvPortMalloc+0x174>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d04b      	beq.n	8003e52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	4413      	add	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d91f      	bls.n	8003e1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <pvPortMalloc+0xf8>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	613b      	str	r3, [r7, #16]
}
 8003e00:	bf00      	nop
 8003e02:	e7fe      	b.n	8003e02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	f000 f8f8 	bl	800400c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <pvPortMalloc+0x17c>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <pvPortMalloc+0x17c>)
 8003e28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <pvPortMalloc+0x17c>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <pvPortMalloc+0x184>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d203      	bcs.n	8003e3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <pvPortMalloc+0x17c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <pvPortMalloc+0x184>)
 8003e3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <pvPortMalloc+0x178>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e52:	f7fe fd9d 	bl	8002990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <pvPortMalloc+0x16a>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60fb      	str	r3, [r7, #12]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <pvPortMalloc+0x168>
	return pvReturn;
 8003e76:	69fb      	ldr	r3, [r7, #28]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200019b4 	.word	0x200019b4
 8003e84:	200019c0 	.word	0x200019c0
 8003e88:	200019b8 	.word	0x200019b8
 8003e8c:	200019ac 	.word	0x200019ac
 8003e90:	200019bc 	.word	0x200019bc

08003e94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d048      	beq.n	8003f38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4413      	add	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <vPortFree+0xac>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <vPortFree+0x44>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60fb      	str	r3, [r7, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <vPortFree+0x62>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60bb      	str	r3, [r7, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <vPortFree+0xac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d019      	beq.n	8003f38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d115      	bne.n	8003f38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <vPortFree+0xac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	401a      	ands	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f1c:	f7fe fd2a 	bl	8002974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <vPortFree+0xb0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <vPortFree+0xb0>)
 8003f2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f2e:	6938      	ldr	r0, [r7, #16]
 8003f30:	f000 f86c 	bl	800400c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003f34:	f7fe fd2c 	bl	8002990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f38:	bf00      	nop
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200019c0 	.word	0x200019c0
 8003f44:	200019b8 	.word	0x200019b8

08003f48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <prvHeapInit+0xac>)
 8003f56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3307      	adds	r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0307 	bic.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <prvHeapInit+0xac>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <prvHeapInit+0xb0>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <prvHeapInit+0xb0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f94:	2208      	movs	r2, #8
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <prvHeapInit+0xb4>)
 8003fa8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <prvHeapInit+0xb4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <prvHeapInit+0xb4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <prvHeapInit+0xb4>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <prvHeapInit+0xb8>)
 8003fd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <prvHeapInit+0xbc>)
 8003fde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <prvHeapInit+0xc0>)
 8003fe2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000dac 	.word	0x20000dac
 8003ff8:	200019ac 	.word	0x200019ac
 8003ffc:	200019b4 	.word	0x200019b4
 8004000:	200019bc 	.word	0x200019bc
 8004004:	200019b8 	.word	0x200019b8
 8004008:	200019c0 	.word	0x200019c0

0800400c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <prvInsertBlockIntoFreeList+0x14>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d8f7      	bhi.n	800401a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4413      	add	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d108      	bne.n	800404e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d118      	bne.n	8004094 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <prvInsertBlockIntoFreeList+0xac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d00d      	beq.n	800408a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e008      	b.n	800409c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <prvInsertBlockIntoFreeList+0xac>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e003      	b.n	800409c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d002      	beq.n	80040aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	200019ac 	.word	0x200019ac
 80040b8:	200019b4 	.word	0x200019b4

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	2600      	movs	r6, #0
 80040c0:	4d0c      	ldr	r5, [pc, #48]	; (80040f4 <__libc_init_array+0x38>)
 80040c2:	4c0d      	ldr	r4, [pc, #52]	; (80040f8 <__libc_init_array+0x3c>)
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	f000 f830 	bl	8004130 <_init>
 80040d0:	2600      	movs	r6, #0
 80040d2:	4d0a      	ldr	r5, [pc, #40]	; (80040fc <__libc_init_array+0x40>)
 80040d4:	4c0a      	ldr	r4, [pc, #40]	; (8004100 <__libc_init_array+0x44>)
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	080041b8 	.word	0x080041b8
 80040f8:	080041b8 	.word	0x080041b8
 80040fc:	080041b8 	.word	0x080041b8
 8004100:	080041bc 	.word	0x080041bc

08004104 <memcpy>:
 8004104:	440a      	add	r2, r1
 8004106:	4291      	cmp	r1, r2
 8004108:	f100 33ff 	add.w	r3, r0, #4294967295
 800410c:	d100      	bne.n	8004110 <memcpy+0xc>
 800410e:	4770      	bx	lr
 8004110:	b510      	push	{r4, lr}
 8004112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004116:	4291      	cmp	r1, r2
 8004118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800411c:	d1f9      	bne.n	8004112 <memcpy+0xe>
 800411e:	bd10      	pop	{r4, pc}

08004120 <memset>:
 8004120:	4603      	mov	r3, r0
 8004122:	4402      	add	r2, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	d100      	bne.n	800412a <memset+0xa>
 8004128:	4770      	bx	lr
 800412a:	f803 1b01 	strb.w	r1, [r3], #1
 800412e:	e7f9      	b.n	8004124 <memset+0x4>

08004130 <_init>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr

0800413c <_fini>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr
