
LED_FREERTOS_BRUNO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080043e0  080043e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e0  080043e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b8  20000010  080043f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019c8  080043f8  000219c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ec1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a41  00000000  00000000  00031efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00034940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00035a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025dc  00000000  00000000  000369a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001160c  00000000  00000000  00038f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090aae  00000000  00000000  0004a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d8  00000000  00000000  000db090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004350 	.word	0x08004350

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004350 	.word	0x08004350

08000150 <LED1>:
		case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (estado)?GPIO_PIN_SET:GPIO_PIN_RESET); break;
	}
}

void LED1()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	portTickType xLastWakeTime = xTaskGetTickCount();
 8000156:	f002 fdcd 	bl	8002cf4 <xTaskGetTickCount>
 800015a:	4603      	mov	r3, r0
 800015c:	607b      	str	r3, [r7, #4]

	for(;;){

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <LED1+0x24>)
 8000162:	f000 fd38 	bl	8000bd6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, (250 / portTICK_RATE_MS));//nunca debe retorna
 8000166:	1d3b      	adds	r3, r7, #4
 8000168:	21fa      	movs	r1, #250	; 0xfa
 800016a:	4618      	mov	r0, r3
 800016c:	f002 fb90 	bl	8002890 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000170:	e7f5      	b.n	800015e <LED1+0xe>
 8000172:	bf00      	nop
 8000174:	40010c00 	.word	0x40010c00

08000178 <LED2>:
	}
}

void LED2()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
	portTickType xLastWakeTime = xTaskGetTickCount();
 800017e:	f002 fdb9 	bl	8002cf4 <xTaskGetTickCount>
 8000182:	4603      	mov	r3, r0
 8000184:	607b      	str	r3, [r7, #4]

	for(;;){

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800018a:	4804      	ldr	r0, [pc, #16]	; (800019c <LED2+0x24>)
 800018c:	f000 fd23 	bl	8000bd6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, (250 / portTICK_RATE_MS));//nunca debe retornar
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	21fa      	movs	r1, #250	; 0xfa
 8000194:	4618      	mov	r0, r3
 8000196:	f002 fb7b 	bl	8002890 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800019a:	e7f4      	b.n	8000186 <LED2+0xe>
 800019c:	40010c00 	.word	0x40010c00

080001a0 <LED_PLACA>:
	}
}

void LED_PLACA()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	portTickType xLastWakeTime = xTaskGetTickCount();
 80001a6:	f002 fda5 	bl	8002cf4 <xTaskGetTickCount>
 80001aa:	4603      	mov	r3, r0
 80001ac:	607b      	str	r3, [r7, #4]

	for(;;){

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b2:	4804      	ldr	r0, [pc, #16]	; (80001c4 <LED_PLACA+0x24>)
 80001b4:	f000 fd0f 	bl	8000bd6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, (250 / portTICK_RATE_MS));//nunca debe retornar
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	21fa      	movs	r1, #250	; 0xfa
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fb67 	bl	8002890 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001c2:	e7f4      	b.n	80001ae <LED_PLACA+0xe>
 80001c4:	40011000 	.word	0x40011000

080001c8 <leer_pulsador>:
	}
}

void leer_pulsador()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	uint8_t boton;

	for(;;)
	{
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){//entra si el pulsador esta presionado
 80001ce:	2101      	movs	r1, #1
 80001d0:	481a      	ldr	r0, [pc, #104]	; (800023c <leer_pulsador+0x74>)
 80001d2:	f000 fcd1 	bl	8000b78 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d108      	bne.n	80001ee <leer_pulsador+0x26>

			/* Bajo la prioridad de un task en lugar de subir la de este ya que si solo presione un boton,
			 * el otro led debe seguir parpadeando
			 */
			vTaskPrioritySet(task1, 1);//Hago que la prioridad sea la mas alta para que
 80001dc:	4b18      	ldr	r3, [pc, #96]	; (8000240 <leer_pulsador+0x78>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2101      	movs	r1, #1
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fbd2 	bl	800298c <vTaskPrioritySet>
			boton = 1;									 //al desploquearse los task anteriores no cambie los LED
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e00a      	b.n	8000204 <leer_pulsador+0x3c>
		}
		else if(boton == 1){
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d107      	bne.n	8000204 <leer_pulsador+0x3c>

			vTaskPrioritySet(task1, 3);//Hago que la prioridad sea mas baja para que al desbloquarse el task cambie los LED
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <leer_pulsador+0x78>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2103      	movs	r1, #3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fbc6 	bl	800298c <vTaskPrioritySet>
			boton = 0;//si entro aca me olvido del boton
 8000200:	2300      	movs	r3, #0
 8000202:	71fb      	strb	r3, [r7, #7]
		}

		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){//entra si el pulsador esta presionado
 8000204:	2102      	movs	r1, #2
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <leer_pulsador+0x74>)
 8000208:	f000 fcb6 	bl	8000b78 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d108      	bne.n	8000224 <leer_pulsador+0x5c>

			vTaskPrioritySet(task2, 1);//Hago que la prioridad sea la mas alta para que
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <leer_pulsador+0x7c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2101      	movs	r1, #1
 8000218:	4618      	mov	r0, r3
 800021a:	f002 fbb7 	bl	800298c <vTaskPrioritySet>
			boton = 2;											 //al desploquearse los task anteriores no cambie los LED
 800021e:	2302      	movs	r3, #2
 8000220:	71fb      	strb	r3, [r7, #7]
 8000222:	e7d4      	b.n	80001ce <leer_pulsador+0x6>
		}
		else if(boton == 2){
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	2b02      	cmp	r3, #2
 8000228:	d1d1      	bne.n	80001ce <leer_pulsador+0x6>

			vTaskPrioritySet(task2, 3);//Hago que la prioridad sea mas baja para que al desbloquarse el task cambie los LED
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <leer_pulsador+0x7c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2103      	movs	r1, #3
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fbab 	bl	800298c <vTaskPrioritySet>
			boton = 0;//si entro aca me olvido del boton
 8000236:	2300      	movs	r3, #0
 8000238:	71fb      	strb	r3, [r7, #7]
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){//entra si el pulsador esta presionado
 800023a:	e7c8      	b.n	80001ce <leer_pulsador+0x6>
 800023c:	40010c00 	.word	0x40010c00
 8000240:	2000002c 	.word	0x2000002c
 8000244:	20000030 	.word	0x20000030

08000248 <findelprograma>:
		}
	}
}

void findelprograma(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800024e:	b672      	cpsid	i
}
 8000250:	bf00      	nop
	volatile int32_t i;
	__disable_irq();
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <findelprograma+0x2c>)
 8000258:	f000 fcbd 	bl	8000bd6 <HAL_GPIO_TogglePin>
		for(i=0;i<200000; i++);
 800025c:	2300      	movs	r3, #0
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	e002      	b.n	8000268 <findelprograma+0x20>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a03      	ldr	r2, [pc, #12]	; (8000278 <findelprograma+0x30>)
 800026c:	4293      	cmp	r3, r2
 800026e:	ddf8      	ble.n	8000262 <findelprograma+0x1a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000270:	e7ef      	b.n	8000252 <findelprograma+0xa>
 8000272:	bf00      	nop
 8000274:	40011000 	.word	0x40011000
 8000278:	00030d3f 	.word	0x00030d3f

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000282:	f000 f9e3 	bl	800064c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000286:	f000 f857 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028a:	f000 f899 	bl	80003c0 <MX_GPIO_Init>

  /* USER CODE END 2 */
  //setear_led(0, 1);
  // setear_led(1, 0);
  /* Init scheduler */
  osKernelInitialize();
 800028e:	f001 fb3b 	bl	8001908 <osKernelInitialize>


  if(xTaskCreate(LED1,
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <main+0x94>)
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	2303      	movs	r3, #3
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2300      	movs	r3, #0
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	491d      	ldr	r1, [pc, #116]	; (8000314 <main+0x98>)
 80002a0:	481d      	ldr	r0, [pc, #116]	; (8000318 <main+0x9c>)
 80002a2:	f002 f9b9 	bl	8002618 <xTaskCreate>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d001      	beq.n	80002b0 <main+0x34>
    		  	  "LED1",
    			  128,
				  NULL,
    			  3,
    			  &task1)!= pdPASS) findelprograma();
 80002ac:	f7ff ffcc 	bl	8000248 <findelprograma>

   if(xTaskCreate(LED2,
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <main+0xa0>)
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	2303      	movs	r3, #3
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2300      	movs	r3, #0
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	4918      	ldr	r1, [pc, #96]	; (8000320 <main+0xa4>)
 80002be:	4819      	ldr	r0, [pc, #100]	; (8000324 <main+0xa8>)
 80002c0:	f002 f9aa 	bl	8002618 <xTaskCreate>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d001      	beq.n	80002ce <main+0x52>
    		  	  "LED2",
    			  128,
  			      NULL,
    			  3,
    			  &task2)!= pdPASS) findelprograma();
 80002ca:	f7ff ffbd 	bl	8000248 <findelprograma>

   if(xTaskCreate(LED_PLACA,
 80002ce:	2300      	movs	r3, #0
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2303      	movs	r3, #3
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	2280      	movs	r2, #128	; 0x80
 80002da:	4913      	ldr	r1, [pc, #76]	; (8000328 <main+0xac>)
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <main+0xb0>)
 80002de:	f002 f99b 	bl	8002618 <xTaskCreate>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d001      	beq.n	80002ec <main+0x70>
   		  	  	  "LED_PLACA",
				  128,
				  NULL,
				  3,
				  NULL)!= pdPASS) findelprograma();
 80002e8:	f7ff ffae 	bl	8000248 <findelprograma>


   if(xTaskCreate(leer_pulsador,
 80002ec:	2300      	movs	r3, #0
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	2302      	movs	r3, #2
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	2300      	movs	r3, #0
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <main+0xb4>)
 80002fa:	480e      	ldr	r0, [pc, #56]	; (8000334 <main+0xb8>)
 80002fc:	f002 f98c 	bl	8002618 <xTaskCreate>
 8000300:	4603      	mov	r3, r0
 8000302:	2b01      	cmp	r3, #1
 8000304:	d001      	beq.n	800030a <main+0x8e>
		   	   	  "leer_pulsador",
				  128,
				  NULL,
				  2,
				  NULL)!= pdPASS) findelprograma();
 8000306:	f7ff ff9f 	bl	8000248 <findelprograma>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800030a:	f001 fb2f 	bl	800196c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030e:	e7fe      	b.n	800030e <main+0x92>
 8000310:	2000002c 	.word	0x2000002c
 8000314:	08004374 	.word	0x08004374
 8000318:	08000151 	.word	0x08000151
 800031c:	20000030 	.word	0x20000030
 8000320:	0800437c 	.word	0x0800437c
 8000324:	08000179 	.word	0x08000179
 8000328:	08004384 	.word	0x08004384
 800032c:	080001a1 	.word	0x080001a1
 8000330:	08004390 	.word	0x08004390
 8000334:	080001c9 	.word	0x080001c9

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fffa 	bl	8004340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000376:	2300      	movs	r3, #0
 8000378:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fc42 	bl	8000c08 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800038a:	f000 f883 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 feb0 	bl	800110c <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003b2:	f000 f86f 	bl	8000494 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_GPIO_Init+0xa8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a23      	ldr	r2, [pc, #140]	; (8000468 <MX_GPIO_Init+0xa8>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MX_GPIO_Init+0xa8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_GPIO_Init+0xa8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MX_GPIO_Init+0xa8>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_GPIO_Init+0xa8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_GPIO_Init+0xa8>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a17      	ldr	r2, [pc, #92]	; (8000468 <MX_GPIO_Init+0xa8>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_GPIO_Init+0xa8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000422:	4812      	ldr	r0, [pc, #72]	; (800046c <MX_GPIO_Init+0xac>)
 8000424:	f000 fbbf 	bl	8000ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000428:	2303      	movs	r3, #3
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000430:	2301      	movs	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <MX_GPIO_Init+0xac>)
 800043c:	f000 fa18 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000440:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2302      	movs	r3, #2
 8000450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_GPIO_Init+0xac>)
 800045a:	f000 fa09 	bl	8000870 <HAL_GPIO_Init>

}
 800045e:	bf00      	nop
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d101      	bne.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000482:	f000 f8f9 	bl	8000678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40012c00 	.word	0x40012c00

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_MspInit+0x5c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_MspInit+0x5c>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_MspInit+0x60>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <HAL_MspInit+0x60>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000514:	2200      	movs	r2, #0
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	2019      	movs	r0, #25
 800051a:	f000 f97e 	bl	800081a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800051e:	2019      	movs	r0, #25
 8000520:	f000 f997 	bl	8000852 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <HAL_InitTick+0x9c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <HAL_InitTick+0x9c>)
 800052a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <HAL_InitTick+0x9c>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800053c:	f107 0210 	add.w	r2, r7, #16
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f000 ff46 	bl	80013d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800054c:	f000 ff30 	bl	80013b0 <HAL_RCC_GetPCLK2Freq>
 8000550:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000554:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <HAL_InitTick+0xa0>)
 8000556:	fba2 2303 	umull	r2, r3, r2, r3
 800055a:	0c9b      	lsrs	r3, r3, #18
 800055c:	3b01      	subs	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <HAL_InitTick+0xa4>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <HAL_InitTick+0xa8>)
 8000564:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <HAL_InitTick+0xa4>)
 8000568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800056c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <HAL_InitTick+0xa4>)
 8000570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000572:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_InitTick+0xa4>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <HAL_InitTick+0xa4>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <HAL_InitTick+0xa4>)
 8000582:	f000 ff77 	bl	8001474 <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d104      	bne.n	8000596 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <HAL_InitTick+0xa4>)
 800058e:	f000 ffc9 	bl	8001524 <HAL_TIM_Base_Start_IT>
 8000592:	4603      	mov	r3, r0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3730      	adds	r7, #48	; 0x30
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	431bde83 	.word	0x431bde83
 80005a8:	20000034 	.word	0x20000034
 80005ac:	40012c00 	.word	0x40012c00

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <HardFault_Handler+0x4>

080005c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <MemManage_Handler+0x4>

080005c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <BusFault_Handler+0x4>

080005ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <UsageFault_Handler+0x4>

080005d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <TIM1_UP_IRQHandler+0x10>)
 80005e6:	f000 ffef 	bl	80015c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000034 	.word	0x20000034

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000626:	f7ff ffe5 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062a:	f003 fe57 	bl	80042dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff fe25 	bl	800027c <main>
  bx lr
 8000632:	4770      	bx	lr
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800063c:	080043e8 	.word	0x080043e8
  ldr r2, =_sbss
 8000640:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000644:	200019c8 	.word	0x200019c8

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>
	...

0800064c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_Init+0x28>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_Init+0x28>)
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f8d1 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ff4e 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000668:	f7ff ff1a 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x20>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000008 	.word	0x20000008
 8000698:	2000007c 	.word	0x2000007c

0800069c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b02      	ldr	r3, [pc, #8]	; (80006ac <HAL_GetTick+0x10>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	2000007c 	.word	0x2000007c

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <__NVIC_EnableIRQ+0x34>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff4f 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff64 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ffb2 	bl	80007a0 <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff81 	bl	800074c <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff57 	bl	8000714 <__NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000870:	b480      	push	{r7}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000882:	e169      	b.n	8000b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000884:	2201      	movs	r2, #1
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	69fa      	ldr	r2, [r7, #28]
 8000894:	4013      	ands	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	f040 8158 	bne.w	8000b52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a9a      	ldr	r2, [pc, #616]	; (8000b10 <HAL_GPIO_Init+0x2a0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d05e      	beq.n	800096a <HAL_GPIO_Init+0xfa>
 80008ac:	4a98      	ldr	r2, [pc, #608]	; (8000b10 <HAL_GPIO_Init+0x2a0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d875      	bhi.n	800099e <HAL_GPIO_Init+0x12e>
 80008b2:	4a98      	ldr	r2, [pc, #608]	; (8000b14 <HAL_GPIO_Init+0x2a4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d058      	beq.n	800096a <HAL_GPIO_Init+0xfa>
 80008b8:	4a96      	ldr	r2, [pc, #600]	; (8000b14 <HAL_GPIO_Init+0x2a4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d86f      	bhi.n	800099e <HAL_GPIO_Init+0x12e>
 80008be:	4a96      	ldr	r2, [pc, #600]	; (8000b18 <HAL_GPIO_Init+0x2a8>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d052      	beq.n	800096a <HAL_GPIO_Init+0xfa>
 80008c4:	4a94      	ldr	r2, [pc, #592]	; (8000b18 <HAL_GPIO_Init+0x2a8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d869      	bhi.n	800099e <HAL_GPIO_Init+0x12e>
 80008ca:	4a94      	ldr	r2, [pc, #592]	; (8000b1c <HAL_GPIO_Init+0x2ac>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d04c      	beq.n	800096a <HAL_GPIO_Init+0xfa>
 80008d0:	4a92      	ldr	r2, [pc, #584]	; (8000b1c <HAL_GPIO_Init+0x2ac>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d863      	bhi.n	800099e <HAL_GPIO_Init+0x12e>
 80008d6:	4a92      	ldr	r2, [pc, #584]	; (8000b20 <HAL_GPIO_Init+0x2b0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d046      	beq.n	800096a <HAL_GPIO_Init+0xfa>
 80008dc:	4a90      	ldr	r2, [pc, #576]	; (8000b20 <HAL_GPIO_Init+0x2b0>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d85d      	bhi.n	800099e <HAL_GPIO_Init+0x12e>
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d82a      	bhi.n	800093c <HAL_GPIO_Init+0xcc>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d859      	bhi.n	800099e <HAL_GPIO_Init+0x12e>
 80008ea:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <HAL_GPIO_Init+0x80>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	0800096b 	.word	0x0800096b
 80008f4:	08000945 	.word	0x08000945
 80008f8:	08000957 	.word	0x08000957
 80008fc:	08000999 	.word	0x08000999
 8000900:	0800099f 	.word	0x0800099f
 8000904:	0800099f 	.word	0x0800099f
 8000908:	0800099f 	.word	0x0800099f
 800090c:	0800099f 	.word	0x0800099f
 8000910:	0800099f 	.word	0x0800099f
 8000914:	0800099f 	.word	0x0800099f
 8000918:	0800099f 	.word	0x0800099f
 800091c:	0800099f 	.word	0x0800099f
 8000920:	0800099f 	.word	0x0800099f
 8000924:	0800099f 	.word	0x0800099f
 8000928:	0800099f 	.word	0x0800099f
 800092c:	0800099f 	.word	0x0800099f
 8000930:	0800099f 	.word	0x0800099f
 8000934:	0800094d 	.word	0x0800094d
 8000938:	08000961 	.word	0x08000961
 800093c:	4a79      	ldr	r2, [pc, #484]	; (8000b24 <HAL_GPIO_Init+0x2b4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d013      	beq.n	800096a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000942:	e02c      	b.n	800099e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e029      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	3304      	adds	r3, #4
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e024      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	3308      	adds	r3, #8
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e01f      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	330c      	adds	r3, #12
 8000966:	623b      	str	r3, [r7, #32]
          break;
 8000968:	e01a      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000972:	2304      	movs	r3, #4
 8000974:	623b      	str	r3, [r7, #32]
          break;
 8000976:	e013      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d105      	bne.n	800098c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000980:	2308      	movs	r3, #8
 8000982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	611a      	str	r2, [r3, #16]
          break;
 800098a:	e009      	b.n	80009a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800098c:	2308      	movs	r3, #8
 800098e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	615a      	str	r2, [r3, #20]
          break;
 8000996:	e003      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
          break;
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x130>
          break;
 800099e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	2bff      	cmp	r3, #255	; 0xff
 80009a4:	d801      	bhi.n	80009aa <HAL_GPIO_Init+0x13a>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	e001      	b.n	80009ae <HAL_GPIO_Init+0x13e>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3304      	adds	r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	d802      	bhi.n	80009bc <HAL_GPIO_Init+0x14c>
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	e002      	b.n	80009c2 <HAL_GPIO_Init+0x152>
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009be:	3b08      	subs	r3, #8
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	210f      	movs	r1, #15
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	401a      	ands	r2, r3
 80009d4:	6a39      	ldr	r1, [r7, #32]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	431a      	orrs	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 80b1 	beq.w	8000b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009f0:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <HAL_GPIO_Init+0x2b8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a4c      	ldr	r2, [pc, #304]	; (8000b28 <HAL_GPIO_Init+0x2b8>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <HAL_GPIO_Init+0x2b8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a08:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_GPIO_Init+0x2bc>)
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	089b      	lsrs	r3, r3, #2
 8000a0e:	3302      	adds	r3, #2
 8000a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	220f      	movs	r2, #15
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a40      	ldr	r2, [pc, #256]	; (8000b30 <HAL_GPIO_Init+0x2c0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d013      	beq.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a3f      	ldr	r2, [pc, #252]	; (8000b34 <HAL_GPIO_Init+0x2c4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d00d      	beq.n	8000a58 <HAL_GPIO_Init+0x1e8>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <HAL_GPIO_Init+0x2c8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d007      	beq.n	8000a54 <HAL_GPIO_Init+0x1e4>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a3d      	ldr	r2, [pc, #244]	; (8000b3c <HAL_GPIO_Init+0x2cc>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d101      	bne.n	8000a50 <HAL_GPIO_Init+0x1e0>
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	e006      	b.n	8000a5e <HAL_GPIO_Init+0x1ee>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e004      	b.n	8000a5e <HAL_GPIO_Init+0x1ee>
 8000a54:	2302      	movs	r3, #2
 8000a56:	e002      	b.n	8000a5e <HAL_GPIO_Init+0x1ee>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <HAL_GPIO_Init+0x1ee>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a60:	f002 0203 	and.w	r2, r2, #3
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	4093      	lsls	r3, r2
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a6e:	492f      	ldr	r1, [pc, #188]	; (8000b2c <HAL_GPIO_Init+0x2bc>)
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3302      	adds	r3, #2
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a88:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	492c      	ldr	r1, [pc, #176]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	600b      	str	r3, [r1, #0]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4928      	ldr	r1, [pc, #160]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	4922      	ldr	r1, [pc, #136]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	604b      	str	r3, [r1, #4]
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	491e      	ldr	r1, [pc, #120]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	4918      	ldr	r1, [pc, #96]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	608b      	str	r3, [r1, #8]
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4914      	ldr	r1, [pc, #80]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d021      	beq.n	8000b44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	490e      	ldr	r1, [pc, #56]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60cb      	str	r3, [r1, #12]
 8000b0c:	e021      	b.n	8000b52 <HAL_GPIO_Init+0x2e2>
 8000b0e:	bf00      	nop
 8000b10:	10320000 	.word	0x10320000
 8000b14:	10310000 	.word	0x10310000
 8000b18:	10220000 	.word	0x10220000
 8000b1c:	10210000 	.word	0x10210000
 8000b20:	10120000 	.word	0x10120000
 8000b24:	10110000 	.word	0x10110000
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	40010800 	.word	0x40010800
 8000b34:	40010c00 	.word	0x40010c00
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40011400 	.word	0x40011400
 8000b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_GPIO_Init+0x304>)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4909      	ldr	r1, [pc, #36]	; (8000b74 <HAL_GPIO_Init+0x304>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f ae8e 	bne.w	8000884 <HAL_GPIO_Init+0x14>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	372c      	adds	r7, #44	; 0x2c
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e001      	b.n	8000b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb6:	787b      	ldrb	r3, [r7, #1]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbc:	887a      	ldrh	r2, [r7, #2]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc2:	e003      	b.n	8000bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	041a      	lsls	r2, r3, #16
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	611a      	str	r2, [r3, #16]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	041a      	lsls	r2, r3, #16
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e272      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8087 	beq.w	8000d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c28:	4b92      	ldr	r3, [pc, #584]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d00c      	beq.n	8000c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c34:	4b8f      	ldr	r3, [pc, #572]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d112      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5e>
 8000c40:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c4c:	d10b      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4e:	4b89      	ldr	r3, [pc, #548]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d06c      	beq.n	8000d34 <HAL_RCC_OscConfig+0x12c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d168      	bne.n	8000d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e24c      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6e:	d106      	bne.n	8000c7e <HAL_RCC_OscConfig+0x76>
 8000c70:	4b80      	ldr	r3, [pc, #512]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a7f      	ldr	r2, [pc, #508]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e02e      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x98>
 8000c86:	4b7b      	ldr	r3, [pc, #492]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a7a      	ldr	r2, [pc, #488]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b78      	ldr	r3, [pc, #480]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a77      	ldr	r2, [pc, #476]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e01d      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xbc>
 8000caa:	4b72      	ldr	r3, [pc, #456]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a71      	ldr	r2, [pc, #452]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b6f      	ldr	r3, [pc, #444]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a6e      	ldr	r2, [pc, #440]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e00b      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a6a      	ldr	r2, [pc, #424]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b68      	ldr	r3, [pc, #416]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a67      	ldr	r2, [pc, #412]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fcda 	bl	800069c <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cec:	f7ff fcd6 	bl	800069c <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e200      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0xe4>
 8000d0a:	e014      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fcc6 	bl	800069c <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fcc2 	bl	800069c <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e1ec      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d26:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x10c>
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d063      	beq.n	8000e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d42:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00b      	beq.n	8000d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d4e:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d11c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18c>
 8000d5a:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d116      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <HAL_RCC_OscConfig+0x176>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d001      	beq.n	8000d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e1c0      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4939      	ldr	r1, [pc, #228]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	e03a      	b.n	8000e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d020      	beq.n	8000dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fc7b 	bl	800069c <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc77 	bl	800069c <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e1a1      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4927      	ldr	r1, [pc, #156]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
 8000ddc:	e015      	b.n	8000e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_RCC_OscConfig+0x270>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fc5a 	bl	800069c <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc56 	bl	800069c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e180      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d03a      	beq.n	8000e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d019      	beq.n	8000e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_RCC_OscConfig+0x274>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc3a 	bl	800069c <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fc36 	bl	800069c <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e160      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 faf4 	bl	8001438 <RCC_Delay>
 8000e50:	e01c      	b.n	8000e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_RCC_OscConfig+0x274>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc20 	bl	800069c <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5e:	e00f      	b.n	8000e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc1c 	bl	800069c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d908      	bls.n	8000e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e146      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	42420000 	.word	0x42420000
 8000e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e80:	4b92      	ldr	r3, [pc, #584]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e9      	bne.n	8000e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80a6 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9e:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b88      	ldr	r3, [pc, #544]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a87      	ldr	r2, [pc, #540]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b85      	ldr	r3, [pc, #532]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b82      	ldr	r3, [pc, #520]	; (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d118      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed2:	4b7f      	ldr	r3, [pc, #508]	; (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a7e      	ldr	r2, [pc, #504]	; (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fbdd 	bl	800069c <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff fbd9 	bl	800069c <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e103      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x312>
 8000f0c:	4b6f      	ldr	r3, [pc, #444]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a6e      	ldr	r2, [pc, #440]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e02d      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x334>
 8000f22:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6213      	str	r3, [r2, #32]
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a66      	ldr	r2, [pc, #408]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	f023 0304 	bic.w	r3, r3, #4
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	e01c      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x356>
 8000f44:	4b61      	ldr	r3, [pc, #388]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a60      	ldr	r2, [pc, #384]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	e00b      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f5e:	4b5b      	ldr	r3, [pc, #364]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a5a      	ldr	r2, [pc, #360]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	4b58      	ldr	r3, [pc, #352]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a57      	ldr	r2, [pc, #348]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d015      	beq.n	8000faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fb8d 	bl	800069c <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb89 	bl	800069c <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e0b1      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0ee      	beq.n	8000f86 <HAL_RCC_OscConfig+0x37e>
 8000fa8:	e014      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb77 	bl	800069c <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	e00a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fb73 	bl	800069c <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e09b      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1ee      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d105      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8087 	beq.w	80010fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d061      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d146      	bne.n	8001092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_RCC_OscConfig+0x4cc>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fb47 	bl	800069c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff fb43 	bl	800069c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e06d      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001038:	d108      	bne.n	800104c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4921      	ldr	r1, [pc, #132]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a19      	ldr	r1, [r3, #32]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	430b      	orrs	r3, r1
 800105e:	491b      	ldr	r1, [pc, #108]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_RCC_OscConfig+0x4cc>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fb17 	bl	800069c <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff fb13 	bl	800069c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e03d      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x46a>
 8001090:	e035      	b.n	80010fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_RCC_OscConfig+0x4cc>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fb00 	bl	800069c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff fafc 	bl	800069c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e026      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x498>
 80010be:	e01e      	b.n	80010fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d107      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e019      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40007000 	.word	0x40007000
 80010d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_RCC_OscConfig+0x500>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0d0      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d910      	bls.n	8001150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 0207 	bic.w	r2, r3, #7
 8001136:	4965      	ldr	r1, [pc, #404]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0b8      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800118a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	494d      	ldr	r1, [pc, #308]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d040      	beq.n	800122c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d115      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e073      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e06b      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f023 0203 	bic.w	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4936      	ldr	r1, [pc, #216]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fa4e 	bl	800069c <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	e00a      	b.n	800121a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f7ff fa4a 	bl	800069c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e053      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 020c 	and.w	r2, r3, #12
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	429a      	cmp	r2, r3
 800122a:	d1eb      	bne.n	8001204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d210      	bcs.n	800125c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0207 	bic.w	r2, r3, #7
 8001242:	4922      	ldr	r1, [pc, #136]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e032      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800129a:	f000 f821 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	490a      	ldr	r1, [pc, #40]	; (80012d4 <HAL_RCC_ClockConfig+0x1c8>)
 80012ac:	5ccb      	ldrb	r3, [r1, r3]
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1cc>)
 80012b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1d0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f922 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	080043c8 	.word	0x080043c8
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	b490      	push	{r4, r7}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_RCC_GetSysClockFreq+0xac>)
 80012e8:	1d3c      	adds	r4, r7, #4
 80012ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012f0:	f240 2301 	movw	r3, #513	; 0x201
 80012f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb0>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d002      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x40>
 800131a:	2b08      	cmp	r3, #8
 800131c:	d003      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x46>
 800131e:	e02b      	b.n	8001378 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001322:	623b      	str	r3, [r7, #32]
      break;
 8001324:	e02b      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3328      	adds	r3, #40	; 0x28
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001336:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d012      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0c5b      	lsrs	r3, r3, #17
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	3328      	adds	r3, #40	; 0x28
 800134e:	443b      	add	r3, r7
 8001350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb4>)
 800135a:	fb03 f202 	mul.w	r2, r3, r2
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
 8001366:	e004      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	623b      	str	r3, [r7, #32]
      break;
 8001376:	e002      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb4>)
 800137a:	623b      	str	r3, [r7, #32]
      break;
 800137c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137e:	6a3b      	ldr	r3, [r7, #32]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bc90      	pop	{r4, r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	080043a0 	.word	0x080043a0
 8001390:	40021000 	.word	0x40021000
 8001394:	007a1200 	.word	0x007a1200
 8001398:	003d0900 	.word	0x003d0900

0800139c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_RCC_GetHCLKFreq+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000000 	.word	0x20000000

080013b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013b4:	f7ff fff2 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0adb      	lsrs	r3, r3, #11
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013c6:	5ccb      	ldrb	r3, [r1, r3]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	080043d8 	.word	0x080043d8

080013d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	220f      	movs	r2, #15
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0207 	and.w	r2, r3, #7
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40022000 	.word	0x40022000

08001438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <RCC_Delay+0x34>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <RCC_Delay+0x38>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0a5b      	lsrs	r3, r3, #9
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001454:	bf00      	nop
  }
  while (Delay --);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <RCC_Delay+0x1c>
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000000 	.word	0x20000000
 8001470:	10624dd3 	.word	0x10624dd3

08001474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e041      	b.n	800150a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f839 	bl	8001512 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3304      	adds	r3, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4610      	mov	r0, r2
 80014b4:	f000 f9b4 	bl	8001820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d001      	beq.n	800153c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e03a      	b.n	80015b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_TIM_Base_Start_IT+0x98>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00e      	beq.n	800157c <HAL_TIM_Base_Start_IT+0x58>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001566:	d009      	beq.n	800157c <HAL_TIM_Base_Start_IT+0x58>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d004      	beq.n	800157c <HAL_TIM_Base_Start_IT+0x58>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d111      	bne.n	80015a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b06      	cmp	r3, #6
 800158c:	d010      	beq.n	80015b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159e:	e007      	b.n	80015b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40012c00 	.word	0x40012c00
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40000800 	.word	0x40000800

080015c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d122      	bne.n	8001624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d11b      	bne.n	8001624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0202 	mvn.w	r2, #2
 80015f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f8ed 	bl	80017ea <HAL_TIM_IC_CaptureCallback>
 8001610:	e005      	b.n	800161e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f8e0 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f8ef 	bl	80017fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b04      	cmp	r3, #4
 8001630:	d122      	bne.n	8001678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b04      	cmp	r3, #4
 800163e:	d11b      	bne.n	8001678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0204 	mvn.w	r2, #4
 8001648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f8c3 	bl	80017ea <HAL_TIM_IC_CaptureCallback>
 8001664:	e005      	b.n	8001672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f8b6 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f8c5 	bl	80017fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b08      	cmp	r3, #8
 8001684:	d122      	bne.n	80016cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b08      	cmp	r3, #8
 8001692:	d11b      	bne.n	80016cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0208 	mvn.w	r2, #8
 800169c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f899 	bl	80017ea <HAL_TIM_IC_CaptureCallback>
 80016b8:	e005      	b.n	80016c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f88c 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f89b 	bl	80017fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d122      	bne.n	8001720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d11b      	bne.n	8001720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0210 	mvn.w	r2, #16
 80016f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2208      	movs	r2, #8
 80016f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f86f 	bl	80017ea <HAL_TIM_IC_CaptureCallback>
 800170c:	e005      	b.n	800171a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f862 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f871 	bl	80017fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10e      	bne.n	800174c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0201 	mvn.w	r2, #1
 8001744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe fe92 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001764:	2b80      	cmp	r3, #128	; 0x80
 8001766:	d107      	bne.n	8001778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f8bf 	bl	80018f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d10e      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	d107      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800179c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f835 	bl	800180e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d10e      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d107      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0220 	mvn.w	r2, #32
 80017c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f88a 	bl	80018e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <TIM_Base_SetConfig+0xb8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00b      	beq.n	8001850 <TIM_Base_SetConfig+0x30>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d007      	beq.n	8001850 <TIM_Base_SetConfig+0x30>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a26      	ldr	r2, [pc, #152]	; (80018dc <TIM_Base_SetConfig+0xbc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d003      	beq.n	8001850 <TIM_Base_SetConfig+0x30>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <TIM_Base_SetConfig+0xc0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d108      	bne.n	8001862 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <TIM_Base_SetConfig+0xb8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00b      	beq.n	8001882 <TIM_Base_SetConfig+0x62>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001870:	d007      	beq.n	8001882 <TIM_Base_SetConfig+0x62>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a19      	ldr	r2, [pc, #100]	; (80018dc <TIM_Base_SetConfig+0xbc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d003      	beq.n	8001882 <TIM_Base_SetConfig+0x62>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <TIM_Base_SetConfig+0xc0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d108      	bne.n	8001894 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <TIM_Base_SetConfig+0xb8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d103      	bne.n	80018c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	615a      	str	r2, [r3, #20]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40000800 	.word	0x40000800

080018e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800190e:	f3ef 8305 	mrs	r3, IPSR
 8001912:	60bb      	str	r3, [r7, #8]
  return(result);
 8001914:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800191a:	f3ef 8310 	mrs	r3, PRIMASK
 800191e:	607b      	str	r3, [r7, #4]
  return(result);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <osKernelInitialize+0x32>
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <osKernelInitialize+0x60>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d109      	bne.n	8001942 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800192e:	f3ef 8311 	mrs	r3, BASEPRI
 8001932:	603b      	str	r3, [r7, #0]
  return(result);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800193a:	f06f 0305 	mvn.w	r3, #5
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e00c      	b.n	800195c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <osKernelInitialize+0x60>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <osKernelInitialize+0x60>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e002      	b.n	800195c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000080 	.word	0x20000080

0800196c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001972:	f3ef 8305 	mrs	r3, IPSR
 8001976:	60bb      	str	r3, [r7, #8]
  return(result);
 8001978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800197e:	f3ef 8310 	mrs	r3, PRIMASK
 8001982:	607b      	str	r3, [r7, #4]
  return(result);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <osKernelStart+0x32>
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <osKernelStart+0x64>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d109      	bne.n	80019a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001992:	f3ef 8311 	mrs	r3, BASEPRI
 8001996:	603b      	str	r3, [r7, #0]
  return(result);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800199e:	f06f 0305 	mvn.w	r3, #5
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e00e      	b.n	80019c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <osKernelStart+0x64>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <osKernelStart+0x64>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80019b4:	f001 f88c 	bl	8002ad0 <vTaskStartScheduler>
      stat = osOK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e002      	b.n	80019c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000080 	.word	0x20000080

080019d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <vApplicationGetIdleTaskMemory+0x28>)
 80019e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80019ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000084 	.word	0x20000084
 8001a00:	200000e0 	.word	0x200000e0

08001a04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <vApplicationGetTimerTaskMemory+0x30>)
 8001a1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002e0 	.word	0x200002e0
 8001a34:	2000033c 	.word	0x2000033c

08001a38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0208 	add.w	r2, r3, #8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f103 0208 	add.w	r2, r3, #8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f103 0208 	add.w	r2, r3, #8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	601a      	str	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d103      	bne.n	8001af4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	e00c      	b.n	8001b0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3308      	adds	r3, #8
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e002      	b.n	8001b02 <vListInsert+0x2e>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d2f6      	bcs.n	8001afc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6892      	ldr	r2, [r2, #8]
 8001b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6852      	ldr	r2, [r2, #4]
 8001b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d103      	bne.n	8001b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb0:	f383 8811 	msr	BASEPRI, r3
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	f3bf 8f4f 	dsb	sy
 8001bbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bbe:	bf00      	nop
 8001bc0:	e7fe      	b.n	8001bc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001bc2:	f002 f8b3 	bl	8003d2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	441a      	add	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	441a      	add	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	22ff      	movs	r2, #255	; 0xff
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d114      	bne.n	8001c42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01a      	beq.n	8001c56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3310      	adds	r3, #16
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 f9dd 	bl	8002fe4 <xTaskRemoveFromEventList>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <xQueueGenericReset+0xcc>)
 8001c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	e009      	b.n	8001c56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3310      	adds	r3, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fef6 	bl	8001a38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3324      	adds	r3, #36	; 0x24
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fef1 	bl	8001a38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c56:	f002 f899 	bl	8003d8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	e000ed04 	.word	0xe000ed04

08001c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c8e:	bf00      	nop
 8001c90:	e7fe      	b.n	8001c90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001caa:	bf00      	nop
 8001cac:	e7fe      	b.n	8001cac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <xQueueGenericCreateStatic+0x52>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <xQueueGenericCreateStatic+0x56>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <xQueueGenericCreateStatic+0x58>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	623b      	str	r3, [r7, #32]
}
 8001cd6:	bf00      	nop
 8001cd8:	e7fe      	b.n	8001cd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <xQueueGenericCreateStatic+0x7e>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <xQueueGenericCreateStatic+0x82>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <xQueueGenericCreateStatic+0x84>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	61fb      	str	r3, [r7, #28]
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d06:	2350      	movs	r3, #80	; 0x50
 8001d08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b50      	cmp	r3, #80	; 0x50
 8001d0e:	d00a      	beq.n	8001d26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	61bb      	str	r3, [r7, #24]
}
 8001d22:	bf00      	nop
 8001d24:	e7fe      	b.n	8001d24 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f805 	bl	8001d56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3730      	adds	r7, #48	; 0x30
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e002      	b.n	8001d78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d84:	2101      	movs	r1, #1
 8001d86:	69b8      	ldr	r0, [r7, #24]
 8001d88:	f7ff ff06 	bl	8001b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <xQueueGenericSend+0x32>
	__asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <xQueueGenericSend+0x40>
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <xQueueGenericSend+0x44>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <xQueueGenericSend+0x46>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <xQueueGenericSend+0x60>
	__asm volatile
 8001de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dea:	f383 8811 	msr	BASEPRI, r3
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001df8:	bf00      	nop
 8001dfa:	e7fe      	b.n	8001dfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d103      	bne.n	8001e0a <xQueueGenericSend+0x6e>
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <xQueueGenericSend+0x72>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <xQueueGenericSend+0x74>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <xQueueGenericSend+0x8e>
	__asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	623b      	str	r3, [r7, #32]
}
 8001e26:	bf00      	nop
 8001e28:	e7fe      	b.n	8001e28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e2a:	f001 fa9d 	bl	8003368 <xTaskGetSchedulerState>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <xQueueGenericSend+0x9e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <xQueueGenericSend+0xa2>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <xQueueGenericSend+0xa4>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <xQueueGenericSend+0xbe>
	__asm volatile
 8001e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	61fb      	str	r3, [r7, #28]
}
 8001e56:	bf00      	nop
 8001e58:	e7fe      	b.n	8001e58 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e5a:	f001 ff67 	bl	8003d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <xQueueGenericSend+0xd4>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d129      	bne.n	8001ec4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e76:	f000 fa07 	bl	8002288 <prvCopyDataToQueue>
 8001e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	3324      	adds	r3, #36	; 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f8ab 	bl	8002fe4 <xTaskRemoveFromEventList>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e94:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <xQueueGenericSend+0x1f8>)
 8001e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	e00a      	b.n	8001ebc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <xQueueGenericSend+0x1f8>)
 8001eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ebc:	f001 ff66 	bl	8003d8c <vPortExitCritical>
				return pdPASS;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e063      	b.n	8001f8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001eca:	f001 ff5f 	bl	8003d8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e05c      	b.n	8001f8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 f8e5 	bl	80030ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ee6:	f001 ff51 	bl	8003d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001eea:	f000 fe57 	bl	8002b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001eee:	f001 ff1d 	bl	8003d2c <vPortEnterCritical>
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d103      	bne.n	8001f08 <xQueueGenericSend+0x16c>
 8001f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d103      	bne.n	8001f1e <xQueueGenericSend+0x182>
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f1e:	f001 ff35 	bl	8003d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f22:	1d3a      	adds	r2, r7, #4
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 f8d4 	bl	80030d8 <xTaskCheckForTimeOut>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d124      	bne.n	8001f80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f38:	f000 fa9e 	bl	8002478 <prvIsQueueFull>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d018      	beq.n	8001f74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	3310      	adds	r3, #16
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fffa 	bl	8002f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f52:	f000 fa29 	bl	80023a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f56:	f000 fe2f 	bl	8002bb8 <xTaskResumeAll>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f af7c 	bne.w	8001e5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <xQueueGenericSend+0x1f8>)
 8001f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	f3bf 8f4f 	dsb	sy
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	e772      	b.n	8001e5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f76:	f000 fa17 	bl	80023a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f7a:	f000 fe1d 	bl	8002bb8 <xTaskResumeAll>
 8001f7e:	e76c      	b.n	8001e5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f82:	f000 fa11 	bl	80023a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f86:	f000 fe17 	bl	8002bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f8a:	2300      	movs	r3, #0
		}
	}
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3738      	adds	r7, #56	; 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <xQueueGenericSendFromISR+0x3c>
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <xQueueGenericSendFromISR+0x40>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <xQueueGenericSendFromISR+0x42>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	623b      	str	r3, [r7, #32]
}
 8001ff0:	bf00      	nop
 8001ff2:	e7fe      	b.n	8001ff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d103      	bne.n	8002002 <xQueueGenericSendFromISR+0x6a>
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <xQueueGenericSendFromISR+0x6e>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <xQueueGenericSendFromISR+0x70>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	61fb      	str	r3, [r7, #28]
}
 800201e:	bf00      	nop
 8002020:	e7fe      	b.n	8002020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002022:	f001 ff45 	bl	8003eb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002026:	f3ef 8211 	mrs	r2, BASEPRI
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	61ba      	str	r2, [r7, #24]
 800203c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800203e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	429a      	cmp	r2, r3
 800204c:	d302      	bcc.n	8002054 <xQueueGenericSendFromISR+0xbc>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d12c      	bne.n	80020ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800205a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002064:	f000 f910 	bl	8002288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002068:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d112      	bne.n	8002098 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	3324      	adds	r3, #36	; 0x24
 800207e:	4618      	mov	r0, r3
 8002080:	f000 ffb0 	bl	8002fe4 <xTaskRemoveFromEventList>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e007      	b.n	80020a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800209c:	3301      	adds	r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b25a      	sxtb	r2, r3
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80020a8:	2301      	movs	r3, #1
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80020ac:	e001      	b.n	80020b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80020bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3738      	adds	r7, #56	; 0x38
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <xQueueReceive+0x30>
	__asm volatile
 80020e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e6:	f383 8811 	msr	BASEPRI, r3
 80020ea:	f3bf 8f6f 	isb	sy
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	623b      	str	r3, [r7, #32]
}
 80020f4:	bf00      	nop
 80020f6:	e7fe      	b.n	80020f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <xQueueReceive+0x3e>
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <xQueueReceive+0x42>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <xQueueReceive+0x44>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <xQueueReceive+0x5e>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	61fb      	str	r3, [r7, #28]
}
 8002122:	bf00      	nop
 8002124:	e7fe      	b.n	8002124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002126:	f001 f91f 	bl	8003368 <xTaskGetSchedulerState>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <xQueueReceive+0x6e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <xQueueReceive+0x72>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <xQueueReceive+0x74>
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <xQueueReceive+0x8e>
	__asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	61bb      	str	r3, [r7, #24]
}
 8002152:	bf00      	nop
 8002154:	e7fe      	b.n	8002154 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002156:	f001 fde9 	bl	8003d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01f      	beq.n	80021a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800216a:	f000 f8f7 	bl	800235c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00f      	beq.n	800219e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	3310      	adds	r3, #16
 8002182:	4618      	mov	r0, r3
 8002184:	f000 ff2e 	bl	8002fe4 <xTaskRemoveFromEventList>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <xQueueReceive+0x1bc>)
 8002190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800219e:	f001 fdf5 	bl	8003d8c <vPortExitCritical>
				return pdPASS;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e069      	b.n	800227a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021ac:	f001 fdee 	bl	8003d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e062      	b.n	800227a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 ff74 	bl	80030ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021c8:	f001 fde0 	bl	8003d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021cc:	f000 fce6 	bl	8002b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021d0:	f001 fdac 	bl	8003d2c <vPortEnterCritical>
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d103      	bne.n	80021ea <xQueueReceive+0x122>
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d103      	bne.n	8002200 <xQueueReceive+0x138>
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002200:	f001 fdc4 	bl	8003d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002204:	1d3a      	adds	r2, r7, #4
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 ff63 	bl	80030d8 <xTaskCheckForTimeOut>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d123      	bne.n	8002260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800221a:	f000 f917 	bl	800244c <prvIsQueueEmpty>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d017      	beq.n	8002254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	3324      	adds	r3, #36	; 0x24
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fe89 	bl	8002f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002234:	f000 f8b8 	bl	80023a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002238:	f000 fcbe 	bl	8002bb8 <xTaskResumeAll>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d189      	bne.n	8002156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <xQueueReceive+0x1bc>)
 8002244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	e780      	b.n	8002156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002256:	f000 f8a7 	bl	80023a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800225a:	f000 fcad 	bl	8002bb8 <xTaskResumeAll>
 800225e:	e77a      	b.n	8002156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002262:	f000 f8a1 	bl	80023a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002266:	f000 fca7 	bl	8002bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800226a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800226c:	f000 f8ee 	bl	800244c <prvIsQueueEmpty>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	f43f af6f 	beq.w	8002156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800227a:	4618      	mov	r0, r3
 800227c:	3730      	adds	r7, #48	; 0x30
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000ed04 	.word	0xe000ed04

08002288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d14d      	bne.n	800234a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 f876 	bl	80033a4 <xTaskPriorityDisinherit>
 80022b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	e043      	b.n	800234a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d119      	bne.n	80022fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6898      	ldr	r0, [r3, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	461a      	mov	r2, r3
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	f002 f826 	bl	8004324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	441a      	add	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d32b      	bcc.n	800234a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	e026      	b.n	800234a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68d8      	ldr	r0, [r3, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	461a      	mov	r2, r3
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	f002 f80c 	bl	8004324 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	425b      	negs	r3, r3
 8002316:	441a      	add	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	425b      	negs	r3, r3
 8002332:	441a      	add	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d105      	bne.n	800234a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	3b01      	subs	r3, #1
 8002348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002352:	697b      	ldr	r3, [r7, #20]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	441a      	add	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d303      	bcc.n	8002390 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	461a      	mov	r2, r3
 800239a:	6838      	ldr	r0, [r7, #0]
 800239c:	f001 ffc2 	bl	8004324 <memcpy>
	}
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80023b0:	f001 fcbc 	bl	8003d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023bc:	e011      	b.n	80023e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3324      	adds	r3, #36	; 0x24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fe0a 	bl	8002fe4 <xTaskRemoveFromEventList>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80023d6:	f000 fee1 	bl	800319c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	3b01      	subs	r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dce9      	bgt.n	80023be <prvUnlockQueue+0x16>
 80023ea:	e000      	b.n	80023ee <prvUnlockQueue+0x46>
					break;
 80023ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	22ff      	movs	r2, #255	; 0xff
 80023f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80023f6:	f001 fcc9 	bl	8003d8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023fa:	f001 fc97 	bl	8003d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002406:	e011      	b.n	800242c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3310      	adds	r3, #16
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fde5 	bl	8002fe4 <xTaskRemoveFromEventList>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002420:	f000 febc 	bl	800319c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	3b01      	subs	r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800242c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002430:	2b00      	cmp	r3, #0
 8002432:	dce9      	bgt.n	8002408 <prvUnlockQueue+0x60>
 8002434:	e000      	b.n	8002438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002440:	f001 fca4 	bl	8003d8c <vPortExitCritical>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002454:	f001 fc6a 	bl	8003d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e001      	b.n	800246a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800246a:	f001 fc8f 	bl	8003d8c <vPortExitCritical>

	return xReturn;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002480:	f001 fc54 	bl	8003d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	429a      	cmp	r2, r3
 800248e:	d102      	bne.n	8002496 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002490:	2301      	movs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e001      	b.n	800249a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800249a:	f001 fc77 	bl	8003d8c <vPortExitCritical>

	return xReturn;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e014      	b.n	80024e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <vQueueAddToRegistry+0x4c>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024c4:	490b      	ldr	r1, [pc, #44]	; (80024f4 <vQueueAddToRegistry+0x4c>)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <vQueueAddToRegistry+0x4c>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80024da:	e006      	b.n	80024ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d9e7      	bls.n	80024b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	2000073c 	.word	0x2000073c

080024f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002508:	f001 fc10 	bl	8003d2c <vPortEnterCritical>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002512:	b25b      	sxtb	r3, r3
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d103      	bne.n	8002522 <vQueueWaitForMessageRestricted+0x2a>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002528:	b25b      	sxtb	r3, r3
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d103      	bne.n	8002538 <vQueueWaitForMessageRestricted+0x40>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002538:	f001 fc28 	bl	8003d8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd1d 	bl	8002f8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff28 	bl	80023a8 <prvUnlockQueue>
	}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	; 0x38
 8002564:	af04      	add	r7, sp, #16
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	623b      	str	r3, [r7, #32]
}
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	61fb      	str	r3, [r7, #28]
}
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025a6:	235c      	movs	r3, #92	; 0x5c
 80025a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b5c      	cmp	r3, #92	; 0x5c
 80025ae:	d00a      	beq.n	80025c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61bb      	str	r3, [r7, #24]
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01e      	beq.n	800260a <xTaskCreateStatic+0xaa>
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01b      	beq.n	800260a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80025e4:	2300      	movs	r3, #0
 80025e6:	9303      	str	r3, [sp, #12]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f850 	bl	80026a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002604:	f000 f8d4 	bl	80027b0 <prvAddNewTaskToReadyList>
 8002608:	e001      	b.n	800260e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800260e:	697b      	ldr	r3, [r7, #20]
	}
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af04      	add	r7, sp, #16
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fc7d 	bl	8003f2c <pvPortMalloc>
 8002632:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00e      	beq.n	8002658 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800263a:	205c      	movs	r0, #92	; 0x5c
 800263c:	f001 fc76 	bl	8003f2c <pvPortMalloc>
 8002640:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
 800264e:	e005      	b.n	800265c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f001 fd2f 	bl	80040b4 <vPortFree>
 8002656:	e001      	b.n	800265c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	2300      	movs	r3, #0
 800266e:	9303      	str	r3, [sp, #12]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f80e 	bl	80026a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002686:	69f8      	ldr	r0, [r7, #28]
 8002688:	f000 f892 	bl	80027b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800268c:	2301      	movs	r3, #1
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e002      	b.n	8002698 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002698:	69bb      	ldr	r3, [r7, #24]
	}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b088      	sub	sp, #32
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	21a5      	movs	r1, #165	; 0xa5
 80026bc:	f001 fe40 	bl	8004340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ca:	3b01      	subs	r3, #1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f023 0307 	bic.w	r3, r3, #7
 80026d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <prvInitialiseNewTask+0x58>
	__asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	617b      	str	r3, [r7, #20]
}
 80026f6:	bf00      	nop
 80026f8:	e7fe      	b.n	80026f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e012      	b.n	8002726 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	7819      	ldrb	r1, [r3, #0]
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	3334      	adds	r3, #52	; 0x34
 8002710:	460a      	mov	r2, r1
 8002712:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d9e9      	bls.n	8002700 <prvInitialiseNewTask+0x5e>
 800272c:	e000      	b.n	8002730 <prvInitialiseNewTask+0x8e>
		{
			break;
 800272e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	2b37      	cmp	r3, #55	; 0x37
 800273c:	d901      	bls.n	8002742 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800273e:	2337      	movs	r3, #55	; 0x37
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2200      	movs	r2, #0
 8002752:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f98c 	bl	8001a76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	3318      	adds	r3, #24
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f987 	bl	8001a76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800276c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800277c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	69b8      	ldr	r0, [r7, #24]
 8002792:	f001 f9db 	bl	8003b4c <pxPortInitialiseStack>
 8002796:	4602      	mov	r2, r0
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027a8:	bf00      	nop
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027b8:	f001 fab8 	bl	8003d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <prvAddNewTaskToReadyList+0xc4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4a2c      	ldr	r2, [pc, #176]	; (8002874 <prvAddNewTaskToReadyList+0xc4>)
 80027c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <prvAddNewTaskToReadyList+0xc8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <prvAddNewTaskToReadyList+0xc8>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <prvAddNewTaskToReadyList+0xc4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d110      	bne.n	80027fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80027dc:	f000 fd02 	bl	80031e4 <prvInitialiseTaskLists>
 80027e0:	e00d      	b.n	80027fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <prvAddNewTaskToReadyList+0xcc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <prvAddNewTaskToReadyList+0xc8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d802      	bhi.n	80027fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <prvAddNewTaskToReadyList+0xc8>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <prvAddNewTaskToReadyList+0xd0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <prvAddNewTaskToReadyList+0xd0>)
 8002806:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <prvAddNewTaskToReadyList+0xd0>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <prvAddNewTaskToReadyList+0xd4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d903      	bls.n	8002824 <prvAddNewTaskToReadyList+0x74>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <prvAddNewTaskToReadyList+0xd4>)
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <prvAddNewTaskToReadyList+0xd8>)
 8002832:	441a      	add	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f7ff f927 	bl	8001a8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002840:	f001 faa4 	bl	8003d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <prvAddNewTaskToReadyList+0xcc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <prvAddNewTaskToReadyList+0xc8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	429a      	cmp	r2, r3
 8002858:	d207      	bcs.n	800286a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <prvAddNewTaskToReadyList+0xdc>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000c50 	.word	0x20000c50
 8002878:	2000077c 	.word	0x2000077c
 800287c:	20000c5c 	.word	0x20000c5c
 8002880:	20000c6c 	.word	0x20000c6c
 8002884:	20000c58 	.word	0x20000c58
 8002888:	20000780 	.word	0x20000780
 800288c:	e000ed04 	.word	0xe000ed04

08002890 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <vTaskDelayUntil+0x2a>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	617b      	str	r3, [r7, #20]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <vTaskDelayUntil+0x46>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	613b      	str	r3, [r7, #16]
}
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <vTaskDelayUntil+0xf0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <vTaskDelayUntil+0x64>
	__asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	60fb      	str	r3, [r7, #12]
}
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80028f4:	f000 f952 	bl	8002b9c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <vTaskDelayUntil+0xf4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4413      	add	r3, r2
 8002906:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20b      	bcs.n	800292a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	d211      	bcs.n	8002940 <vTaskDelayUntil+0xb0>
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d90d      	bls.n	8002940 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
 8002928:	e00a      	b.n	8002940 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	429a      	cmp	r2, r3
 8002932:	d303      	bcc.n	800293c <vTaskDelayUntil+0xac>
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	429a      	cmp	r2, r3
 800293a:	d901      	bls.n	8002940 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800293c:	2301      	movs	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fd93 	bl	8003480 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800295a:	f000 f92d 	bl	8002bb8 <xTaskResumeAll>
 800295e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <vTaskDelayUntil+0xf8>)
 8002968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	; 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000c78 	.word	0x20000c78
 8002984:	20000c54 	.word	0x20000c54
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b37      	cmp	r3, #55	; 0x37
 800299e:	d90a      	bls.n	80029b6 <vTaskPrioritySet+0x2a>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	60fb      	str	r3, [r7, #12]
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b37      	cmp	r3, #55	; 0x37
 80029ba:	d901      	bls.n	80029c0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029bc:	2337      	movs	r3, #55	; 0x37
 80029be:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80029c0:	f001 f9b4 	bl	8003d2c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <vTaskPrioritySet+0x44>
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <vTaskPrioritySet+0x134>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e000      	b.n	80029d2 <vTaskPrioritySet+0x46>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d068      	beq.n	8002ab4 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d90d      	bls.n	8002a06 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80029ea:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <vTaskPrioritySet+0x134>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d00f      	beq.n	8002a14 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <vTaskPrioritySet+0x134>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d309      	bcc.n	8002a14 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	e006      	b.n	8002a14 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <vTaskPrioritySet+0x134>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d101      	bne.n	8002a14 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d102      	bne.n	8002a2c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db04      	blt.n	8002a44 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <vTaskPrioritySet+0x138>)
 8002a54:	4413      	add	r3, r2
 8002a56:	4299      	cmp	r1, r3
 8002a58:	d101      	bne.n	8002a5e <vTaskPrioritySet+0xd2>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <vTaskPrioritySet+0xd4>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01c      	beq.n	8002a9e <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f86b 	bl	8001b44 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <vTaskPrioritySet+0x13c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d903      	bls.n	8002a82 <vTaskPrioritySet+0xf6>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <vTaskPrioritySet+0x13c>)
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <vTaskPrioritySet+0x138>)
 8002a90:	441a      	add	r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7fe fff8 	bl	8001a8e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <vTaskPrioritySet+0x140>)
 8002aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002ab4:	f001 f96a 	bl	8003d8c <vPortExitCritical>
	}
 8002ab8:	bf00      	nop
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000077c 	.word	0x2000077c
 8002ac4:	20000780 	.word	0x20000780
 8002ac8:	20000c58 	.word	0x20000c58
 8002acc:	e000ed04 	.word	0xe000ed04

08002ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ade:	463a      	mov	r2, r7
 8002ae0:	1d39      	adds	r1, r7, #4
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe ff74 	bl	80019d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	9202      	str	r2, [sp, #8]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2300      	movs	r3, #0
 8002afc:	460a      	mov	r2, r1
 8002afe:	4921      	ldr	r1, [pc, #132]	; (8002b84 <vTaskStartScheduler+0xb4>)
 8002b00:	4821      	ldr	r0, [pc, #132]	; (8002b88 <vTaskStartScheduler+0xb8>)
 8002b02:	f7ff fd2d 	bl	8002560 <xTaskCreateStatic>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <vTaskStartScheduler+0xbc>)
 8002b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <vTaskStartScheduler+0xbc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b14:	2301      	movs	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e001      	b.n	8002b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b24:	f000 fd00 	bl	8003528 <xTimerCreateTimerTask>
 8002b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d116      	bne.n	8002b5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	613b      	str	r3, [r7, #16]
}
 8002b42:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <vTaskStartScheduler+0xc0>)
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <vTaskStartScheduler+0xc4>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <vTaskStartScheduler+0xc8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b58:	f001 f876 	bl	8003c48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b5c:	e00e      	b.n	8002b7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d10a      	bne.n	8002b7c <vTaskStartScheduler+0xac>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60fb      	str	r3, [r7, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <vTaskStartScheduler+0xaa>
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	080043b0 	.word	0x080043b0
 8002b88:	080031b5 	.word	0x080031b5
 8002b8c:	20000c74 	.word	0x20000c74
 8002b90:	20000c70 	.word	0x20000c70
 8002b94:	20000c5c 	.word	0x20000c5c
 8002b98:	20000c54 	.word	0x20000c54

08002b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <vTaskSuspendAll+0x18>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <vTaskSuspendAll+0x18>)
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000c78 	.word	0x20000c78

08002bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <xTaskResumeAll+0x118>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	603b      	str	r3, [r7, #0]
}
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002be4:	f001 f8a2 	bl	8003d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002be8:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <xTaskResumeAll+0x118>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	4a38      	ldr	r2, [pc, #224]	; (8002cd0 <xTaskResumeAll+0x118>)
 8002bf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bf2:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <xTaskResumeAll+0x118>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d162      	bne.n	8002cc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <xTaskResumeAll+0x11c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d05e      	beq.n	8002cc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c02:	e02f      	b.n	8002c64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <xTaskResumeAll+0x120>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3318      	adds	r3, #24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe ff97 	bl	8001b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff92 	bl	8001b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <xTaskResumeAll+0x124>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d903      	bls.n	8002c34 <xTaskResumeAll+0x7c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <xTaskResumeAll+0x124>)
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <xTaskResumeAll+0x128>)
 8002c42:	441a      	add	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f7fe ff1f 	bl	8001a8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <xTaskResumeAll+0x12c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <xTaskResumeAll+0x130>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <xTaskResumeAll+0x120>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1cb      	bne.n	8002c04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c72:	f000 fb55 	bl	8003320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <xTaskResumeAll+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c82:	f000 f845 	bl	8002d10 <xTaskIncrementTick>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <xTaskResumeAll+0x130>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f1      	bne.n	8002c82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <xTaskResumeAll+0x134>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <xTaskResumeAll+0x130>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d009      	beq.n	8002cc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <xTaskResumeAll+0x138>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cc0:	f001 f864 	bl	8003d8c <vPortExitCritical>

	return xAlreadyYielded;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000c78 	.word	0x20000c78
 8002cd4:	20000c50 	.word	0x20000c50
 8002cd8:	20000c10 	.word	0x20000c10
 8002cdc:	20000c58 	.word	0x20000c58
 8002ce0:	20000780 	.word	0x20000780
 8002ce4:	2000077c 	.word	0x2000077c
 8002ce8:	20000c64 	.word	0x20000c64
 8002cec:	20000c60 	.word	0x20000c60
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <xTaskGetTickCount+0x18>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d00:	687b      	ldr	r3, [r7, #4]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000c54 	.word	0x20000c54

08002d10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <xTaskIncrementTick+0x150>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 808e 	bne.w	8002e40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d24:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <xTaskIncrementTick+0x154>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <xTaskIncrementTick+0x154>)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d120      	bne.n	8002d7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <xTaskIncrementTick+0x158>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	603b      	str	r3, [r7, #0]
}
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <xTaskIncrementTick+0x46>
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <xTaskIncrementTick+0x158>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <xTaskIncrementTick+0x15c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <xTaskIncrementTick+0x158>)
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <xTaskIncrementTick+0x15c>)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <xTaskIncrementTick+0x160>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <xTaskIncrementTick+0x160>)
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	f000 fad3 	bl	8003320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <xTaskIncrementTick+0x164>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d34e      	bcc.n	8002e22 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <xTaskIncrementTick+0x158>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <xTaskIncrementTick+0x82>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xTaskIncrementTick+0x84>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d98:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <xTaskIncrementTick+0x164>)
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9e:	601a      	str	r2, [r3, #0]
					break;
 8002da0:	e03f      	b.n	8002e22 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <xTaskIncrementTick+0x158>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d203      	bcs.n	8002dc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <xTaskIncrementTick+0x164>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6013      	str	r3, [r2, #0]
						break;
 8002dc0:	e02f      	b.n	8002e22 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe febc 	bl	8001b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe feb3 	bl	8001b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <xTaskIncrementTick+0x168>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d903      	bls.n	8002df2 <xTaskIncrementTick+0xe2>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <xTaskIncrementTick+0x168>)
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <xTaskIncrementTick+0x16c>)
 8002e00:	441a      	add	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fe fe40 	bl	8001a8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <xTaskIncrementTick+0x170>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d3b3      	bcc.n	8002d84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e20:	e7b0      	b.n	8002d84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <xTaskIncrementTick+0x170>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	4914      	ldr	r1, [pc, #80]	; (8002e7c <xTaskIncrementTick+0x16c>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d907      	bls.n	8002e4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e004      	b.n	8002e4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <xTaskIncrementTick+0x174>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <xTaskIncrementTick+0x174>)
 8002e48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <xTaskIncrementTick+0x178>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002e52:	2301      	movs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e56:	697b      	ldr	r3, [r7, #20]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000c78 	.word	0x20000c78
 8002e64:	20000c54 	.word	0x20000c54
 8002e68:	20000c08 	.word	0x20000c08
 8002e6c:	20000c0c 	.word	0x20000c0c
 8002e70:	20000c68 	.word	0x20000c68
 8002e74:	20000c70 	.word	0x20000c70
 8002e78:	20000c58 	.word	0x20000c58
 8002e7c:	20000780 	.word	0x20000780
 8002e80:	2000077c 	.word	0x2000077c
 8002e84:	20000c60 	.word	0x20000c60
 8002e88:	20000c64 	.word	0x20000c64

08002e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e92:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <vTaskSwitchContext+0xa4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <vTaskSwitchContext+0xa8>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ea0:	e041      	b.n	8002f26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <vTaskSwitchContext+0xa8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ea8:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <vTaskSwitchContext+0xac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e010      	b.n	8002ed2 <vTaskSwitchContext+0x46>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <vTaskSwitchContext+0x40>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	607b      	str	r3, [r7, #4]
}
 8002ec8:	bf00      	nop
 8002eca:	e7fe      	b.n	8002eca <vTaskSwitchContext+0x3e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	491a      	ldr	r1, [pc, #104]	; (8002f3c <vTaskSwitchContext+0xb0>)
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0e4      	beq.n	8002eb0 <vTaskSwitchContext+0x24>
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <vTaskSwitchContext+0xb0>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3308      	adds	r3, #8
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d104      	bne.n	8002f16 <vTaskSwitchContext+0x8a>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <vTaskSwitchContext+0xb4>)
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <vTaskSwitchContext+0xac>)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	20000c78 	.word	0x20000c78
 8002f34:	20000c64 	.word	0x20000c64
 8002f38:	20000c58 	.word	0x20000c58
 8002f3c:	20000780 	.word	0x20000780
 8002f40:	2000077c 	.word	0x2000077c

08002f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	60fb      	str	r3, [r7, #12]
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <vTaskPlaceOnEventList+0x44>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3318      	adds	r3, #24
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fdae 	bl	8001ad4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f78:	2101      	movs	r1, #1
 8002f7a:	6838      	ldr	r0, [r7, #0]
 8002f7c:	f000 fa80 	bl	8003480 <prvAddCurrentTaskToDelayedList>
}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000077c 	.word	0x2000077c

08002f8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	617b      	str	r3, [r7, #20]
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <vTaskPlaceOnEventListRestricted+0x54>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3318      	adds	r3, #24
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7fe fd66 	bl	8001a8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68b8      	ldr	r0, [r7, #8]
 8002fd2:	f000 fa55 	bl	8003480 <prvAddCurrentTaskToDelayedList>
	}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000077c 	.word	0x2000077c

08002fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	60fb      	str	r3, [r7, #12]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	3318      	adds	r3, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fd95 	bl	8001b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <xTaskRemoveFromEventList+0xb0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11d      	bne.n	800305e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3304      	adds	r3, #4
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fd8c 	bl	8001b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <xTaskRemoveFromEventList+0xb4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d903      	bls.n	8003040 <xTaskRemoveFromEventList+0x5c>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <xTaskRemoveFromEventList+0xb4>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4a13      	ldr	r2, [pc, #76]	; (800309c <xTaskRemoveFromEventList+0xb8>)
 800304e:	441a      	add	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7fe fd19 	bl	8001a8e <vListInsertEnd>
 800305c:	e005      	b.n	800306a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3318      	adds	r3, #24
 8003062:	4619      	mov	r1, r3
 8003064:	480e      	ldr	r0, [pc, #56]	; (80030a0 <xTaskRemoveFromEventList+0xbc>)
 8003066:	f7fe fd12 	bl	8001a8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <xTaskRemoveFromEventList+0xc0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d905      	bls.n	8003084 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <xTaskRemoveFromEventList+0xc4>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e001      	b.n	8003088 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003088:	697b      	ldr	r3, [r7, #20]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000c78 	.word	0x20000c78
 8003098:	20000c58 	.word	0x20000c58
 800309c:	20000780 	.word	0x20000780
 80030a0:	20000c10 	.word	0x20000c10
 80030a4:	2000077c 	.word	0x2000077c
 80030a8:	20000c64 	.word	0x20000c64

080030ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <vTaskInternalSetTimeOutState+0x24>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <vTaskInternalSetTimeOutState+0x28>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000c68 	.word	0x20000c68
 80030d4:	20000c54 	.word	0x20000c54

080030d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	613b      	str	r3, [r7, #16]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	60fb      	str	r3, [r7, #12]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800311a:	f000 fe07 	bl	8003d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <xTaskCheckForTimeOut+0xbc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d102      	bne.n	800313e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e023      	b.n	8003186 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <xTaskCheckForTimeOut+0xc0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d007      	beq.n	800315a <xTaskCheckForTimeOut+0x82>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	e015      	b.n	8003186 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d20b      	bcs.n	800317c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff9b 	bl	80030ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e004      	b.n	8003186 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003186:	f000 fe01 	bl	8003d8c <vPortExitCritical>

	return xReturn;
 800318a:	69fb      	ldr	r3, [r7, #28]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000c54 	.word	0x20000c54
 8003198:	20000c68 	.word	0x20000c68

0800319c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <vTaskMissedYield+0x14>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000c64 	.word	0x20000c64

080031b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031bc:	f000 f852 	bl	8003264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <prvIdleTask+0x28>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d9f9      	bls.n	80031bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <prvIdleTask+0x2c>)
 80031ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031d8:	e7f0      	b.n	80031bc <prvIdleTask+0x8>
 80031da:	bf00      	nop
 80031dc:	20000780 	.word	0x20000780
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	e00c      	b.n	800320a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <prvInitialiseTaskLists+0x60>)
 80031fc:	4413      	add	r3, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fc1a 	bl	8001a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3301      	adds	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b37      	cmp	r3, #55	; 0x37
 800320e:	d9ef      	bls.n	80031f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <prvInitialiseTaskLists+0x64>)
 8003212:	f7fe fc11 	bl	8001a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <prvInitialiseTaskLists+0x68>)
 8003218:	f7fe fc0e 	bl	8001a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <prvInitialiseTaskLists+0x6c>)
 800321e:	f7fe fc0b 	bl	8001a38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003222:	480c      	ldr	r0, [pc, #48]	; (8003254 <prvInitialiseTaskLists+0x70>)
 8003224:	f7fe fc08 	bl	8001a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <prvInitialiseTaskLists+0x74>)
 800322a:	f7fe fc05 	bl	8001a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <prvInitialiseTaskLists+0x78>)
 8003230:	4a05      	ldr	r2, [pc, #20]	; (8003248 <prvInitialiseTaskLists+0x64>)
 8003232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <prvInitialiseTaskLists+0x7c>)
 8003236:	4a05      	ldr	r2, [pc, #20]	; (800324c <prvInitialiseTaskLists+0x68>)
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000780 	.word	0x20000780
 8003248:	20000be0 	.word	0x20000be0
 800324c:	20000bf4 	.word	0x20000bf4
 8003250:	20000c10 	.word	0x20000c10
 8003254:	20000c24 	.word	0x20000c24
 8003258:	20000c3c 	.word	0x20000c3c
 800325c:	20000c08 	.word	0x20000c08
 8003260:	20000c0c 	.word	0x20000c0c

08003264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800326a:	e019      	b.n	80032a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800326c:	f000 fd5e 	bl	8003d2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <prvCheckTasksWaitingTermination+0x50>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fc61 	bl	8001b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <prvCheckTasksWaitingTermination+0x54>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <prvCheckTasksWaitingTermination+0x54>)
 800328a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <prvCheckTasksWaitingTermination+0x58>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3b01      	subs	r3, #1
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <prvCheckTasksWaitingTermination+0x58>)
 8003294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003296:	f000 fd79 	bl	8003d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f810 	bl	80032c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e1      	bne.n	800326c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000c24 	.word	0x20000c24
 80032b8:	20000c50 	.word	0x20000c50
 80032bc:	20000c38 	.word	0x20000c38

080032c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 feec 	bl	80040b4 <vPortFree>
				vPortFree( pxTCB );
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fee9 	bl	80040b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032e2:	e018      	b.n	8003316 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d103      	bne.n	80032f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fee0 	bl	80040b4 <vPortFree>
	}
 80032f4:	e00f      	b.n	8003316 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d00a      	beq.n	8003316 <prvDeleteTCB+0x56>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	60fb      	str	r3, [r7, #12]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <prvDeleteTCB+0x54>
	}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <prvResetNextTaskUnblockTime+0x40>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <prvResetNextTaskUnblockTime+0x14>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <prvResetNextTaskUnblockTime+0x16>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <prvResetNextTaskUnblockTime+0x44>)
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003342:	e008      	b.n	8003356 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <prvResetNextTaskUnblockTime+0x40>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <prvResetNextTaskUnblockTime+0x44>)
 8003354:	6013      	str	r3, [r2, #0]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	20000c08 	.word	0x20000c08
 8003364:	20000c70 	.word	0x20000c70

08003368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <xTaskGetSchedulerState+0x34>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003376:	2301      	movs	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	e008      	b.n	800338e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <xTaskGetSchedulerState+0x38>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003384:	2302      	movs	r3, #2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	e001      	b.n	800338e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800338e:	687b      	ldr	r3, [r7, #4]
	}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000c5c 	.word	0x20000c5c
 80033a0:	20000c78 	.word	0x20000c78

080033a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d056      	beq.n	8003468 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <xTaskPriorityDisinherit+0xd0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d00a      	beq.n	80033da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60fb      	str	r3, [r7, #12]
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	60bb      	str	r3, [r7, #8]
}
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	429a      	cmp	r2, r3
 800340c:	d02c      	beq.n	8003468 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d128      	bne.n	8003468 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3304      	adds	r3, #4
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fb92 	bl	8001b44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <xTaskPriorityDisinherit+0xd4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d903      	bls.n	8003448 <xTaskPriorityDisinherit+0xa4>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <xTaskPriorityDisinherit+0xd4>)
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <xTaskPriorityDisinherit+0xd8>)
 8003456:	441a      	add	r2, r3
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7fe fb15 	bl	8001a8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003464:	2301      	movs	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003468:	697b      	ldr	r3, [r7, #20]
	}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	2000077c 	.word	0x2000077c
 8003478:	20000c58 	.word	0x20000c58
 800347c:	20000780 	.word	0x20000780

08003480 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <prvAddCurrentTaskToDelayedList+0x90>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <prvAddCurrentTaskToDelayedList+0x94>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3304      	adds	r3, #4
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fb54 	bl	8001b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d10a      	bne.n	80034ba <prvAddCurrentTaskToDelayedList+0x3a>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <prvAddCurrentTaskToDelayedList+0x94>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4819      	ldr	r0, [pc, #100]	; (8003518 <prvAddCurrentTaskToDelayedList+0x98>)
 80034b4:	f7fe faeb 	bl	8001a8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034b8:	e026      	b.n	8003508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <prvAddCurrentTaskToDelayedList+0x94>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d209      	bcs.n	80034e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <prvAddCurrentTaskToDelayedList+0x9c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <prvAddCurrentTaskToDelayedList+0x94>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3304      	adds	r3, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7fe faf8 	bl	8001ad4 <vListInsert>
}
 80034e4:	e010      	b.n	8003508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <prvAddCurrentTaskToDelayedList+0x94>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7fe faee 	bl	8001ad4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d202      	bcs.n	8003508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20000c54 	.word	0x20000c54
 8003514:	2000077c 	.word	0x2000077c
 8003518:	20000c3c 	.word	0x20000c3c
 800351c:	20000c0c 	.word	0x20000c0c
 8003520:	20000c08 	.word	0x20000c08
 8003524:	20000c70 	.word	0x20000c70

08003528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003532:	f000 facb 	bl	8003acc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <xTimerCreateTimerTask+0x80>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d021      	beq.n	8003582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003546:	1d3a      	adds	r2, r7, #4
 8003548:	f107 0108 	add.w	r1, r7, #8
 800354c:	f107 030c 	add.w	r3, r7, #12
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fa57 	bl	8001a04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	9202      	str	r2, [sp, #8]
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2302      	movs	r3, #2
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	460a      	mov	r2, r1
 8003568:	4910      	ldr	r1, [pc, #64]	; (80035ac <xTimerCreateTimerTask+0x84>)
 800356a:	4811      	ldr	r0, [pc, #68]	; (80035b0 <xTimerCreateTimerTask+0x88>)
 800356c:	f7fe fff8 	bl	8002560 <xTaskCreateStatic>
 8003570:	4603      	mov	r3, r0
 8003572:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <xTimerCreateTimerTask+0x8c>)
 8003574:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <xTimerCreateTimerTask+0x8c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800357e:	2301      	movs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	613b      	str	r3, [r7, #16]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800359e:	697b      	ldr	r3, [r7, #20]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000cac 	.word	0x20000cac
 80035ac:	080043b8 	.word	0x080043b8
 80035b0:	080036d5 	.word	0x080036d5
 80035b4:	20000cb0 	.word	0x20000cb0

080035b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	623b      	str	r3, [r7, #32]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <xTimerGenericCommand+0x98>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d02a      	beq.n	8003644 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	dc18      	bgt.n	8003632 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003600:	f7ff feb2 	bl	8003368 <xTaskGetSchedulerState>
 8003604:	4603      	mov	r3, r0
 8003606:	2b02      	cmp	r3, #2
 8003608:	d109      	bne.n	800361e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <xTimerGenericCommand+0x98>)
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f107 0110 	add.w	r1, r7, #16
 8003612:	2300      	movs	r3, #0
 8003614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003616:	f7fe fbc1 	bl	8001d9c <xQueueGenericSend>
 800361a:	6278      	str	r0, [r7, #36]	; 0x24
 800361c:	e012      	b.n	8003644 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <xTimerGenericCommand+0x98>)
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	f107 0110 	add.w	r1, r7, #16
 8003626:	2300      	movs	r3, #0
 8003628:	2200      	movs	r2, #0
 800362a:	f7fe fbb7 	bl	8001d9c <xQueueGenericSend>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24
 8003630:	e008      	b.n	8003644 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <xTimerGenericCommand+0x98>)
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f107 0110 	add.w	r1, r7, #16
 800363a:	2300      	movs	r3, #0
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	f7fe fcab 	bl	8001f98 <xQueueGenericSendFromISR>
 8003642:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003646:	4618      	mov	r0, r3
 8003648:	3728      	adds	r7, #40	; 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000cac 	.word	0x20000cac

08003654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <prvProcessExpiredTimer+0x7c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fa69 	bl	8001b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d122      	bne.n	80036c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	18d1      	adds	r1, r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f000 f8c8 	bl	800381c <prvInsertTimerInActiveList>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003692:	2300      	movs	r3, #0
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	2100      	movs	r1, #0
 800369c:	6978      	ldr	r0, [r7, #20]
 800369e:	f7ff ff8b 	bl	80035b8 <xTimerGenericCommand>
 80036a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60fb      	str	r3, [r7, #12]
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	6978      	ldr	r0, [r7, #20]
 80036c6:	4798      	blx	r3
}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000ca4 	.word	0x20000ca4

080036d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f857 	bl	8003794 <prvGetNextExpireTime>
 80036e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f803 	bl	80036f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036f2:	f000 f8d5 	bl	80038a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f6:	e7f1      	b.n	80036dc <prvTimerTask+0x8>

080036f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003702:	f7ff fa4b 	bl	8002b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f866 	bl	80037dc <prvSampleTimeNow>
 8003710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d130      	bne.n	800377a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d806      	bhi.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003726:	f7ff fa47 	bl	8002bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff91 	bl	8003654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003732:	e024      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <prvProcessTimerOrBlockTask+0x90>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <prvProcessTimerOrBlockTask+0x94>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	f7fe fecd 	bl	80024f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800375e:	f7ff fa2b 	bl	8002bb8 <xTaskResumeAll>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <prvProcessTimerOrBlockTask+0x98>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
}
 8003778:	e001      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800377a:	f7ff fa1d 	bl	8002bb8 <xTaskResumeAll>
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000ca8 	.word	0x20000ca8
 800378c:	20000cac 	.word	0x20000cac
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <prvGetNextExpireTime+0x44>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <prvGetNextExpireTime+0x44>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e001      	b.n	80037ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000ca4 	.word	0x20000ca4

080037dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037e4:	f7ff fa86 	bl	8002cf4 <xTaskGetTickCount>
 80037e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <prvSampleTimeNow+0x3c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d205      	bcs.n	8003800 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037f4:	f000 f908 	bl	8003a08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e002      	b.n	8003806 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <prvSampleTimeNow+0x3c>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800380c:	68fb      	ldr	r3, [r7, #12]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000cb4 	.word	0x20000cb4

0800381c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d812      	bhi.n	8003868 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e01b      	b.n	800388e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <prvInsertTimerInActiveList+0x7c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe f937 	bl	8001ad4 <vListInsert>
 8003866:	e012      	b.n	800388e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d206      	bcs.n	800387e <prvInsertTimerInActiveList+0x62>
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e007      	b.n	800388e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvInsertTimerInActiveList+0x80>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe f923 	bl	8001ad4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800388e:	697b      	ldr	r3, [r7, #20]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000ca8 	.word	0x20000ca8
 800389c:	20000ca4 	.word	0x20000ca4

080038a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038a6:	e09d      	b.n	80039e4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da18      	bge.n	80038e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	3304      	adds	r3, #4
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	61fb      	str	r3, [r7, #28]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d6:	6850      	ldr	r0, [r2, #4]
 80038d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	4611      	mov	r1, r2
 80038de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db7d      	blt.n	80039e2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	3304      	adds	r3, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe f924 	bl	8001b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038fc:	463b      	mov	r3, r7
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff6c 	bl	80037dc <prvSampleTimeNow>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b09      	cmp	r3, #9
 800390a:	d86b      	bhi.n	80039e4 <prvProcessReceivedCommands+0x144>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <prvProcessReceivedCommands+0x74>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	0800393d 	.word	0x0800393d
 8003918:	0800393d 	.word	0x0800393d
 800391c:	0800393d 	.word	0x0800393d
 8003920:	080039e5 	.word	0x080039e5
 8003924:	08003999 	.word	0x08003999
 8003928:	080039d1 	.word	0x080039d1
 800392c:	0800393d 	.word	0x0800393d
 8003930:	0800393d 	.word	0x0800393d
 8003934:	080039e5 	.word	0x080039e5
 8003938:	08003999 	.word	0x08003999
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	18d1      	adds	r1, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394a:	f7ff ff67 	bl	800381c <prvInsertTimerInActiveList>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d047      	beq.n	80039e4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800395a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d13f      	bne.n	80039e4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	441a      	add	r2, r3
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	2100      	movs	r1, #0
 8003974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003976:	f7ff fe1f 	bl	80035b8 <xTimerGenericCommand>
 800397a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d130      	bne.n	80039e4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	61bb      	str	r3, [r7, #24]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	617b      	str	r3, [r7, #20]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	18d1      	adds	r1, r2, r3
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ca:	f7ff ff27 	bl	800381c <prvInsertTimerInActiveList>
					break;
 80039ce:	e009      	b.n	80039e4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80039da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039dc:	f000 fb6a 	bl	80040b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80039e0:	e000      	b.n	80039e4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80039e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <prvProcessReceivedCommands+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1d39      	adds	r1, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fb6b 	bl	80020c8 <xQueueReceive>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f af57 	bne.w	80038a8 <prvProcessReceivedCommands+0x8>
	}
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	; 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000cac 	.word	0x20000cac

08003a08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a0e:	e045      	b.n	8003a9c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a10:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <prvSwitchTimerLists+0xbc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <prvSwitchTimerLists+0xbc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe f88b 	bl	8001b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d12e      	bne.n	8003a9c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d90e      	bls.n	8003a6e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <prvSwitchTimerLists+0xbc>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fe f834 	bl	8001ad4 <vListInsert>
 8003a6c:	e016      	b.n	8003a9c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	2100      	movs	r1, #0
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff fd9d 	bl	80035b8 <xTimerGenericCommand>
 8003a7e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <prvSwitchTimerLists+0x94>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	603b      	str	r3, [r7, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <prvSwitchTimerLists+0xbc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1b4      	bne.n	8003a10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <prvSwitchTimerLists+0xbc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <prvSwitchTimerLists+0xc0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <prvSwitchTimerLists+0xbc>)
 8003ab2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <prvSwitchTimerLists+0xc0>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000ca4 	.word	0x20000ca4
 8003ac8:	20000ca8 	.word	0x20000ca8

08003acc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ad2:	f000 f92b 	bl	8003d2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <prvCheckForValidListAndQueue+0x60>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d120      	bne.n	8003b20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003ade:	4814      	ldr	r0, [pc, #80]	; (8003b30 <prvCheckForValidListAndQueue+0x64>)
 8003ae0:	f7fd ffaa 	bl	8001a38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ae4:	4813      	ldr	r0, [pc, #76]	; (8003b34 <prvCheckForValidListAndQueue+0x68>)
 8003ae6:	f7fd ffa7 	bl	8001a38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <prvCheckForValidListAndQueue+0x6c>)
 8003aec:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <prvCheckForValidListAndQueue+0x64>)
 8003aee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <prvCheckForValidListAndQueue+0x70>)
 8003af2:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <prvCheckForValidListAndQueue+0x68>)
 8003af4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003af6:	2300      	movs	r3, #0
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <prvCheckForValidListAndQueue+0x74>)
 8003afc:	4a11      	ldr	r2, [pc, #68]	; (8003b44 <prvCheckForValidListAndQueue+0x78>)
 8003afe:	2110      	movs	r1, #16
 8003b00:	200a      	movs	r0, #10
 8003b02:	f7fe f8b1 	bl	8001c68 <xQueueGenericCreateStatic>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <prvCheckForValidListAndQueue+0x60>)
 8003b0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <prvCheckForValidListAndQueue+0x60>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <prvCheckForValidListAndQueue+0x60>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	490b      	ldr	r1, [pc, #44]	; (8003b48 <prvCheckForValidListAndQueue+0x7c>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fcc4 	bl	80024a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b20:	f000 f934 	bl	8003d8c <vPortExitCritical>
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000cac 	.word	0x20000cac
 8003b30:	20000c7c 	.word	0x20000c7c
 8003b34:	20000c90 	.word	0x20000c90
 8003b38:	20000ca4 	.word	0x20000ca4
 8003b3c:	20000ca8 	.word	0x20000ca8
 8003b40:	20000d58 	.word	0x20000d58
 8003b44:	20000cb8 	.word	0x20000cb8
 8003b48:	080043c0 	.word	0x080043c0

08003b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3b04      	subs	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3b04      	subs	r3, #4
 8003b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3b04      	subs	r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <pxPortInitialiseStack+0x54>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b14      	subs	r3, #20
 8003b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3b20      	subs	r3, #32
 8003b92:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b94:	68fb      	ldr	r3, [r7, #12]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	08003ba5 	.word	0x08003ba5

08003ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <prvTaskExitError+0x54>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d00a      	beq.n	8003bce <prvTaskExitError+0x2a>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60fb      	str	r3, [r7, #12]
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <prvTaskExitError+0x28>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	60bb      	str	r3, [r7, #8]
}
 8003be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003be2:	bf00      	nop
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0fc      	beq.n	8003be4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	00000000 	.word	0x00000000

08003c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <pxCurrentTCBConst2>)
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6808      	ldr	r0, [r1, #0]
 8003c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c0a:	f380 8809 	msr	PSP, r0
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f380 8811 	msr	BASEPRI, r0
 8003c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c1e:	4770      	bx	lr

08003c20 <pxCurrentTCBConst2>:
 8003c20:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop

08003c28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c28:	4806      	ldr	r0, [pc, #24]	; (8003c44 <prvPortStartFirstTask+0x1c>)
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	f380 8808 	msr	MSP, r0
 8003c32:	b662      	cpsie	i
 8003c34:	b661      	cpsie	f
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	df00      	svc	0
 8003c40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c42:	bf00      	nop
 8003c44:	e000ed08 	.word	0xe000ed08

08003c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c4e:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <xPortStartScheduler+0xd0>)
 8003c50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003c74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003c78:	2207      	movs	r2, #7
 8003c7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c7c:	e009      	b.n	8003c92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003c86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d0ef      	beq.n	8003c7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d00a      	beq.n	8003cc0 <xPortStartScheduler+0x78>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60bb      	str	r3, [r7, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003cc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003cd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <xPortStartScheduler+0xdc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <xPortStartScheduler+0xdc>)
 8003ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <xPortStartScheduler+0xdc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <xPortStartScheduler+0xdc>)
 8003cf0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cf4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cf6:	f000 f8b9 	bl	8003e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <xPortStartScheduler+0xe0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d00:	f7ff ff92 	bl	8003c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d04:	f7ff f8c2 	bl	8002e8c <vTaskSwitchContext>
	prvTaskExitError();
 8003d08:	f7ff ff4c 	bl	8003ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	e000e400 	.word	0xe000e400
 8003d1c:	20000da8 	.word	0x20000da8
 8003d20:	20000dac 	.word	0x20000dac
 8003d24:	e000ed20 	.word	0xe000ed20
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	607b      	str	r3, [r7, #4]
}
 8003d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <vPortEnterCritical+0x58>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <vPortEnterCritical+0x58>)
 8003d4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <vPortEnterCritical+0x58>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d10f      	bne.n	8003d78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <vPortEnterCritical+0x5c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <vPortEnterCritical+0x4c>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	603b      	str	r3, [r7, #0]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vPortEnterCritical+0x4a>
	}
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2000000c 	.word	0x2000000c
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <vPortExitCritical+0x4c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <vPortExitCritical+0x24>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	607b      	str	r3, [r7, #4]
}
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <vPortExitCritical+0x4c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <vPortExitCritical+0x4c>)
 8003db8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <vPortExitCritical+0x4c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <vPortExitCritical+0x42>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f383 8811 	msr	BASEPRI, r3
}
 8003dcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	00000000 	.word	0x00000000

08003de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003de0:	f3ef 8009 	mrs	r0, PSP
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <pxCurrentTCBConst>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003df0:	6010      	str	r0, [r2, #0]
 8003df2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003df6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dfa:	f380 8811 	msr	BASEPRI, r0
 8003dfe:	f7ff f845 	bl	8002e8c <vTaskSwitchContext>
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8811 	msr	BASEPRI, r0
 8003e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e16:	f380 8809 	msr	PSP, r0
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	4770      	bx	lr

08003e20 <pxCurrentTCBConst>:
 8003e20:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop

08003e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	607b      	str	r3, [r7, #4]
}
 8003e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e42:	f7fe ff65 	bl	8002d10 <xTaskIncrementTick>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <SysTick_Handler+0x40>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	2300      	movs	r3, #0
 8003e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f383 8811 	msr	BASEPRI, r3
}
 8003e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <vPortSetupTimerInterrupt+0x30>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <vPortSetupTimerInterrupt+0x34>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <vPortSetupTimerInterrupt+0x38>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <vPortSetupTimerInterrupt+0x3c>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	4a08      	ldr	r2, [pc, #32]	; (8003eac <vPortSetupTimerInterrupt+0x40>)
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e8e:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <vPortSetupTimerInterrupt+0x30>)
 8003e90:	2207      	movs	r2, #7
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	e000e010 	.word	0xe000e010
 8003ea0:	e000e018 	.word	0xe000e018
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	10624dd3 	.word	0x10624dd3
 8003eac:	e000e014 	.word	0xe000e014

08003eb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003eb6:	f3ef 8305 	mrs	r3, IPSR
 8003eba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d914      	bls.n	8003eec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ec2:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <vPortValidateInterruptPriority+0x6c>)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <vPortValidateInterruptPriority+0x70>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	7afa      	ldrb	r2, [r7, #11]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d20a      	bcs.n	8003eec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	607b      	str	r3, [r7, #4]
}
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <vPortValidateInterruptPriority+0x74>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <vPortValidateInterruptPriority+0x78>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d90a      	bls.n	8003f12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	603b      	str	r3, [r7, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <vPortValidateInterruptPriority+0x60>
	}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	e000e3f0 	.word	0xe000e3f0
 8003f20:	20000da8 	.word	0x20000da8
 8003f24:	e000ed0c 	.word	0xe000ed0c
 8003f28:	20000dac 	.word	0x20000dac

08003f2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f38:	f7fe fe30 	bl	8002b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f3c:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <pvPortMalloc+0x174>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f44:	f000 f910 	bl	8004168 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f48:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <pvPortMalloc+0x178>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 808e 	bne.w	8004072 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01d      	beq.n	8003f98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d014      	beq.n	8003f98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f023 0307 	bic.w	r3, r3, #7
 8003f74:	3308      	adds	r3, #8
 8003f76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <pvPortMalloc+0x6c>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	617b      	str	r3, [r7, #20]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d069      	beq.n	8004072 <pvPortMalloc+0x146>
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <pvPortMalloc+0x17c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d864      	bhi.n	8004072 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fa8:	4b40      	ldr	r3, [pc, #256]	; (80040ac <pvPortMalloc+0x180>)
 8003faa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <pvPortMalloc+0x180>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb2:	e004      	b.n	8003fbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d903      	bls.n	8003fd0 <pvPortMalloc+0xa4>
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f1      	bne.n	8003fb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fd0:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <pvPortMalloc+0x174>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d04b      	beq.n	8004072 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2208      	movs	r2, #8
 8003fe0:	4413      	add	r3, r2
 8003fe2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	1ad2      	subs	r2, r2, r3
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d91f      	bls.n	800403c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <pvPortMalloc+0xf8>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	613b      	str	r3, [r7, #16]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004036:	69b8      	ldr	r0, [r7, #24]
 8004038:	f000 f8f8 	bl	800422c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <pvPortMalloc+0x17c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <pvPortMalloc+0x17c>)
 8004048:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <pvPortMalloc+0x17c>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <pvPortMalloc+0x184>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d203      	bcs.n	800405e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <pvPortMalloc+0x17c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <pvPortMalloc+0x184>)
 800405c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <pvPortMalloc+0x178>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	431a      	orrs	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004072:	f7fe fda1 	bl	8002bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <pvPortMalloc+0x16a>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <pvPortMalloc+0x168>
	return pvReturn;
 8004096:	69fb      	ldr	r3, [r7, #28]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200019b8 	.word	0x200019b8
 80040a4:	200019c4 	.word	0x200019c4
 80040a8:	200019bc 	.word	0x200019bc
 80040ac:	200019b0 	.word	0x200019b0
 80040b0:	200019c0 	.word	0x200019c0

080040b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d048      	beq.n	8004158 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040c6:	2308      	movs	r3, #8
 80040c8:	425b      	negs	r3, r3
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <vPortFree+0xac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <vPortFree+0x44>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	60fb      	str	r3, [r7, #12]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <vPortFree+0x62>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	60bb      	str	r3, [r7, #8]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <vPortFree+0xac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d019      	beq.n	8004158 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d115      	bne.n	8004158 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <vPortFree+0xac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	43db      	mvns	r3, r3
 8004136:	401a      	ands	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800413c:	f7fe fd2e 	bl	8002b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <vPortFree+0xb0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4413      	add	r3, r2
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <vPortFree+0xb0>)
 800414c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800414e:	6938      	ldr	r0, [r7, #16]
 8004150:	f000 f86c 	bl	800422c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004154:	f7fe fd30 	bl	8002bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004158:	bf00      	nop
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200019c4 	.word	0x200019c4
 8004164:	200019bc 	.word	0x200019bc

08004168 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800416e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004172:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <prvHeapInit+0xac>)
 8004176:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3307      	adds	r3, #7
 8004186:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <prvHeapInit+0xac>)
 8004198:	4413      	add	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <prvHeapInit+0xb0>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <prvHeapInit+0xb0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041b4:	2208      	movs	r2, #8
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a15      	ldr	r2, [pc, #84]	; (800421c <prvHeapInit+0xb4>)
 80041c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <prvHeapInit+0xb4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <prvHeapInit+0xb4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvHeapInit+0xb4>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <prvHeapInit+0xb8>)
 80041f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a09      	ldr	r2, [pc, #36]	; (8004224 <prvHeapInit+0xbc>)
 80041fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <prvHeapInit+0xc0>)
 8004202:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000db0 	.word	0x20000db0
 8004218:	200019b0 	.word	0x200019b0
 800421c:	200019b8 	.word	0x200019b8
 8004220:	200019c0 	.word	0x200019c0
 8004224:	200019bc 	.word	0x200019bc
 8004228:	200019c4 	.word	0x200019c4

0800422c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <prvInsertBlockIntoFreeList+0xa8>)
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e002      	b.n	8004240 <prvInsertBlockIntoFreeList+0x14>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	429a      	cmp	r2, r3
 8004248:	d8f7      	bhi.n	800423a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4413      	add	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d108      	bne.n	800426e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	441a      	add	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d118      	bne.n	80042b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <prvInsertBlockIntoFreeList+0xac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d00d      	beq.n	80042aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e008      	b.n	80042bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <prvInsertBlockIntoFreeList+0xac>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e003      	b.n	80042bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d002      	beq.n	80042ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	200019b0 	.word	0x200019b0
 80042d8:	200019b8 	.word	0x200019b8

080042dc <__libc_init_array>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	2600      	movs	r6, #0
 80042e0:	4d0c      	ldr	r5, [pc, #48]	; (8004314 <__libc_init_array+0x38>)
 80042e2:	4c0d      	ldr	r4, [pc, #52]	; (8004318 <__libc_init_array+0x3c>)
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	42a6      	cmp	r6, r4
 80042ea:	d109      	bne.n	8004300 <__libc_init_array+0x24>
 80042ec:	f000 f830 	bl	8004350 <_init>
 80042f0:	2600      	movs	r6, #0
 80042f2:	4d0a      	ldr	r5, [pc, #40]	; (800431c <__libc_init_array+0x40>)
 80042f4:	4c0a      	ldr	r4, [pc, #40]	; (8004320 <__libc_init_array+0x44>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	42a6      	cmp	r6, r4
 80042fc:	d105      	bne.n	800430a <__libc_init_array+0x2e>
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	f855 3b04 	ldr.w	r3, [r5], #4
 8004304:	4798      	blx	r3
 8004306:	3601      	adds	r6, #1
 8004308:	e7ee      	b.n	80042e8 <__libc_init_array+0xc>
 800430a:	f855 3b04 	ldr.w	r3, [r5], #4
 800430e:	4798      	blx	r3
 8004310:	3601      	adds	r6, #1
 8004312:	e7f2      	b.n	80042fa <__libc_init_array+0x1e>
 8004314:	080043e0 	.word	0x080043e0
 8004318:	080043e0 	.word	0x080043e0
 800431c:	080043e0 	.word	0x080043e0
 8004320:	080043e4 	.word	0x080043e4

08004324 <memcpy>:
 8004324:	440a      	add	r2, r1
 8004326:	4291      	cmp	r1, r2
 8004328:	f100 33ff 	add.w	r3, r0, #4294967295
 800432c:	d100      	bne.n	8004330 <memcpy+0xc>
 800432e:	4770      	bx	lr
 8004330:	b510      	push	{r4, lr}
 8004332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004336:	4291      	cmp	r1, r2
 8004338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800433c:	d1f9      	bne.n	8004332 <memcpy+0xe>
 800433e:	bd10      	pop	{r4, pc}

08004340 <memset>:
 8004340:	4603      	mov	r3, r0
 8004342:	4402      	add	r2, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <_init>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr

0800435c <_fini>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr
