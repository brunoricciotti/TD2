
LED_FREERTOS_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf4  08003cf4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf4  08003cf4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf4  08003cf4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001050  20000010  08003d0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001060  08003d0c  00021060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010047  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9b  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00032b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00033c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018734  00000000  00000000  00034c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112fe  00000000  00000000  0004d38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b61  00000000  00000000  0005e68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f01eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000f023c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c94 	.word	0x08003c94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003c94 	.word	0x08003c94

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fab3 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8b3 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f91f 	bl	80003d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f8f3 	bl	800037c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  if(!(mutex = xSemaphoreCreateMutex()))
 8000196:	2001      	movs	r0, #1
 8000198:	f001 fe8d 	bl	8001eb6 <xQueueCreateMutex>
 800019c:	4603      	mov	r3, r0
 800019e:	4a14      	ldr	r2, [pc, #80]	; (80001f0 <main+0x70>)
 80001a0:	6013      	str	r3, [r2, #0]
 80001a2:	4b13      	ldr	r3, [pc, #76]	; (80001f0 <main+0x70>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d101      	bne.n	80001ae <main+0x2e>
	{
		findelprograma();
 80001aa:	f000 f889 	bl	80002c0 <findelprograma>
	}



  if(xTaskCreate(tarea_rojo,
 80001ae:	2300      	movs	r3, #0
 80001b0:	9301      	str	r3, [sp, #4]
 80001b2:	2301      	movs	r3, #1
 80001b4:	9300      	str	r3, [sp, #0]
 80001b6:	2300      	movs	r3, #0
 80001b8:	2280      	movs	r2, #128	; 0x80
 80001ba:	490e      	ldr	r1, [pc, #56]	; (80001f4 <main+0x74>)
 80001bc:	480e      	ldr	r0, [pc, #56]	; (80001f8 <main+0x78>)
 80001be:	f002 f9fa 	bl	80025b6 <xTaskCreate>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d001      	beq.n	80001cc <main+0x4c>
   		  	  	  "tarea rojo",
				  128,
				  NULL,
				  1,
				  NULL)!= pdPASS) findelprograma();
 80001c8:	f000 f87a 	bl	80002c0 <findelprograma>

  if(xTaskCreate(tarea_verde,
 80001cc:	2300      	movs	r3, #0
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	2301      	movs	r3, #1
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2300      	movs	r3, #0
 80001d6:	2280      	movs	r2, #128	; 0x80
 80001d8:	4908      	ldr	r1, [pc, #32]	; (80001fc <main+0x7c>)
 80001da:	4809      	ldr	r0, [pc, #36]	; (8000200 <main+0x80>)
 80001dc:	f002 f9eb 	bl	80025b6 <xTaskCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d001      	beq.n	80001ea <main+0x6a>
  		  	  	  "tarea verde",
				  128,
				  NULL,
				  1,
				  NULL)!= pdPASS) findelprograma();
 80001e6:	f000 f86b 	bl	80002c0 <findelprograma>


  /* Start scheduler */
  osKernelStart();
 80001ea:	f001 fccf 	bl	8001b8c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ee:	e7fe      	b.n	80001ee <main+0x6e>
 80001f0:	200002c4 	.word	0x200002c4
 80001f4:	08003cac 	.word	0x08003cac
 80001f8:	08000205 	.word	0x08000205
 80001fc:	08003cb8 	.word	0x08003cb8
 8000200:	08000261 	.word	0x08000261

08000204 <tarea_rojo>:
  /* USER CODE END 3 */
}


void tarea_rojo()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(mutex,250) == pdTRUE){
 8000208:	4b13      	ldr	r3, [pc, #76]	; (8000258 <tarea_rojo+0x54>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	21fa      	movs	r1, #250	; 0xfa
 800020e:	4618      	mov	r0, r3
 8000210:	f001 ff68 	bl	80020e4 <xQueueSemaphoreTake>
 8000214:	4603      	mov	r3, r0
 8000216:	2b01      	cmp	r3, #1
 8000218:	d11b      	bne.n	8000252 <tarea_rojo+0x4e>

	for(;;){


			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	480f      	ldr	r0, [pc, #60]	; (800025c <tarea_rojo+0x58>)
 8000220:	f000 fd13 	bl	8000c4a <HAL_GPIO_WritePin>

			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){//entra si el pulsador 2 esta presionado
 8000224:	2101      	movs	r1, #1
 8000226:	480d      	ldr	r0, [pc, #52]	; (800025c <tarea_rojo+0x58>)
 8000228:	f000 fcf8 	bl	8000c1c <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1f3      	bne.n	800021a <tarea_rojo+0x16>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);//apago el led
 8000232:	2200      	movs	r2, #0
 8000234:	2180      	movs	r1, #128	; 0x80
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <tarea_rojo+0x58>)
 8000238:	f000 fd07 	bl	8000c4a <HAL_GPIO_WritePin>
				xSemaphoreGive(mutex);
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <tarea_rojo+0x54>)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	f001 fe4f 	bl	8001ee8 <xQueueGenericSend>
				vTaskDelay(1/portTICK_RATE_MS);//duerme 1ms
 800024a:	2001      	movs	r0, #1
 800024c:	f002 fae2 	bl	8002814 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 8000250:	e7e3      	b.n	800021a <tarea_rojo+0x16>
			}
		}
	}
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	200002c4 	.word	0x200002c4
 800025c:	40010c00 	.word	0x40010c00

08000260 <tarea_verde>:


void tarea_verde()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(mutex,250) == pdTRUE){
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <tarea_verde+0x58>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	21fa      	movs	r1, #250	; 0xfa
 800026a:	4618      	mov	r0, r3
 800026c:	f001 ff3a 	bl	80020e4 <xQueueSemaphoreTake>
 8000270:	4603      	mov	r3, r0
 8000272:	2b01      	cmp	r3, #1
 8000274:	d11d      	bne.n	80002b2 <tarea_verde+0x52>

	for(;;){


			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027c:	480f      	ldr	r0, [pc, #60]	; (80002bc <tarea_verde+0x5c>)
 800027e:	f000 fce4 	bl	8000c4a <HAL_GPIO_WritePin>

			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){//entra si el pulsador 1 esta presionado
 8000282:	2102      	movs	r1, #2
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <tarea_verde+0x5c>)
 8000286:	f000 fcc9 	bl	8000c1c <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1f2      	bne.n	8000276 <tarea_verde+0x16>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,GPIO_PIN_RESET);//apago el led
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000296:	4809      	ldr	r0, [pc, #36]	; (80002bc <tarea_verde+0x5c>)
 8000298:	f000 fcd7 	bl	8000c4a <HAL_GPIO_WritePin>
				xSemaphoreGive(mutex);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <tarea_verde+0x58>)
 800029e:	6818      	ldr	r0, [r3, #0]
 80002a0:	2300      	movs	r3, #0
 80002a2:	2200      	movs	r2, #0
 80002a4:	2100      	movs	r1, #0
 80002a6:	f001 fe1f 	bl	8001ee8 <xQueueGenericSend>
				vTaskDelay(1/portTICK_RATE_MS);//duerme 1ms
 80002aa:	2001      	movs	r0, #1
 80002ac:	f002 fab2 	bl	8002814 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,GPIO_PIN_SET);
 80002b0:	e7e1      	b.n	8000276 <tarea_verde+0x16>
			}
		}
	}
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200002c4 	.word	0x200002c4
 80002bc:	40010c00 	.word	0x40010c00

080002c0 <findelprograma>:



void findelprograma(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
}
 80002c8:	bf00      	nop
	volatile int32_t i;
	__disable_irq();
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <findelprograma+0x2c>)
 80002d0:	f000 fcd3 	bl	8000c7a <HAL_GPIO_TogglePin>
		for(i=0;i<200000; i++);
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	e002      	b.n	80002e0 <findelprograma+0x20>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a03      	ldr	r2, [pc, #12]	; (80002f0 <findelprograma+0x30>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	ddf8      	ble.n	80002da <findelprograma+0x1a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002e8:	e7ef      	b.n	80002ca <findelprograma+0xa>
 80002ea:	bf00      	nop
 80002ec:	40011000 	.word	0x40011000
 80002f0:	00030d3f 	.word	0x00030d3f

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	; 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fcbe 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000316:	2301      	movs	r3, #1
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	2302      	movs	r3, #2
 800032a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000332:	2300      	movs	r3, #0
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fcb6 	bl	8000cac <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000346:	f000 f8ad 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f000 ff24 	bl	80011b0 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800036e:	f000 f899 	bl	80004a4 <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3740      	adds	r7, #64	; 0x40
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <MX_USART2_UART_Init+0x50>)
 8000384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003b4:	f001 fb0e 	bl	80019d4 <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003be:	f000 f871 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000280 	.word	0x20000280
 80003cc:	40004400 	.word	0x40004400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b24      	ldr	r3, [pc, #144]	; (8000478 <MX_GPIO_Init+0xa8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a23      	ldr	r2, [pc, #140]	; (8000478 <MX_GPIO_Init+0xa8>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b21      	ldr	r3, [pc, #132]	; (8000478 <MX_GPIO_Init+0xa8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <MX_GPIO_Init+0xa8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1d      	ldr	r2, [pc, #116]	; (8000478 <MX_GPIO_Init+0xa8>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_GPIO_Init+0xa8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_GPIO_Init+0xa8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a17      	ldr	r2, [pc, #92]	; (8000478 <MX_GPIO_Init+0xa8>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_GPIO_Init+0xa8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <MX_GPIO_Init+0xac>)
 8000434:	f000 fc09 	bl	8000c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000438:	2303      	movs	r3, #3
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000440:	2301      	movs	r3, #1
 8000442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <MX_GPIO_Init+0xac>)
 800044c:	f000 fa62 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000450:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_GPIO_Init+0xac>)
 800046a:	f000 fa53 	bl	8000914 <HAL_GPIO_Init>

}
 800046e:	bf00      	nop
 8000470:	3720      	adds	r7, #32
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40010c00 	.word	0x40010c00

08000480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d101      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000492:	f000 f943 	bl	800071c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40012c00 	.word	0x40012c00

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1b      	ldr	r2, [pc, #108]	; (800059c <HAL_UART_MspInit+0x88>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d12f      	bne.n	8000594 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <HAL_UART_MspInit+0x8c>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <HAL_UART_MspInit+0x8c>)
 800053a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053e:	61d3      	str	r3, [r2, #28]
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_UART_MspInit+0x8c>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_UART_MspInit+0x8c>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <HAL_UART_MspInit+0x8c>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_UART_MspInit+0x8c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000564:	2304      	movs	r3, #4
 8000566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000568:	2302      	movs	r3, #2
 800056a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056c:	2303      	movs	r3, #3
 800056e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <HAL_UART_MspInit+0x90>)
 8000578:	f000 f9cc 	bl	8000914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800057c:	2308      	movs	r3, #8
 800057e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <HAL_UART_MspInit+0x90>)
 8000590:	f000 f9c0 	bl	8000914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40004400 	.word	0x40004400
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	2019      	movs	r0, #25
 80005be:	f000 f97e 	bl	80008be <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005c2:	2019      	movs	r0, #25
 80005c4:	f000 f997 	bl	80008f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <HAL_InitTick+0x9c>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <HAL_InitTick+0x9c>)
 80005ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <HAL_InitTick+0x9c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005e0:	f107 0210 	add.w	r2, r7, #16
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff5a 	bl	80014a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005f0:	f000 ff44 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 80005f4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <HAL_InitTick+0xa0>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	3b01      	subs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_InitTick+0xa4>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <HAL_InitTick+0xa8>)
 8000608:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_InitTick+0xa4>)
 800060c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000610:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_InitTick+0xa4>)
 8000614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000616:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_InitTick+0xa4>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_InitTick+0xa4>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <HAL_InitTick+0xa4>)
 8000626:	f000 ff8b 	bl	8001540 <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d104      	bne.n	800063a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <HAL_InitTick+0xa4>)
 8000632:	f000 ffdd 	bl	80015f0 <HAL_TIM_Base_Start_IT>
 8000636:	4603      	mov	r3, r0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3730      	adds	r7, #48	; 0x30
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	431bde83 	.word	0x431bde83
 800064c:	200002c8 	.word	0x200002c8
 8000650:	40012c00 	.word	0x40012c00

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <HardFault_Handler+0x4>

08000666 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <BusFault_Handler+0x4>

08000672 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <UsageFault_Handler+0x4>

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <TIM1_UP_IRQHandler+0x10>)
 800068a:	f001 f803 	bl	8001694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200002c8 	.word	0x200002c8

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ca:	f7ff ffe5 	bl	8000698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ce:	f003 faa7 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd55 	bl	8000180 <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006e0:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 80006e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006e8:	20001060 	.word	0x20001060

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f8d1 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff4e 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fed0 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	20000310 	.word	0x20000310

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000310 	.word	0x20000310

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff4f 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff64 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ffb2 	bl	8000844 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff81 	bl	80007f0 <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff57 	bl	80007b8 <__NVIC_EnableIRQ>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b08b      	sub	sp, #44	; 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e169      	b.n	8000bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000928:	2201      	movs	r2, #1
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	429a      	cmp	r2, r3
 8000942:	f040 8158 	bne.w	8000bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a9a      	ldr	r2, [pc, #616]	; (8000bb4 <HAL_GPIO_Init+0x2a0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d05e      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000950:	4a98      	ldr	r2, [pc, #608]	; (8000bb4 <HAL_GPIO_Init+0x2a0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d875      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000956:	4a98      	ldr	r2, [pc, #608]	; (8000bb8 <HAL_GPIO_Init+0x2a4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d058      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 800095c:	4a96      	ldr	r2, [pc, #600]	; (8000bb8 <HAL_GPIO_Init+0x2a4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d86f      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000962:	4a96      	ldr	r2, [pc, #600]	; (8000bbc <HAL_GPIO_Init+0x2a8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d052      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000968:	4a94      	ldr	r2, [pc, #592]	; (8000bbc <HAL_GPIO_Init+0x2a8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d869      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800096e:	4a94      	ldr	r2, [pc, #592]	; (8000bc0 <HAL_GPIO_Init+0x2ac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d04c      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000974:	4a92      	ldr	r2, [pc, #584]	; (8000bc0 <HAL_GPIO_Init+0x2ac>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d863      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800097a:	4a92      	ldr	r2, [pc, #584]	; (8000bc4 <HAL_GPIO_Init+0x2b0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d046      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
 8000980:	4a90      	ldr	r2, [pc, #576]	; (8000bc4 <HAL_GPIO_Init+0x2b0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d85d      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 8000986:	2b12      	cmp	r3, #18
 8000988:	d82a      	bhi.n	80009e0 <HAL_GPIO_Init+0xcc>
 800098a:	2b12      	cmp	r3, #18
 800098c:	d859      	bhi.n	8000a42 <HAL_GPIO_Init+0x12e>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <HAL_GPIO_Init+0x80>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	08000a0f 	.word	0x08000a0f
 8000998:	080009e9 	.word	0x080009e9
 800099c:	080009fb 	.word	0x080009fb
 80009a0:	08000a3d 	.word	0x08000a3d
 80009a4:	08000a43 	.word	0x08000a43
 80009a8:	08000a43 	.word	0x08000a43
 80009ac:	08000a43 	.word	0x08000a43
 80009b0:	08000a43 	.word	0x08000a43
 80009b4:	08000a43 	.word	0x08000a43
 80009b8:	08000a43 	.word	0x08000a43
 80009bc:	08000a43 	.word	0x08000a43
 80009c0:	08000a43 	.word	0x08000a43
 80009c4:	08000a43 	.word	0x08000a43
 80009c8:	08000a43 	.word	0x08000a43
 80009cc:	08000a43 	.word	0x08000a43
 80009d0:	08000a43 	.word	0x08000a43
 80009d4:	08000a43 	.word	0x08000a43
 80009d8:	080009f1 	.word	0x080009f1
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	4a79      	ldr	r2, [pc, #484]	; (8000bc8 <HAL_GPIO_Init+0x2b4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d013      	beq.n	8000a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e6:	e02c      	b.n	8000a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	623b      	str	r3, [r7, #32]
          break;
 80009ee:	e029      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	3304      	adds	r3, #4
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e024      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	3308      	adds	r3, #8
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e01f      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	330c      	adds	r3, #12
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e01a      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d102      	bne.n	8000a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a16:	2304      	movs	r3, #4
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e013      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	611a      	str	r2, [r3, #16]
          break;
 8000a2e:	e009      	b.n	8000a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a30:	2308      	movs	r3, #8
 8000a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	615a      	str	r2, [r3, #20]
          break;
 8000a3a:	e003      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x130>
          break;
 8000a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	2bff      	cmp	r3, #255	; 0xff
 8000a48:	d801      	bhi.n	8000a4e <HAL_GPIO_Init+0x13a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	e001      	b.n	8000a52 <HAL_GPIO_Init+0x13e>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3304      	adds	r3, #4
 8000a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2bff      	cmp	r3, #255	; 0xff
 8000a58:	d802      	bhi.n	8000a60 <HAL_GPIO_Init+0x14c>
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x152>
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	3b08      	subs	r3, #8
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	6a39      	ldr	r1, [r7, #32]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 80b1 	beq.w	8000bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a94:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aac:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_GPIO_Init+0x2c0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d013      	beq.n	8000b00 <HAL_GPIO_Init+0x1ec>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a3f      	ldr	r2, [pc, #252]	; (8000bd8 <HAL_GPIO_Init+0x2c4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d00d      	beq.n	8000afc <HAL_GPIO_Init+0x1e8>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <HAL_GPIO_Init+0x2c8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x1e4>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3d      	ldr	r2, [pc, #244]	; (8000be0 <HAL_GPIO_Init+0x2cc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <HAL_GPIO_Init+0x1e0>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e004      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000b00:	2300      	movs	r3, #0
 8000b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b12:	492f      	ldr	r1, [pc, #188]	; (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d006      	beq.n	8000b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	492c      	ldr	r1, [pc, #176]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	600b      	str	r3, [r1, #0]
 8000b38:	e006      	b.n	8000b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	4928      	ldr	r1, [pc, #160]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4922      	ldr	r1, [pc, #136]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
 8000b60:	e006      	b.n	8000b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	491e      	ldr	r1, [pc, #120]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	4918      	ldr	r1, [pc, #96]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	608b      	str	r3, [r1, #8]
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4914      	ldr	r1, [pc, #80]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d021      	beq.n	8000be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	490e      	ldr	r1, [pc, #56]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	60cb      	str	r3, [r1, #12]
 8000bb0:	e021      	b.n	8000bf6 <HAL_GPIO_Init+0x2e2>
 8000bb2:	bf00      	nop
 8000bb4:	10320000 	.word	0x10320000
 8000bb8:	10310000 	.word	0x10310000
 8000bbc:	10220000 	.word	0x10220000
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	10120000 	.word	0x10120000
 8000bc8:	10110000 	.word	0x10110000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40011400 	.word	0x40011400
 8000be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_GPIO_Init+0x304>)
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4909      	ldr	r1, [pc, #36]	; (8000c18 <HAL_GPIO_Init+0x304>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f47f ae8e 	bne.w	8000928 <HAL_GPIO_Init+0x14>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	372c      	adds	r7, #44	; 0x2c
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c5a:	787b      	ldrb	r3, [r7, #1]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c60:	887a      	ldrh	r2, [r7, #2]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c66:	e003      	b.n	8000c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	041a      	lsls	r2, r3, #16
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c8c:	887a      	ldrh	r2, [r7, #2]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	041a      	lsls	r2, r3, #16
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	611a      	str	r2, [r3, #16]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e272      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8087 	beq.w	8000dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ccc:	4b92      	ldr	r3, [pc, #584]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d00c      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	4b8f      	ldr	r3, [pc, #572]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d112      	bne.n	8000d0a <HAL_RCC_OscConfig+0x5e>
 8000ce4:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf0:	d10b      	bne.n	8000d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf2:	4b89      	ldr	r3, [pc, #548]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d06c      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d168      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e24c      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d12:	d106      	bne.n	8000d22 <HAL_RCC_OscConfig+0x76>
 8000d14:	4b80      	ldr	r3, [pc, #512]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a7f      	ldr	r2, [pc, #508]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e02e      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x98>
 8000d2a:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a7a      	ldr	r2, [pc, #488]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a77      	ldr	r2, [pc, #476]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01d      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0xbc>
 8000d4e:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a71      	ldr	r2, [pc, #452]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a6e      	ldr	r2, [pc, #440]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d68:	4b6b      	ldr	r3, [pc, #428]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a6a      	ldr	r2, [pc, #424]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a67      	ldr	r2, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fcda 	bl	8000740 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fcd6 	bl	8000740 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e200      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0xe4>
 8000dae:	e014      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcc6 	bl	8000740 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fcc2 	bl	8000740 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1ec      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x10c>
 8000dd6:	e000      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d063      	beq.n	8000eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de6:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d11c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x18c>
 8000dfe:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <HAL_RCC_OscConfig+0x176>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e1c0      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e22:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4939      	ldr	r1, [pc, #228]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	e03a      	b.n	8000eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d020      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_RCC_OscConfig+0x270>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc7b 	bl	8000740 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fc77 	bl	8000740 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e1a1      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4927      	ldr	r1, [pc, #156]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e015      	b.n	8000eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_RCC_OscConfig+0x270>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fc5a 	bl	8000740 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc56 	bl	8000740 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e180      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f0      	bne.n	8000e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d03a      	beq.n	8000f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d019      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_RCC_OscConfig+0x274>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fc3a 	bl	8000740 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc36 	bl	8000740 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e160      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 fb08 	bl	8001504 <RCC_Delay>
 8000ef4:	e01c      	b.n	8000f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fc20 	bl	8000740 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f02:	e00f      	b.n	8000f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff fc1c 	bl	8000740 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d908      	bls.n	8000f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e146      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	42420000 	.word	0x42420000
 8000f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f24:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1e9      	bne.n	8000f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a6 	beq.w	800108a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10d      	bne.n	8000f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a87      	ldr	r2, [pc, #540]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b82      	ldr	r3, [pc, #520]	; (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7e      	ldr	r2, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fbdd 	bl	8000740 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8a:	f7ff fbd9 	bl	8000740 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b64      	cmp	r3, #100	; 0x64
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e103      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	4b75      	ldr	r3, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x4c8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x312>
 8000fb0:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	e02d      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x334>
 8000fc6:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a69      	ldr	r2, [pc, #420]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a66      	ldr	r2, [pc, #408]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	e01c      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d10c      	bne.n	8001002 <HAL_RCC_OscConfig+0x356>
 8000fe8:	4b61      	ldr	r3, [pc, #388]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a60      	ldr	r2, [pc, #384]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	4b5e      	ldr	r3, [pc, #376]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a5d      	ldr	r2, [pc, #372]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	e00b      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8001002:	4b5b      	ldr	r3, [pc, #364]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a5a      	ldr	r2, [pc, #360]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b58      	ldr	r3, [pc, #352]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a57      	ldr	r2, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fb8d 	bl	8000740 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fb89 	bl	8000740 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0b1      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0ee      	beq.n	800102a <HAL_RCC_OscConfig+0x37e>
 800104c:	e014      	b.n	8001078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104e:	f7ff fb77 	bl	8000740 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fb73 	bl	8000740 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f241 3288 	movw	r2, #5000	; 0x1388
 8001064:	4293      	cmp	r3, r2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e09b      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ee      	bne.n	8001056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d105      	bne.n	800108a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8087 	beq.w	80011a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001094:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d061      	beq.n	8001164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d146      	bne.n	8001136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_RCC_OscConfig+0x4cc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fb47 	bl	8000740 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fb43 	bl	8000740 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e06d      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f0      	bne.n	80010b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d108      	bne.n	80010f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	4921      	ldr	r1, [pc, #132]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a19      	ldr	r1, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	430b      	orrs	r3, r1
 8001102:	491b      	ldr	r1, [pc, #108]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_RCC_OscConfig+0x4cc>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fb17 	bl	8000740 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001116:	f7ff fb13 	bl	8000740 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e03d      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x46a>
 8001134:	e035      	b.n	80011a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_RCC_OscConfig+0x4cc>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fb00 	bl	8000740 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fafc 	bl	8000740 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e026      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x498>
 8001162:	e01e      	b.n	80011a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d107      	bne.n	800117c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e019      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
 8001170:	40021000 	.word	0x40021000
 8001174:	40007000 	.word	0x40007000
 8001178:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_OscConfig+0x500>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	429a      	cmp	r2, r3
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	429a      	cmp	r2, r3
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0d0      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d910      	bls.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 0207 	bic.w	r2, r3, #7
 80011da:	4965      	ldr	r1, [pc, #404]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e0b8      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a58      	ldr	r2, [pc, #352]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800122e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001230:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	494d      	ldr	r1, [pc, #308]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d040      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d115      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e07f      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e073      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06b      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4936      	ldr	r1, [pc, #216]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fa4e 	bl	8000740 <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	e00a      	b.n	80012be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fa4a 	bl	8000740 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e053      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 020c 	and.w	r2, r3, #12
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1eb      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d210      	bcs.n	8001300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4922      	ldr	r1, [pc, #136]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e032      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133e:	f000 f821 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 8001342:	4602      	mov	r2, r0
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	490a      	ldr	r1, [pc, #40]	; (8001378 <HAL_RCC_ClockConfig+0x1c8>)
 8001350:	5ccb      	ldrb	r3, [r1, r3]
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_RCC_ClockConfig+0x1cc>)
 8001358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_RCC_ClockConfig+0x1d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f922 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000
 8001374:	40021000 	.word	0x40021000
 8001378:	08003cdc 	.word	0x08003cdc
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001384:	b490      	push	{r4, r7}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_RCC_GetSysClockFreq+0xac>)
 800138c:	1d3c      	adds	r4, r7, #4
 800138e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001394:	f240 2301 	movw	r3, #513	; 0x201
 8001398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x40>
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x46>
 80013c2:	e02b      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013c6:	623b      	str	r3, [r7, #32]
      break;
 80013c8:	e02b      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	0c9b      	lsrs	r3, r3, #18
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3328      	adds	r3, #40	; 0x28
 80013d4:	443b      	add	r3, r7
 80013d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	3328      	adds	r3, #40	; 0x28
 80013f2:	443b      	add	r3, r7
 80013f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013fe:	fb03 f202 	mul.w	r2, r3, r2
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e004      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	623b      	str	r3, [r7, #32]
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb4>)
 800141e:	623b      	str	r3, [r7, #32]
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	6a3b      	ldr	r3, [r7, #32]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc90      	pop	{r4, r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	08003cc4 	.word	0x08003cc4
 8001434:	40021000 	.word	0x40021000
 8001438:	007a1200 	.word	0x007a1200
 800143c:	003d0900 	.word	0x003d0900

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_RCC_GetHCLKFreq+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff2 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	08003cec 	.word	0x08003cec

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001480:	f7ff ffde 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0adb      	lsrs	r3, r3, #11
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	08003cec 	.word	0x08003cec

080014a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	220f      	movs	r2, #15
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0207 	and.w	r2, r3, #7
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40022000 	.word	0x40022000

08001504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <RCC_Delay+0x34>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <RCC_Delay+0x38>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0a5b      	lsrs	r3, r3, #9
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001520:	bf00      	nop
  }
  while (Delay --);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	60fa      	str	r2, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f9      	bne.n	8001520 <RCC_Delay+0x1c>
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000
 800153c:	10624dd3 	.word	0x10624dd3

08001540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e041      	b.n	80015d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f839 	bl	80015de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3304      	adds	r3, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f000 f9b4 	bl	80018ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d001      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e03a      	b.n	800167e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_TIM_Base_Start_IT+0x98>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00e      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001632:	d009      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_TIM_Base_Start_IT+0x9c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d004      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_TIM_Base_Start_IT+0xa0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b06      	cmp	r3, #6
 8001658:	d010      	beq.n	800167c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166a:	e007      	b.n	800167c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40012c00 	.word	0x40012c00
 800168c:	40000400 	.word	0x40000400
 8001690:	40000800 	.word	0x40000800

08001694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d122      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d11b      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0202 	mvn.w	r2, #2
 80016c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8ed 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 80016dc:	e005      	b.n	80016ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8e0 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8ef 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d122      	bne.n	8001744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b04      	cmp	r3, #4
 800170a:	d11b      	bne.n	8001744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0204 	mvn.w	r2, #4
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8c3 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8b6 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8c5 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b08      	cmp	r3, #8
 8001750:	d122      	bne.n	8001798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b08      	cmp	r3, #8
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0208 	mvn.w	r2, #8
 8001768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2204      	movs	r2, #4
 800176e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f899 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f88c 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f89b 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d122      	bne.n	80017ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d11b      	bne.n	80017ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0210 	mvn.w	r2, #16
 80017bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2208      	movs	r2, #8
 80017c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f86f 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 80017d8:	e005      	b.n	80017e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f862 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f871 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10e      	bne.n	8001818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0201 	mvn.w	r2, #1
 8001810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fe34 	bl	8000480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b80      	cmp	r3, #128	; 0x80
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001830:	2b80      	cmp	r3, #128	; 0x80
 8001832:	d107      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800183c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8bf 	bl	80019c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d107      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f835 	bl	80018da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b20      	cmp	r3, #32
 800187c:	d10e      	bne.n	800189c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b20      	cmp	r3, #32
 800188a:	d107      	bne.n	800189c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0220 	mvn.w	r2, #32
 8001894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f88a 	bl	80019b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00b      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190a:	d007      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d003      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d108      	bne.n	800192e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d007      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d103      	bne.n	8001994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	615a      	str	r2, [r3, #20]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800

080019b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e03f      	b.n	8001a66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fd8a 	bl	8000514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f829 	bl	8001a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001aaa:	f023 030c 	bic.w	r3, r3, #12
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <UART_SetConfig+0x114>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d103      	bne.n	8001ae0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ad8:	f7ff fcd0 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	e002      	b.n	8001ae6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ae0:	f7ff fcb8 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 8001ae4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	441a      	add	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <UART_SetConfig+0x118>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	0119      	lsls	r1, r3, #4
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009a      	lsls	r2, r3, #2
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <UART_SetConfig+0x118>)
 8001b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	fb00 f303 	mul.w	r3, r0, r3
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	3332      	adds	r3, #50	; 0x32
 8001b30:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <UART_SetConfig+0x118>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	4419      	add	r1, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009a      	lsls	r2, r3, #2
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <UART_SetConfig+0x118>)
 8001b56:	fba3 0302 	umull	r0, r3, r3, r2
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2064      	movs	r0, #100	; 0x64
 8001b5e:	fb00 f303 	mul.w	r3, r0, r3
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	3332      	adds	r3, #50	; 0x32
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <UART_SetConfig+0x118>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	440a      	add	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013800 	.word	0x40013800
 8001b88:	51eb851f 	.word	0x51eb851f

08001b8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b90:	f000 fe74 	bl	800287c <vTaskStartScheduler>
  
  return osOK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0208 	add.w	r2, r3, #8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f103 0208 	add.w	r2, r3, #8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0208 	add.w	r2, r3, #8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d103      	bne.n	8001c56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e00c      	b.n	8001c70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3308      	adds	r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e002      	b.n	8001c64 <vListInsert+0x2e>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d2f6      	bcs.n	8001c5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6892      	ldr	r2, [r2, #8]
 8001cbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6852      	ldr	r2, [r2, #4]
 8001cc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d103      	bne.n	8001cda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1e5a      	subs	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d10:	f383 8811 	msr	BASEPRI, r3
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d1e:	bf00      	nop
 8001d20:	e7fe      	b.n	8001d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d22:	f001 fce3 	bl	80036ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	441a      	add	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	3b01      	subs	r3, #1
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	441a      	add	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	22ff      	movs	r2, #255	; 0xff
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d114      	bne.n	8001da2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01a      	beq.n	8001db6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3310      	adds	r3, #16
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 ffbf 	bl	8002d08 <xTaskRemoveFromEventList>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <xQueueGenericReset+0xcc>)
 8001d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	e009      	b.n	8001db6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3310      	adds	r3, #16
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fef7 	bl	8001b9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3324      	adds	r3, #36	; 0x24
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fef2 	bl	8001b9a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001db6:	f001 fcc9 	bl	800374c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	e000ed04 	.word	0xe000ed04

08001dc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	613b      	str	r3, [r7, #16]
}
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	e004      	b.n	8001e08 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3348      	adds	r3, #72	; 0x48
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 fd2f 	bl	8003870 <pvPortMalloc>
 8001e12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00f      	beq.n	8001e3a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3348      	adds	r3, #72	; 0x48
 8001e1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f805 	bl	8001e44 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e002      	b.n	8001e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e72:	2101      	movs	r1, #1
 8001e74:	69b8      	ldr	r0, [r7, #24]
 8001e76:	f7ff ff3f 	bl	8001cf8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f81d 	bl	8001ee8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6939      	ldr	r1, [r7, #16]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff7a 	bl	8001dc8 <xQueueGenericCreate>
 8001ed4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff ffd3 	bl	8001e82 <prvInitialiseMutex>

		return pxNewQueue;
 8001edc:	68fb      	ldr	r3, [r7, #12]
	}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <xQueueGenericSend+0x32>
	__asm volatile
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f16:	bf00      	nop
 8001f18:	e7fe      	b.n	8001f18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <xQueueGenericSend+0x40>
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <xQueueGenericSend+0x44>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <xQueueGenericSend+0x46>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <xQueueGenericSend+0x60>
	__asm volatile
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f44:	bf00      	nop
 8001f46:	e7fe      	b.n	8001f46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d103      	bne.n	8001f56 <xQueueGenericSend+0x6e>
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <xQueueGenericSend+0x72>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <xQueueGenericSend+0x74>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <xQueueGenericSend+0x8e>
	__asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	623b      	str	r3, [r7, #32]
}
 8001f72:	bf00      	nop
 8001f74:	e7fe      	b.n	8001f74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f76:	f001 f887 	bl	8003088 <xTaskGetSchedulerState>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <xQueueGenericSend+0x9e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <xQueueGenericSend+0xa2>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <xQueueGenericSend+0xa4>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <xQueueGenericSend+0xbe>
	__asm volatile
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	61fb      	str	r3, [r7, #28]
}
 8001fa2:	bf00      	nop
 8001fa4:	e7fe      	b.n	8001fa4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fa6:	f001 fba1 	bl	80036ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <xQueueGenericSend+0xd4>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d129      	bne.n	8002010 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc2:	f000 f9b2 	bl	800232a <prvCopyDataToQueue>
 8001fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	3324      	adds	r3, #36	; 0x24
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fe97 	bl	8002d08 <xTaskRemoveFromEventList>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <xQueueGenericSend+0x1f8>)
 8001fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f3bf 8f4f 	dsb	sy
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	e00a      	b.n	8002008 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ff8:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <xQueueGenericSend+0x1f8>)
 8001ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002008:	f001 fba0 	bl	800374c <vPortExitCritical>
				return pdPASS;
 800200c:	2301      	movs	r3, #1
 800200e:	e063      	b.n	80020d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002016:	f001 fb99 	bl	800374c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800201a:	2300      	movs	r3, #0
 800201c:	e05c      	b.n	80020d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fecf 	bl	8002dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800202e:	2301      	movs	r3, #1
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002032:	f001 fb8b 	bl	800374c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002036:	f000 fc81 	bl	800293c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800203a:	f001 fb57 	bl	80036ec <vPortEnterCritical>
 800203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002044:	b25b      	sxtb	r3, r3
 8002046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204a:	d103      	bne.n	8002054 <xQueueGenericSend+0x16c>
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800205a:	b25b      	sxtb	r3, r3
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d103      	bne.n	800206a <xQueueGenericSend+0x182>
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800206a:	f001 fb6f 	bl	800374c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800206e:	1d3a      	adds	r2, r7, #4
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f000 febe 	bl	8002df8 <xTaskCheckForTimeOut>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d124      	bne.n	80020cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002084:	f000 fa23 	bl	80024ce <prvIsQueueFull>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d018      	beq.n	80020c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	3310      	adds	r3, #16
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fe12 	bl	8002cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800209c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800209e:	f000 f9ae 	bl	80023fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020a2:	f000 fc59 	bl	8002958 <xTaskResumeAll>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f af7c 	bne.w	8001fa6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <xQueueGenericSend+0x1f8>)
 80020b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	e772      	b.n	8001fa6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020c2:	f000 f99c 	bl	80023fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020c6:	f000 fc47 	bl	8002958 <xTaskResumeAll>
 80020ca:	e76c      	b.n	8001fa6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ce:	f000 f996 	bl	80023fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020d2:	f000 fc41 	bl	8002958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020d6:	2300      	movs	r3, #0
		}
	}
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3738      	adds	r7, #56	; 0x38
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	e000ed04 	.word	0xe000ed04

080020e4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08e      	sub	sp, #56	; 0x38
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	623b      	str	r3, [r7, #32]
}
 8002112:	bf00      	nop
 8002114:	e7fe      	b.n	8002114 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	61fb      	str	r3, [r7, #28]
}
 8002130:	bf00      	nop
 8002132:	e7fe      	b.n	8002132 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002134:	f000 ffa8 	bl	8003088 <xTaskGetSchedulerState>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <xQueueSemaphoreTake+0x60>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <xQueueSemaphoreTake+0x64>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <xQueueSemaphoreTake+0x66>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	61bb      	str	r3, [r7, #24]
}
 8002160:	bf00      	nop
 8002162:	e7fe      	b.n	8002162 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002164:	f001 fac2 	bl	80036ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d024      	beq.n	80021be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	1e5a      	subs	r2, r3, #1
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002184:	f001 f94a 	bl	800341c <pvTaskIncrementMutexHeldCount>
 8002188:	4602      	mov	r2, r0
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00f      	beq.n	80021b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	3310      	adds	r3, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fdb4 	bl	8002d08 <xTaskRemoveFromEventList>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <xQueueSemaphoreTake+0x214>)
 80021a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021b6:	f001 fac9 	bl	800374c <vPortExitCritical>
				return pdPASS;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e097      	b.n	80022ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	617b      	str	r3, [r7, #20]
}
 80021dc:	bf00      	nop
 80021de:	e7fe      	b.n	80021de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80021e0:	f001 fab4 	bl	800374c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e082      	b.n	80022ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fdea 	bl	8002dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021fc:	f001 faa6 	bl	800374c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002200:	f000 fb9c 	bl	800293c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002204:	f001 fa72 	bl	80036ec <vPortEnterCritical>
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800220e:	b25b      	sxtb	r3, r3
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d103      	bne.n	800221e <xQueueSemaphoreTake+0x13a>
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002224:	b25b      	sxtb	r3, r3
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222a:	d103      	bne.n	8002234 <xQueueSemaphoreTake+0x150>
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002234:	f001 fa8a 	bl	800374c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002238:	463a      	mov	r2, r7
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fdd9 	bl	8002df8 <xTaskCheckForTimeOut>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d132      	bne.n	80022b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800224c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800224e:	f000 f928 	bl	80024a2 <prvIsQueueEmpty>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d026      	beq.n	80022a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002260:	f001 fa44 	bl	80036ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 ff2b 	bl	80030c4 <xTaskPriorityInherit>
 800226e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002270:	f001 fa6c 	bl	800374c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	3324      	adds	r3, #36	; 0x24
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fd1f 	bl	8002cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002284:	f000 f8bb 	bl	80023fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002288:	f000 fb66 	bl	8002958 <xTaskResumeAll>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	f47f af68 	bne.w	8002164 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <xQueueSemaphoreTake+0x214>)
 8002296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	e75e      	b.n	8002164 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80022a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022a8:	f000 f8a9 	bl	80023fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022ac:	f000 fb54 	bl	8002958 <xTaskResumeAll>
 80022b0:	e758      	b.n	8002164 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80022b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022b4:	f000 f8a3 	bl	80023fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022b8:	f000 fb4e 	bl	8002958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022be:	f000 f8f0 	bl	80024a2 <prvIsQueueEmpty>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f43f af4d 	beq.w	8002164 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80022d0:	f001 fa0c 	bl	80036ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80022d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022d6:	f000 f811 	bl	80022fc <prvGetDisinheritPriorityAfterTimeout>
 80022da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fffa 	bl	80032dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80022e8:	f001 fa30 	bl	800374c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80022ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3738      	adds	r7, #56	; 0x38
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e001      	b.n	800231e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800231e:	68fb      	ldr	r3, [r7, #12]
	}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d14d      	bne.n	80023ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 ff3b 	bl	80031d0 <xTaskPriorityDisinherit>
 800235a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	e043      	b.n	80023ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d119      	bne.n	800239e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6898      	ldr	r0, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	461a      	mov	r2, r3
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	f001 fc77 	bl	8003c68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	441a      	add	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d32b      	bcc.n	80023ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e026      	b.n	80023ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68d8      	ldr	r0, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	461a      	mov	r2, r3
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	f001 fc5d 	bl	8003c68 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	425b      	negs	r3, r3
 80023b8:	441a      	add	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d207      	bcs.n	80023da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	425b      	negs	r3, r3
 80023d4:	441a      	add	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d105      	bne.n	80023ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80023f4:	697b      	ldr	r3, [r7, #20]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002406:	f001 f971 	bl	80036ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002410:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002412:	e011      	b.n	8002438 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3324      	adds	r3, #36	; 0x24
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fc71 	bl	8002d08 <xTaskRemoveFromEventList>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800242c:	f000 fd46 	bl	8002ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3b01      	subs	r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243c:	2b00      	cmp	r3, #0
 800243e:	dce9      	bgt.n	8002414 <prvUnlockQueue+0x16>
 8002440:	e000      	b.n	8002444 <prvUnlockQueue+0x46>
					break;
 8002442:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	22ff      	movs	r2, #255	; 0xff
 8002448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800244c:	f001 f97e 	bl	800374c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002450:	f001 f94c 	bl	80036ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800245a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800245c:	e011      	b.n	8002482 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d012      	beq.n	800248c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3310      	adds	r3, #16
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fc4c 	bl	8002d08 <xTaskRemoveFromEventList>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002476:	f000 fd21 	bl	8002ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	3b01      	subs	r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002486:	2b00      	cmp	r3, #0
 8002488:	dce9      	bgt.n	800245e <prvUnlockQueue+0x60>
 800248a:	e000      	b.n	800248e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800248c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	22ff      	movs	r2, #255	; 0xff
 8002492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002496:	f001 f959 	bl	800374c <vPortExitCritical>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024aa:	f001 f91f 	bl	80036ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e001      	b.n	80024c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024c0:	f001 f944 	bl	800374c <vPortExitCritical>

	return xReturn;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024d6:	f001 f909 	bl	80036ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d102      	bne.n	80024ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e001      	b.n	80024f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024f0:	f001 f92c 	bl	800374c <vPortExitCritical>

	return xReturn;
 80024f4:	68fb      	ldr	r3, [r7, #12]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b08e      	sub	sp, #56	; 0x38
 8002502:	af04      	add	r7, sp, #16
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	623b      	str	r3, [r7, #32]
}
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <xTaskCreateStatic+0x46>
	__asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61fb      	str	r3, [r7, #28]
}
 8002540:	bf00      	nop
 8002542:	e7fe      	b.n	8002542 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002544:	2354      	movs	r3, #84	; 0x54
 8002546:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b54      	cmp	r3, #84	; 0x54
 800254c:	d00a      	beq.n	8002564 <xTaskCreateStatic+0x66>
	__asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	61bb      	str	r3, [r7, #24]
}
 8002560:	bf00      	nop
 8002562:	e7fe      	b.n	8002562 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01e      	beq.n	80025a8 <xTaskCreateStatic+0xaa>
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01b      	beq.n	80025a8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002578:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	2202      	movs	r2, #2
 800257e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002582:	2300      	movs	r3, #0
 8002584:	9303      	str	r3, [sp, #12]
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f850 	bl	8002640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a2:	f000 f8cd 	bl	8002740 <prvAddNewTaskToReadyList>
 80025a6:	e001      	b.n	80025ac <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025ac:	697b      	ldr	r3, [r7, #20]
	}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08c      	sub	sp, #48	; 0x30
 80025ba:	af04      	add	r7, sp, #16
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 f950 	bl	8003870 <pvPortMalloc>
 80025d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80025d8:	2054      	movs	r0, #84	; 0x54
 80025da:	f001 f949 	bl	8003870 <pvPortMalloc>
 80025de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
 80025ec:	e005      	b.n	80025fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f001 fa02 	bl	80039f8 <vPortFree>
 80025f4:	e001      	b.n	80025fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d017      	beq.n	8002630 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	2300      	movs	r3, #0
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f80e 	bl	8002640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f000 f88b 	bl	8002740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800262a:	2301      	movs	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e002      	b.n	8002636 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002636:	69bb      	ldr	r3, [r7, #24]
	}
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002658:	3b01      	subs	r3, #1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f023 0307 	bic.w	r3, r3, #7
 8002666:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	617b      	str	r3, [r7, #20]
}
 8002684:	bf00      	nop
 8002686:	e7fe      	b.n	8002686 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e012      	b.n	80026b4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	7819      	ldrb	r1, [r3, #0]
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	3334      	adds	r3, #52	; 0x34
 800269e:	460a      	mov	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	d9e9      	bls.n	800268e <prvInitialiseNewTask+0x4e>
 80026ba:	e000      	b.n	80026be <prvInitialiseNewTask+0x7e>
		{
			break;
 80026bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d901      	bls.n	80026d0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026cc:	2306      	movs	r3, #6
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	2200      	movs	r2, #0
 80026e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	3304      	adds	r3, #4
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fa76 	bl	8001bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	3318      	adds	r3, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fa71 	bl	8001bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	f1c3 0207 	rsb	r2, r3, #7
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	2200      	movs	r2, #0
 8002710:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	69b8      	ldr	r0, [r7, #24]
 8002720:	f000 fef6 	bl	8003510 <pxPortInitialiseStack>
 8002724:	4602      	mov	r2, r0
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002748:	f000 ffd0 	bl	80036ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <prvAddNewTaskToReadyList+0xb8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <prvAddNewTaskToReadyList+0xb8>)
 8002754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <prvAddNewTaskToReadyList+0xb8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d110      	bne.n	800278e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800276c:	f000 fbca 	bl	8002f04 <prvInitialiseTaskLists>
 8002770:	e00d      	b.n	800278e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <prvAddNewTaskToReadyList+0xc0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	429a      	cmp	r2, r3
 8002786:	d802      	bhi.n	800278e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <prvAddNewTaskToReadyList+0xc4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <prvAddNewTaskToReadyList+0xc4>)
 8002796:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <prvAddNewTaskToReadyList+0xc8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <prvAddNewTaskToReadyList+0xc8>)
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <prvAddNewTaskToReadyList+0xcc>)
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7ff fa15 	bl	8001bf0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027c6:	f000 ffc1 	bl	800374c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <prvAddNewTaskToReadyList+0xc0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00e      	beq.n	80027f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <prvAddNewTaskToReadyList+0xd0>)
 80027e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000414 	.word	0x20000414
 80027fc:	20000314 	.word	0x20000314
 8002800:	20000420 	.word	0x20000420
 8002804:	20000430 	.word	0x20000430
 8002808:	2000041c 	.word	0x2000041c
 800280c:	20000318 	.word	0x20000318
 8002810:	e000ed04 	.word	0xe000ed04

08002814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d017      	beq.n	8002856 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <vTaskDelay+0x60>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <vTaskDelay+0x30>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	60bb      	str	r3, [r7, #8]
}
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002844:	f000 f87a 	bl	800293c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002848:	2100      	movs	r1, #0
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fdfa 	bl	8003444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002850:	f000 f882 	bl	8002958 <xTaskResumeAll>
 8002854:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <vTaskDelay+0x64>)
 800285e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	2000043c 	.word	0x2000043c
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800288a:	463a      	mov	r2, r7
 800288c:	1d39      	adds	r1, r7, #4
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fc5c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	9202      	str	r2, [sp, #8]
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	2300      	movs	r3, #0
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2300      	movs	r3, #0
 80028a8:	460a      	mov	r2, r1
 80028aa:	491e      	ldr	r1, [pc, #120]	; (8002924 <vTaskStartScheduler+0xa8>)
 80028ac:	481e      	ldr	r0, [pc, #120]	; (8002928 <vTaskStartScheduler+0xac>)
 80028ae:	f7ff fe26 	bl	80024fe <xTaskCreateStatic>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <vTaskStartScheduler+0xb0>)
 80028b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <vTaskStartScheduler+0xb0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028c0:	2301      	movs	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e001      	b.n	80028ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d116      	bne.n	80028fe <vTaskStartScheduler+0x82>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	613b      	str	r3, [r7, #16]
}
 80028e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <vTaskStartScheduler+0xb4>)
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <vTaskStartScheduler+0xb8>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <vTaskStartScheduler+0xbc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028f8:	f000 fe86 	bl	8003608 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028fc:	e00e      	b.n	800291c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d10a      	bne.n	800291c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	60fb      	str	r3, [r7, #12]
}
 8002918:	bf00      	nop
 800291a:	e7fe      	b.n	800291a <vTaskStartScheduler+0x9e>
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	08003cd4 	.word	0x08003cd4
 8002928:	08002ed5 	.word	0x08002ed5
 800292c:	20000438 	.word	0x20000438
 8002930:	20000434 	.word	0x20000434
 8002934:	20000420 	.word	0x20000420
 8002938:	20000418 	.word	0x20000418

0800293c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <vTaskSuspendAll+0x18>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a03      	ldr	r2, [pc, #12]	; (8002954 <vTaskSuspendAll+0x18>)
 8002948:	6013      	str	r3, [r2, #0]
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	2000043c 	.word	0x2000043c

08002958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <xTaskResumeAll+0x114>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <xTaskResumeAll+0x2c>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	603b      	str	r3, [r7, #0]
}
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002984:	f000 feb2 	bl	80036ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <xTaskResumeAll+0x114>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <xTaskResumeAll+0x114>)
 8002990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002992:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <xTaskResumeAll+0x114>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d161      	bne.n	8002a5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800299a:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <xTaskResumeAll+0x118>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d05d      	beq.n	8002a5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029a2:	e02e      	b.n	8002a02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <xTaskResumeAll+0x11c>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3318      	adds	r3, #24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f978 	bl	8001ca6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3304      	adds	r3, #4
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f973 	bl	8001ca6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <xTaskResumeAll+0x120>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <xTaskResumeAll+0x120>)
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <xTaskResumeAll+0x124>)
 80029e0:	441a      	add	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7ff f901 	bl	8001bf0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <xTaskResumeAll+0x128>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <xTaskResumeAll+0x12c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <xTaskResumeAll+0x11c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1cc      	bne.n	80029a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a10:	f000 fb16 	bl	8003040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <xTaskResumeAll+0x130>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a20:	f000 f836 	bl	8002a90 <xTaskIncrementTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <xTaskResumeAll+0x12c>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f1      	bne.n	8002a20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <xTaskResumeAll+0x130>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <xTaskResumeAll+0x12c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <xTaskResumeAll+0x134>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a5e:	f000 fe75 	bl	800374c <vPortExitCritical>

	return xAlreadyYielded;
 8002a62:	68bb      	ldr	r3, [r7, #8]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000043c 	.word	0x2000043c
 8002a70:	20000414 	.word	0x20000414
 8002a74:	200003d4 	.word	0x200003d4
 8002a78:	2000041c 	.word	0x2000041c
 8002a7c:	20000318 	.word	0x20000318
 8002a80:	20000314 	.word	0x20000314
 8002a84:	20000428 	.word	0x20000428
 8002a88:	20000424 	.word	0x20000424
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <xTaskIncrementTick+0x150>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 808d 	bne.w	8002bbe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <xTaskIncrementTick+0x154>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002aac:	4a4d      	ldr	r2, [pc, #308]	; (8002be4 <xTaskIncrementTick+0x154>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d120      	bne.n	8002afa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <xTaskIncrementTick+0x158>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	603b      	str	r3, [r7, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <xTaskIncrementTick+0x46>
 8002ad8:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <xTaskIncrementTick+0x158>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <xTaskIncrementTick+0x15c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <xTaskIncrementTick+0x158>)
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4a41      	ldr	r2, [pc, #260]	; (8002bec <xTaskIncrementTick+0x15c>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <xTaskIncrementTick+0x160>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	4a3f      	ldr	r2, [pc, #252]	; (8002bf0 <xTaskIncrementTick+0x160>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	f000 faa3 	bl	8003040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <xTaskIncrementTick+0x164>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d34d      	bcc.n	8002ba0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b04:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <xTaskIncrementTick+0x158>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <xTaskIncrementTick+0x82>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <xTaskIncrementTick+0x84>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <xTaskIncrementTick+0x164>)
 8002b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1e:	601a      	str	r2, [r3, #0]
					break;
 8002b20:	e03e      	b.n	8002ba0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <xTaskIncrementTick+0x158>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d203      	bcs.n	8002b42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b3a:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <xTaskIncrementTick+0x164>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6013      	str	r3, [r2, #0]
						break;
 8002b40:	e02e      	b.n	8002ba0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3304      	adds	r3, #4
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f8ad 	bl	8001ca6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3318      	adds	r3, #24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f8a4 	bl	8001ca6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	2201      	movs	r2, #1
 8002b64:	409a      	lsls	r2, r3
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <xTaskIncrementTick+0x168>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <xTaskIncrementTick+0x168>)
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <xTaskIncrementTick+0x16c>)
 8002b7e:	441a      	add	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7ff f832 	bl	8001bf0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <xTaskIncrementTick+0x170>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d3b4      	bcc.n	8002b04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b9e:	e7b1      	b.n	8002b04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <xTaskIncrementTick+0x170>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4915      	ldr	r1, [pc, #84]	; (8002bfc <xTaskIncrementTick+0x16c>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d907      	bls.n	8002bc8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e004      	b.n	8002bc8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <xTaskIncrementTick+0x174>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <xTaskIncrementTick+0x174>)
 8002bc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <xTaskIncrementTick+0x178>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002bd4:	697b      	ldr	r3, [r7, #20]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000043c 	.word	0x2000043c
 8002be4:	20000418 	.word	0x20000418
 8002be8:	200003cc 	.word	0x200003cc
 8002bec:	200003d0 	.word	0x200003d0
 8002bf0:	2000042c 	.word	0x2000042c
 8002bf4:	20000434 	.word	0x20000434
 8002bf8:	2000041c 	.word	0x2000041c
 8002bfc:	20000318 	.word	0x20000318
 8002c00:	20000314 	.word	0x20000314
 8002c04:	20000424 	.word	0x20000424
 8002c08:	20000428 	.word	0x20000428

08002c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <vTaskSwitchContext+0xa0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c1a:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <vTaskSwitchContext+0xa4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c20:	e03f      	b.n	8002ca2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <vTaskSwitchContext+0xa4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <vTaskSwitchContext+0xa8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	f1c3 031f 	rsb	r3, r3, #31
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	491e      	ldr	r1, [pc, #120]	; (8002cb8 <vTaskSwitchContext+0xac>)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	607b      	str	r3, [r7, #4]
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <vTaskSwitchContext+0x5a>
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <vTaskSwitchContext+0xac>)
 8002c74:	4413      	add	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d104      	bne.n	8002c98 <vTaskSwitchContext+0x8c>
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <vTaskSwitchContext+0xb0>)
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	2000043c 	.word	0x2000043c
 8002cb0:	20000428 	.word	0x20000428
 8002cb4:	2000041c 	.word	0x2000041c
 8002cb8:	20000318 	.word	0x20000318
 8002cbc:	20000314 	.word	0x20000314

08002cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	60fb      	str	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <vTaskPlaceOnEventList+0x44>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3318      	adds	r3, #24
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe ffa1 	bl	8001c36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	6838      	ldr	r0, [r7, #0]
 8002cf8:	f000 fba4 	bl	8003444 <prvAddCurrentTaskToDelayedList>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000314 	.word	0x20000314

08002d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	60fb      	str	r3, [r7, #12]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	3318      	adds	r3, #24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe ffb4 	bl	8001ca6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <xTaskRemoveFromEventList+0xac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11c      	bne.n	8002d80 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ffab 	bl	8001ca6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2201      	movs	r2, #1
 8002d56:	409a      	lsls	r2, r3
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <xTaskRemoveFromEventList+0xb0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <xTaskRemoveFromEventList+0xb0>)
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <xTaskRemoveFromEventList+0xb4>)
 8002d70:	441a      	add	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	3304      	adds	r3, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7fe ff39 	bl	8001bf0 <vListInsertEnd>
 8002d7e:	e005      	b.n	8002d8c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4619      	mov	r1, r3
 8002d86:	480e      	ldr	r0, [pc, #56]	; (8002dc0 <xTaskRemoveFromEventList+0xb8>)
 8002d88:	f7fe ff32 	bl	8001bf0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <xTaskRemoveFromEventList+0xbc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d905      	bls.n	8002da6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <xTaskRemoveFromEventList+0xc0>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e001      	b.n	8002daa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002daa:	697b      	ldr	r3, [r7, #20]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000043c 	.word	0x2000043c
 8002db8:	2000041c 	.word	0x2000041c
 8002dbc:	20000318 	.word	0x20000318
 8002dc0:	200003d4 	.word	0x200003d4
 8002dc4:	20000314 	.word	0x20000314
 8002dc8:	20000428 	.word	0x20000428

08002dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <vTaskInternalSetTimeOutState+0x24>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <vTaskInternalSetTimeOutState+0x28>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	605a      	str	r2, [r3, #4]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	2000042c 	.word	0x2000042c
 8002df4:	20000418 	.word	0x20000418

08002df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	613b      	str	r3, [r7, #16]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	60fb      	str	r3, [r7, #12]
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002e3a:	f000 fc57 	bl	80036ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <xTaskCheckForTimeOut+0xbc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d102      	bne.n	8002e5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e023      	b.n	8002ea6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <xTaskCheckForTimeOut+0xc0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d007      	beq.n	8002e7a <xTaskCheckForTimeOut+0x82>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d302      	bcc.n	8002e7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e015      	b.n	8002ea6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d20b      	bcs.n	8002e9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff9b 	bl	8002dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e004      	b.n	8002ea6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ea6:	f000 fc51 	bl	800374c <vPortExitCritical>

	return xReturn;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000418 	.word	0x20000418
 8002eb8:	2000042c 	.word	0x2000042c

08002ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <vTaskMissedYield+0x14>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000428 	.word	0x20000428

08002ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002edc:	f000 f852 	bl	8002f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <prvIdleTask+0x28>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d9f9      	bls.n	8002edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <prvIdleTask+0x2c>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ef8:	e7f0      	b.n	8002edc <prvIdleTask+0x8>
 8002efa:	bf00      	nop
 8002efc:	20000318 	.word	0x20000318
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e00c      	b.n	8002f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <prvInitialiseTaskLists+0x60>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fe3b 	bl	8001b9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3301      	adds	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d9ef      	bls.n	8002f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <prvInitialiseTaskLists+0x64>)
 8002f32:	f7fe fe32 	bl	8001b9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f36:	480d      	ldr	r0, [pc, #52]	; (8002f6c <prvInitialiseTaskLists+0x68>)
 8002f38:	f7fe fe2f 	bl	8001b9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <prvInitialiseTaskLists+0x6c>)
 8002f3e:	f7fe fe2c 	bl	8001b9a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f42:	480c      	ldr	r0, [pc, #48]	; (8002f74 <prvInitialiseTaskLists+0x70>)
 8002f44:	f7fe fe29 	bl	8001b9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <prvInitialiseTaskLists+0x74>)
 8002f4a:	f7fe fe26 	bl	8001b9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <prvInitialiseTaskLists+0x78>)
 8002f50:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <prvInitialiseTaskLists+0x64>)
 8002f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <prvInitialiseTaskLists+0x7c>)
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <prvInitialiseTaskLists+0x68>)
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000318 	.word	0x20000318
 8002f68:	200003a4 	.word	0x200003a4
 8002f6c:	200003b8 	.word	0x200003b8
 8002f70:	200003d4 	.word	0x200003d4
 8002f74:	200003e8 	.word	0x200003e8
 8002f78:	20000400 	.word	0x20000400
 8002f7c:	200003cc 	.word	0x200003cc
 8002f80:	200003d0 	.word	0x200003d0

08002f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f8a:	e019      	b.n	8002fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f8c:	f000 fbae 	bl	80036ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <prvCheckTasksWaitingTermination+0x50>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fe82 	bl	8001ca6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <prvCheckTasksWaitingTermination+0x54>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <prvCheckTasksWaitingTermination+0x54>)
 8002faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <prvCheckTasksWaitingTermination+0x58>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <prvCheckTasksWaitingTermination+0x58>)
 8002fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fb6:	f000 fbc9 	bl	800374c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f810 	bl	8002fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <prvCheckTasksWaitingTermination+0x58>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e1      	bne.n	8002f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200003e8 	.word	0x200003e8
 8002fd8:	20000414 	.word	0x20000414
 8002fdc:	200003fc 	.word	0x200003fc

08002fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fcfe 	bl	80039f8 <vPortFree>
				vPortFree( pxTCB );
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fcfb 	bl	80039f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003002:	e018      	b.n	8003036 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800300a:	2b01      	cmp	r3, #1
 800300c:	d103      	bne.n	8003016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fcf2 	bl	80039f8 <vPortFree>
	}
 8003014:	e00f      	b.n	8003036 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301c:	2b02      	cmp	r3, #2
 800301e:	d00a      	beq.n	8003036 <prvDeleteTCB+0x56>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	60fb      	str	r3, [r7, #12]
}
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <prvDeleteTCB+0x54>
	}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <prvResetNextTaskUnblockTime+0x40>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <prvResetNextTaskUnblockTime+0x14>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <prvResetNextTaskUnblockTime+0x16>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <prvResetNextTaskUnblockTime+0x44>)
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003062:	e008      	b.n	8003076 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <prvResetNextTaskUnblockTime+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a04      	ldr	r2, [pc, #16]	; (8003084 <prvResetNextTaskUnblockTime+0x44>)
 8003074:	6013      	str	r3, [r2, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	200003cc 	.word	0x200003cc
 8003084:	20000434 	.word	0x20000434

08003088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <xTaskGetSchedulerState+0x34>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003096:	2301      	movs	r3, #1
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	e008      	b.n	80030ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <xTaskGetSchedulerState+0x38>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030a4:	2302      	movs	r3, #2
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	e001      	b.n	80030ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030ae:	687b      	ldr	r3, [r7, #4]
	}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000420 	.word	0x20000420
 80030c0:	2000043c 	.word	0x2000043c

080030c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06e      	beq.n	80031b8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <xTaskPriorityInherit+0x100>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d25e      	bcs.n	80031a6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db06      	blt.n	80030fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f0:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <xTaskPriorityInherit+0x100>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f1c3 0207 	rsb	r2, r3, #7
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6959      	ldr	r1, [r3, #20]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <xTaskPriorityInherit+0x104>)
 8003110:	4413      	add	r3, r2
 8003112:	4299      	cmp	r1, r3
 8003114:	d101      	bne.n	800311a <xTaskPriorityInherit+0x56>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <xTaskPriorityInherit+0x58>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d03a      	beq.n	8003196 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fdbe 	bl	8001ca6 <uxListRemove>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d115      	bne.n	800315c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	4924      	ldr	r1, [pc, #144]	; (80031c8 <xTaskPriorityInherit+0x104>)
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <xTaskPriorityInherit+0x98>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	2201      	movs	r2, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43da      	mvns	r2, r3
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <xTaskPriorityInherit+0x108>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4013      	ands	r3, r2
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <xTaskPriorityInherit+0x108>)
 800315a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <xTaskPriorityInherit+0x100>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <xTaskPriorityInherit+0x108>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <xTaskPriorityInherit+0x108>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <xTaskPriorityInherit+0x104>)
 8003186:	441a      	add	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fe fd2e 	bl	8001bf0 <vListInsertEnd>
 8003194:	e004      	b.n	80031a0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <xTaskPriorityInherit+0x100>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e008      	b.n	80031b8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <xTaskPriorityInherit+0x100>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d201      	bcs.n	80031b8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031b8:	68fb      	ldr	r3, [r7, #12]
	}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000314 	.word	0x20000314
 80031c8:	20000318 	.word	0x20000318
 80031cc:	2000041c 	.word	0x2000041c

080031d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d06e      	beq.n	80032c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <xTaskPriorityDisinherit+0x100>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d00a      	beq.n	8003206 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	60fb      	str	r3, [r7, #12]
}
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60bb      	str	r3, [r7, #8]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	429a      	cmp	r2, r3
 8003238:	d044      	beq.n	80032c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d140      	bne.n	80032c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fd2d 	bl	8001ca6 <uxListRemove>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d115      	bne.n	800327e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	491f      	ldr	r1, [pc, #124]	; (80032d4 <xTaskPriorityDisinherit+0x104>)
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <xTaskPriorityDisinherit+0xae>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2201      	movs	r2, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <xTaskPriorityDisinherit+0x108>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4013      	ands	r3, r2
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <xTaskPriorityDisinherit+0x108>)
 800327c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f1c3 0207 	rsb	r2, r3, #7
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <xTaskPriorityDisinherit+0x108>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <xTaskPriorityDisinherit+0x108>)
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <xTaskPriorityDisinherit+0x104>)
 80032b2:	441a      	add	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7fe fc98 	bl	8001bf0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80032c4:	697b      	ldr	r3, [r7, #20]
	}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000314 	.word	0x20000314
 80032d4:	20000318 	.word	0x20000318
 80032d8:	2000041c 	.word	0x2000041c

080032dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8088 	beq.w	8003406 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	60fb      	str	r3, [r7, #12]
}
 8003310:	bf00      	nop
 8003312:	e7fe      	b.n	8003312 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d902      	bls.n	8003324 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e002      	b.n	800332a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	429a      	cmp	r2, r3
 8003332:	d068      	beq.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d163      	bne.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	429a      	cmp	r2, r3
 8003346:	d10a      	bne.n	800335e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60bb      	str	r3, [r7, #8]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db04      	blt.n	800337c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f1c3 0207 	rsb	r2, r3, #7
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6959      	ldr	r1, [r3, #20]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800338c:	4413      	add	r3, r2
 800338e:	4299      	cmp	r1, r3
 8003390:	d101      	bne.n	8003396 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d034      	beq.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	3304      	adds	r3, #4
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe fc80 	bl	8001ca6 <uxListRemove>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d115      	bne.n	80033d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4918      	ldr	r1, [pc, #96]	; (8003414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2201      	movs	r2, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4013      	ands	r3, r2
 80033d4:	4a10      	ldr	r2, [pc, #64]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80033d6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80033f8:	441a      	add	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe fbf5 	bl	8001bf0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000314 	.word	0x20000314
 8003414:	20000318 	.word	0x20000318
 8003418:	2000041c 	.word	0x2000041c

0800341c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <pvTaskIncrementMutexHeldCount+0x24>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <pvTaskIncrementMutexHeldCount+0x24>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800342e:	3201      	adds	r2, #1
 8003430:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003432:	4b03      	ldr	r3, [pc, #12]	; (8003440 <pvTaskIncrementMutexHeldCount+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
	}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000314 	.word	0x20000314

08003444 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3304      	adds	r3, #4
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fc23 	bl	8001ca6 <uxListRemove>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2201      	movs	r2, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4013      	ands	r3, r2
 800347a:	4a20      	ldr	r2, [pc, #128]	; (80034fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800347c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d10a      	bne.n	800349c <prvAddCurrentTaskToDelayedList+0x58>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3304      	adds	r3, #4
 8003492:	4619      	mov	r1, r3
 8003494:	481a      	ldr	r0, [pc, #104]	; (8003500 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003496:	f7fe fbab 	bl	8001bf0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800349a:	e026      	b.n	80034ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d209      	bcs.n	80034c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <prvAddCurrentTaskToDelayedList+0xc0>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe fbb8 	bl	8001c36 <vListInsert>
}
 80034c6:	e010      	b.n	80034ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <prvAddCurrentTaskToDelayedList+0xc4>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f7fe fbae 	bl	8001c36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d202      	bcs.n	80034ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <prvAddCurrentTaskToDelayedList+0xc8>)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6013      	str	r3, [r2, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000418 	.word	0x20000418
 80034f8:	20000314 	.word	0x20000314
 80034fc:	2000041c 	.word	0x2000041c
 8003500:	20000400 	.word	0x20000400
 8003504:	200003d0 	.word	0x200003d0
 8003508:	200003cc 	.word	0x200003cc
 800350c:	20000434 	.word	0x20000434

08003510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3b04      	subs	r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b04      	subs	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3b04      	subs	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <pxPortInitialiseStack+0x54>)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b14      	subs	r3, #20
 800354a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3b20      	subs	r3, #32
 8003556:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	08003569 	.word	0x08003569

08003568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <prvTaskExitError+0x54>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d00a      	beq.n	8003592 <prvTaskExitError+0x2a>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	60fb      	str	r3, [r7, #12]
}
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <prvTaskExitError+0x28>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60bb      	str	r3, [r7, #8]
}
 80035a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035a6:	bf00      	nop
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0fc      	beq.n	80035a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000000c 	.word	0x2000000c

080035c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <pxCurrentTCBConst2>)
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	6808      	ldr	r0, [r1, #0]
 80035c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035ca:	f380 8809 	msr	PSP, r0
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f380 8811 	msr	BASEPRI, r0
 80035da:	f04e 0e0d 	orr.w	lr, lr, #13
 80035de:	4770      	bx	lr

080035e0 <pxCurrentTCBConst2>:
 80035e0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop

080035e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035e8:	4806      	ldr	r0, [pc, #24]	; (8003604 <prvPortStartFirstTask+0x1c>)
 80035ea:	6800      	ldr	r0, [r0, #0]
 80035ec:	6800      	ldr	r0, [r0, #0]
 80035ee:	f380 8808 	msr	MSP, r0
 80035f2:	b662      	cpsie	i
 80035f4:	b661      	cpsie	f
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	df00      	svc	0
 8003600:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003602:	bf00      	nop
 8003604:	e000ed08 	.word	0xe000ed08

08003608 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800360e:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <xPortStartScheduler+0xd0>)
 8003610:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <xPortStartScheduler+0xd4>)
 8003634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800363c:	e009      	b.n	8003652 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800363e:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3b01      	subs	r3, #1
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b80      	cmp	r3, #128	; 0x80
 800365c:	d0ef      	beq.n	800363e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	d00a      	beq.n	8003680 <xPortStartScheduler+0x78>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60bb      	str	r3, [r7, #8]
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003688:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <xPortStartScheduler+0xd8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003692:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <xPortStartScheduler+0xd8>)
 8003694:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <xPortStartScheduler+0xdc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <xPortStartScheduler+0xdc>)
 80036a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <xPortStartScheduler+0xdc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <xPortStartScheduler+0xdc>)
 80036b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036b6:	f000 f8b9 	bl	800382c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <xPortStartScheduler+0xe0>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036c0:	f7ff ff92 	bl	80035e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036c4:	f7ff faa2 	bl	8002c0c <vTaskSwitchContext>
	prvTaskExitError();
 80036c8:	f7ff ff4e 	bl	8003568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000e400 	.word	0xe000e400
 80036dc:	20000440 	.word	0x20000440
 80036e0:	20000444 	.word	0x20000444
 80036e4:	e000ed20 	.word	0xe000ed20
 80036e8:	2000000c 	.word	0x2000000c

080036ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	607b      	str	r3, [r7, #4]
}
 8003704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <vPortEnterCritical+0x58>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <vPortEnterCritical+0x58>)
 800370e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <vPortEnterCritical+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10f      	bne.n	8003738 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <vPortEnterCritical+0x5c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <vPortEnterCritical+0x4c>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	603b      	str	r3, [r7, #0]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <vPortEnterCritical+0x4a>
	}
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	2000000c 	.word	0x2000000c
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <vPortExitCritical+0x4c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <vPortExitCritical+0x24>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	607b      	str	r3, [r7, #4]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <vPortExitCritical+0x4c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3b01      	subs	r3, #1
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <vPortExitCritical+0x4c>)
 8003778:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <vPortExitCritical+0x4c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <vPortExitCritical+0x42>
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800378c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	2000000c 	.word	0x2000000c
 800379c:	00000000 	.word	0x00000000

080037a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037a0:	f3ef 8009 	mrs	r0, PSP
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <pxCurrentTCBConst>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037b0:	6010      	str	r0, [r2, #0]
 80037b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80037b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037ba:	f380 8811 	msr	BASEPRI, r0
 80037be:	f7ff fa25 	bl	8002c0c <vTaskSwitchContext>
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8811 	msr	BASEPRI, r0
 80037ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	6808      	ldr	r0, [r1, #0]
 80037d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037d6:	f380 8809 	msr	PSP, r0
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	4770      	bx	lr

080037e0 <pxCurrentTCBConst>:
 80037e0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
}
 8003800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003802:	f7ff f945 	bl	8002a90 <xTaskIncrementTick>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <SysTick_Handler+0x40>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f383 8811 	msr	BASEPRI, r3
}
 800381e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <vPortSetupTimerInterrupt+0x30>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <vPortSetupTimerInterrupt+0x34>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <vPortSetupTimerInterrupt+0x38>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <vPortSetupTimerInterrupt+0x3c>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <vPortSetupTimerInterrupt+0x40>)
 800384a:	3b01      	subs	r3, #1
 800384c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800384e:	4b03      	ldr	r3, [pc, #12]	; (800385c <vPortSetupTimerInterrupt+0x30>)
 8003850:	2207      	movs	r2, #7
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	e000e010 	.word	0xe000e010
 8003860:	e000e018 	.word	0xe000e018
 8003864:	20000000 	.word	0x20000000
 8003868:	10624dd3 	.word	0x10624dd3
 800386c:	e000e014 	.word	0xe000e014

08003870 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800387c:	f7ff f85e 	bl	800293c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003880:	4b58      	ldr	r3, [pc, #352]	; (80039e4 <pvPortMalloc+0x174>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003888:	f000 f910 	bl	8003aac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800388c:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <pvPortMalloc+0x178>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 808e 	bne.w	80039b6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01d      	beq.n	80038dc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80038a0:	2208      	movs	r2, #8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f023 0307 	bic.w	r3, r3, #7
 80038b8:	3308      	adds	r3, #8
 80038ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <pvPortMalloc+0x6c>
	__asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	617b      	str	r3, [r7, #20]
}
 80038d8:	bf00      	nop
 80038da:	e7fe      	b.n	80038da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d069      	beq.n	80039b6 <pvPortMalloc+0x146>
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <pvPortMalloc+0x17c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d864      	bhi.n	80039b6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <pvPortMalloc+0x180>)
 80038ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038f0:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <pvPortMalloc+0x180>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038f6:	e004      	b.n	8003902 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d903      	bls.n	8003914 <pvPortMalloc+0xa4>
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f1      	bne.n	80038f8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003914:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <pvPortMalloc+0x174>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391a:	429a      	cmp	r2, r3
 800391c:	d04b      	beq.n	80039b6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2208      	movs	r2, #8
 8003924:	4413      	add	r3, r2
 8003926:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	1ad2      	subs	r2, r2, r3
 8003938:	2308      	movs	r3, #8
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d91f      	bls.n	8003980 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <pvPortMalloc+0xf8>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	613b      	str	r3, [r7, #16]
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800397a:	69b8      	ldr	r0, [r7, #24]
 800397c:	f000 f8f8 	bl	8003b70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <pvPortMalloc+0x17c>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <pvPortMalloc+0x17c>)
 800398c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <pvPortMalloc+0x17c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <pvPortMalloc+0x184>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d203      	bcs.n	80039a2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <pvPortMalloc+0x17c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <pvPortMalloc+0x184>)
 80039a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <pvPortMalloc+0x178>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039b6:	f7fe ffcf 	bl	8002958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <pvPortMalloc+0x16a>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	60fb      	str	r3, [r7, #12]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <pvPortMalloc+0x168>
	return pvReturn;
 80039da:	69fb      	ldr	r3, [r7, #28]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20001050 	.word	0x20001050
 80039e8:	2000105c 	.word	0x2000105c
 80039ec:	20001054 	.word	0x20001054
 80039f0:	20001048 	.word	0x20001048
 80039f4:	20001058 	.word	0x20001058

080039f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d048      	beq.n	8003a9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4413      	add	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <vPortFree+0xac>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <vPortFree+0x44>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	60fb      	str	r3, [r7, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <vPortFree+0x62>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60bb      	str	r3, [r7, #8]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <vPortFree+0xac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d019      	beq.n	8003a9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d115      	bne.n	8003a9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <vPortFree+0xac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a80:	f7fe ff5c 	bl	800293c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <vPortFree+0xb0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a06      	ldr	r2, [pc, #24]	; (8003aa8 <vPortFree+0xb0>)
 8003a90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a92:	6938      	ldr	r0, [r7, #16]
 8003a94:	f000 f86c 	bl	8003b70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a98:	f7fe ff5e 	bl	8002958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000105c 	.word	0x2000105c
 8003aa8:	20001054 	.word	0x20001054

08003aac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ab2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ab6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <prvHeapInit+0xac>)
 8003aba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3307      	adds	r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0307 	bic.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <prvHeapInit+0xac>)
 8003adc:	4413      	add	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <prvHeapInit+0xb0>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <prvHeapInit+0xb0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4413      	add	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003af8:	2208      	movs	r2, #8
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <prvHeapInit+0xb4>)
 8003b0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <prvHeapInit+0xb4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <prvHeapInit+0xb4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	1ad2      	subs	r2, r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <prvHeapInit+0xb4>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <prvHeapInit+0xb8>)
 8003b3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <prvHeapInit+0xbc>)
 8003b42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <prvHeapInit+0xc0>)
 8003b46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b4a:	601a      	str	r2, [r3, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000448 	.word	0x20000448
 8003b5c:	20001048 	.word	0x20001048
 8003b60:	20001050 	.word	0x20001050
 8003b64:	20001058 	.word	0x20001058
 8003b68:	20001054 	.word	0x20001054
 8003b6c:	2000105c 	.word	0x2000105c

08003b70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <prvInsertBlockIntoFreeList+0xa8>)
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e002      	b.n	8003b84 <prvInsertBlockIntoFreeList+0x14>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d8f7      	bhi.n	8003b7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d108      	bne.n	8003bb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d118      	bne.n	8003bf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <prvInsertBlockIntoFreeList+0xac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d00d      	beq.n	8003bee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e008      	b.n	8003c00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <prvInsertBlockIntoFreeList+0xac>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e003      	b.n	8003c00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d002      	beq.n	8003c0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	20001048 	.word	0x20001048
 8003c1c:	20001050 	.word	0x20001050

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	2600      	movs	r6, #0
 8003c24:	4d0c      	ldr	r5, [pc, #48]	; (8003c58 <__libc_init_array+0x38>)
 8003c26:	4c0d      	ldr	r4, [pc, #52]	; (8003c5c <__libc_init_array+0x3c>)
 8003c28:	1b64      	subs	r4, r4, r5
 8003c2a:	10a4      	asrs	r4, r4, #2
 8003c2c:	42a6      	cmp	r6, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	f000 f830 	bl	8003c94 <_init>
 8003c34:	2600      	movs	r6, #0
 8003c36:	4d0a      	ldr	r5, [pc, #40]	; (8003c60 <__libc_init_array+0x40>)
 8003c38:	4c0a      	ldr	r4, [pc, #40]	; (8003c64 <__libc_init_array+0x44>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	42a6      	cmp	r6, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c48:	4798      	blx	r3
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c52:	4798      	blx	r3
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08003cf4 	.word	0x08003cf4
 8003c5c:	08003cf4 	.word	0x08003cf4
 8003c60:	08003cf4 	.word	0x08003cf4
 8003c64:	08003cf8 	.word	0x08003cf8

08003c68 <memcpy>:
 8003c68:	440a      	add	r2, r1
 8003c6a:	4291      	cmp	r1, r2
 8003c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c70:	d100      	bne.n	8003c74 <memcpy+0xc>
 8003c72:	4770      	bx	lr
 8003c74:	b510      	push	{r4, lr}
 8003c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c7a:	4291      	cmp	r1, r2
 8003c7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c80:	d1f9      	bne.n	8003c76 <memcpy+0xe>
 8003c82:	bd10      	pop	{r4, pc}

08003c84 <memset>:
 8003c84:	4603      	mov	r3, r0
 8003c86:	4402      	add	r2, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <_init>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_fini>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr
