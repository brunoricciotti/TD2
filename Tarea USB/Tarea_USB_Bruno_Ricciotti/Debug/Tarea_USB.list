
Tarea_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb8  08008cb8  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  08008cb8  08008cb8  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cb8  08008cb8  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08008cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000148  08008e08  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08008e08  000209f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135a2  00000000  00000000  00020171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fd  00000000  00000000  00033713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00037cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad69  00000000  00000000  00038cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001561a  00000000  00000000  00053a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ea8  00000000  00000000  0006904b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000faef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000faf44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000148 	.word	0x20000148
 8000128:	00000000 	.word	0x00000000
 800012c:	08008c38 	.word	0x08008c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000014c 	.word	0x2000014c
 8000148:	08008c38 	.word	0x08008c38

0800014c <inicializar_arrebote>:
#include "arrebote.h"

void inicializar_arrebote(arrebote *s, uint8_t activo_en_cero, uint16_t debounce)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	883a      	ldrh	r2, [r7, #0]
 8000160:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks=0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero)?1:0;
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	2b00      	cmp	r3, #0
 800016c:	bf14      	ite	ne
 800016e:	2301      	movne	r3, #1
 8000170:	2300      	moveq	r3, #0
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t)BTN_LIBRE;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t)BTN_PRESIONADO;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2201      	movs	r2, #1
 800018a:	719a      	strb	r2, [r3, #6]
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
	...

08000198 <chequear_arrebote>:

void chequear_arrebote(arrebote *s, uint32_t estado)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	bf14      	ite	ne
 80001a8:	2301      	movne	r3, #1
 80001aa:	2300      	moveq	r3, #0
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	79db      	ldrb	r3, [r3, #7]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4053      	eors	r3, r2
 80001ba:	60fb      	str	r3, [r7, #12]

	switch (s->estado)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	791b      	ldrb	r3, [r3, #4]
 80001c0:	2b03      	cmp	r3, #3
 80001c2:	d866      	bhi.n	8000292 <chequear_arrebote+0xfa>
 80001c4:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <chequear_arrebote+0x34>)
 80001c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ca:	bf00      	nop
 80001cc:	080001dd 	.word	0x080001dd
 80001d0:	080001ff 	.word	0x080001ff
 80001d4:	08000235 	.word	0x08000235
 80001d8:	08000257 	.word	0x08000257
	{
	case 0:
		if (boton)
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d006      	beq.n	80001f0 <chequear_arrebote+0x58>
		{
			s->debounce_ticks = s->debounce;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	885a      	ldrh	r2, [r3, #2]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2200      	movs	r2, #0
 80001f4:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	719a      	strb	r2, [r3, #6]
		break;
 80001fc:	e049      	b.n	8000292 <chequear_arrebote+0xfa>
	case 1:
		if (!(--(s->debounce_ticks)))
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	3b01      	subs	r3, #1
 8000204:	b29a      	uxth	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	801a      	strh	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d13c      	bne.n	800028c <chequear_arrebote+0xf4>
		{
			if (boton)
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d009      	beq.n	800022c <chequear_arrebote+0x94>
			{
				s->estado_pin = BTN_PRESIONADO;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2201      	movs	r2, #1
 800021c:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2202      	movs	r2, #2
 8000228:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 0;
			}
		}
		break;
 800022a:	e02f      	b.n	800028c <chequear_arrebote+0xf4>
				s->estado = 0;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	711a      	strb	r2, [r3, #4]
		break;
 8000232:	e02b      	b.n	800028c <chequear_arrebote+0xf4>
	case 2:
		if (!boton)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d106      	bne.n	8000248 <chequear_arrebote+0xb0>
		{
			s->debounce_ticks = s->debounce;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	885a      	ldrh	r2, [r3, #2]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2203      	movs	r2, #3
 8000246:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2201      	movs	r2, #1
 800024c:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2201      	movs	r2, #1
 8000252:	719a      	strb	r2, [r3, #6]
		break;
 8000254:	e01d      	b.n	8000292 <chequear_arrebote+0xfa>
	case 3:
		if (!(--(s->debounce_ticks)))
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	3b01      	subs	r3, #1
 800025c:	b29a      	uxth	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	801a      	strh	r2, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d112      	bne.n	8000290 <chequear_arrebote+0xf8>
		{
			if (!boton)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d109      	bne.n	8000284 <chequear_arrebote+0xec>
			{
				s->estado_pin = BTN_LIBRE;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2201      	movs	r2, #1
 800027a:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 2;
			}
		}
		break;
 8000282:	e005      	b.n	8000290 <chequear_arrebote+0xf8>
				s->estado = 2;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2202      	movs	r2, #2
 8000288:	711a      	strb	r2, [r3, #4]
		break;
 800028a:	e001      	b.n	8000290 <chequear_arrebote+0xf8>
		break;
 800028c:	bf00      	nop
 800028e:	e000      	b.n	8000292 <chequear_arrebote+0xfa>
		break;
 8000290:	bf00      	nop
	}
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <hay_flanco_arrebote>:

int hay_flanco_arrebote(arrebote *s)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO) && (s->estado_anterior_pin == BTN_LIBRE);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	795b      	ldrb	r3, [r3, #5]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d105      	bne.n	80002b8 <hay_flanco_arrebote+0x1c>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	799b      	ldrb	r3, [r3, #6]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d101      	bne.n	80002b8 <hay_flanco_arrebote+0x1c>
 80002b4:	2301      	movs	r3, #1
 80002b6:	e000      	b.n	80002ba <hay_flanco_arrebote+0x1e>
 80002b8:	2300      	movs	r3, #0
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){//Cuando se llena el buffer se llama a este callback
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
int i =0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
i++;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fad2 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f846 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f954 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f0:	f000 f934 	bl	800055c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80002f4:	f008 f8ba 	bl	800846c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80002f8:	f000 f89c 	bl	8000434 <MX_ADC1_Init>
  MX_TIM3_Init();
 80002fc:	f000 f8d8 	bl	80004b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  reporte[0] = 0;
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <main+0x80>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&(reporte[1]), 1);//vario en X
 8000306:	2201      	movs	r2, #1
 8000308:	4916      	ldr	r1, [pc, #88]	; (8000364 <main+0x84>)
 800030a:	4817      	ldr	r0, [pc, #92]	; (8000368 <main+0x88>)
 800030c:	f000 fc1c 	bl	8000b48 <HAL_ADC_Start_DMA>
  inicializar_arrebote(&pulsador, PULSADOR_ACTIVO_BAJO, PULSADOR_TICS);
 8000310:	2214      	movs	r2, #20
 8000312:	2101      	movs	r1, #1
 8000314:	4815      	ldr	r0, [pc, #84]	; (800036c <main+0x8c>)
 8000316:	f7ff ff19 	bl	800014c <inicializar_arrebote>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  chequear_arrebote(&pulsador, HAL_GPIO_ReadPin(PULSADOR_PUERTO, PULSADOR_PIN));
 800031a:	2101      	movs	r1, #1
 800031c:	4814      	ldr	r0, [pc, #80]	; (8000370 <main+0x90>)
 800031e:	f001 fc51 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	4619      	mov	r1, r3
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0x8c>)
 8000328:	f7ff ff36 	bl	8000198 <chequear_arrebote>
	  if(hay_flanco_arrebote(&pulsador))
 800032c:	480f      	ldr	r0, [pc, #60]	; (800036c <main+0x8c>)
 800032e:	f7ff ffb5 	bl	800029c <hay_flanco_arrebote>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <main+0x6c>
	  {
		  reporte[0] = 1 - reporte[0]; // toggle from 0 to 1 ... or 1 to 0
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <main+0x80>)
 800033a:	f993 3000 	ldrsb.w	r3, [r3]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	f1c3 0301 	rsb	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	b25a      	sxtb	r2, r3
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <main+0x80>)
 800034a:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(50);
 800034c:	2032      	movs	r0, #50	; 0x32
 800034e:	f000 faff 	bl	8000950 <HAL_Delay>
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)reporte, 3);
 8000352:	2203      	movs	r2, #3
 8000354:	4902      	ldr	r1, [pc, #8]	; (8000360 <main+0x80>)
 8000356:	4807      	ldr	r0, [pc, #28]	; (8000374 <main+0x94>)
 8000358:	f006 ff98 	bl	800728c <USBD_HID_SendReport>
	  chequear_arrebote(&pulsador, HAL_GPIO_ReadPin(PULSADOR_PUERTO, PULSADOR_PIN));
 800035c:	e7dd      	b.n	800031a <main+0x3a>
 800035e:	bf00      	nop
 8000360:	20000220 	.word	0x20000220
 8000364:	20000221 	.word	0x20000221
 8000368:	20000164 	.word	0x20000164
 800036c:	20000224 	.word	0x20000224
 8000370:	40010c00 	.word	0x40010c00
 8000374:	20000234 	.word	0x20000234

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b094      	sub	sp, #80	; 0x50
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f008 fc4e 	bl	8008c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a8:	2301      	movs	r3, #1
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 f8bc 	bl	800354c <HAL_RCC_OscConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003da:	f000 f91f 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003de:	230f      	movs	r3, #15
 80003e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2102      	movs	r1, #2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f003 fb28 	bl	8003a50 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000406:	f000 f909 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800040a:	2312      	movs	r3, #18
 800040c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800040e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000412:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4618      	mov	r0, r3
 800041c:	f003 fc7e 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000426:	f000 f8f9 	bl	800061c <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3750      	adds	r7, #80	; 0x50
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000446:	4a19      	ldr	r2, [pc, #100]	; (80004ac <MX_ADC1_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_ADC1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_ADC1_Init+0x74>)
 800045e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000462:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_ADC1_Init+0x74>)
 800046c:	2201      	movs	r2, #1
 800046e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000472:	f000 fa91 	bl	8000998 <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800047c:	f000 f8ce 	bl	800061c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000492:	f000 fd15 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800049c:	f000 f8be 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000164 	.word	0x20000164
 80004ac:	40012400 	.word	0x40012400

080004b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b6:	f107 0320 	add.w	r3, r7, #32
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004d4:	4a20      	ldr	r2, [pc, #128]	; (8000558 <MX_TIM3_Init+0xa8>)
 80004d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10285;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004e6:	f642 022d 	movw	r2, #10285	; 0x282d
 80004ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80004f8:	4816      	ldr	r0, [pc, #88]	; (8000554 <MX_TIM3_Init+0xa4>)
 80004fa:	f003 fcc5 	bl	8003e88 <HAL_TIM_OC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000504:	f000 f88a 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000508:	2320      	movs	r3, #32
 800050a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	4619      	mov	r1, r3
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <MX_TIM3_Init+0xa4>)
 8000518:	f003 ff48 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000522:	f000 f87b 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_TIM3_Init+0xa4>)
 800053e:	f003 fcf3 	bl	8003f28 <HAL_TIM_OC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000548:	f000 f868 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	; 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200001d8 	.word	0x200001d8
 8000558:	40000400 	.word	0x40000400

0800055c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_DMA_Init+0x38>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <MX_DMA_Init+0x38>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_DMA_Init+0x38>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	200b      	movs	r0, #11
 8000580:	f000 ff77 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000584:	200b      	movs	r0, #11
 8000586:	f000 ff90 	bl	80014aa <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a18      	ldr	r2, [pc, #96]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_GPIO_Init+0x7c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0x80>)
 8000608:	f001 f958 	bl	80018bc <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	40010c00 	.word	0x40010c00

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <HAL_MspInit+0x5c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x5c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_MspInit+0x60>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_MspInit+0x60>)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000
 8000688:	40010000 	.word	0x40010000

0800068c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <HAL_ADC_MspInit+0xcc>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d151      	bne.n	8000750 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <HAL_ADC_MspInit+0xd0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <HAL_ADC_MspInit+0xd0>)
 80006b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <HAL_ADC_MspInit+0xd0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <HAL_ADC_MspInit+0xd0>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a24      	ldr	r2, [pc, #144]	; (800075c <HAL_ADC_MspInit+0xd0>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <HAL_ADC_MspInit+0xd0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	481d      	ldr	r0, [pc, #116]	; (8000760 <HAL_ADC_MspInit+0xd4>)
 80006ec:	f001 f8e6 	bl	80018bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_ADC_MspInit+0xdc>)
 80006f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 800070a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 8000712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000716:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 800071a:	2220      	movs	r2, #32
 800071c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 8000726:	f000 fedb 	bl	80014e0 <HAL_DMA_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000730:	f7ff ff74 	bl	800061c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 8000738:	621a      	str	r2, [r3, #32]
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_ADC_MspInit+0xd8>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2012      	movs	r0, #18
 8000746:	f000 fe94 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800074a:	2012      	movs	r0, #18
 800074c:	f000 fead 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40012400 	.word	0x40012400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800
 8000764:	20000194 	.word	0x20000194
 8000768:	40020008 	.word	0x40020008

0800076c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <HAL_TIM_OC_MspInit+0x34>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d10b      	bne.n	8000796 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_TIM_OC_MspInit+0x38>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_TIM_OC_MspInit+0x38>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_TIM_OC_MspInit+0x38>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40000400 	.word	0x40000400
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 f893 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <DMA1_Channel1_IRQHandler+0x10>)
 80007fe:	f000 ff29 	bl	8001654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000194 	.word	0x20000194

0800080c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <ADC1_2_IRQHandler+0x10>)
 8000812:	f000 fa77 	bl	8000d04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000164 	.word	0x20000164

08000820 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000826:	f001 fb15 	bl	8001e54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200006f8 	.word	0x200006f8

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ffe5 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f008 f9b9 	bl	8008be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fd37 	bl	80002e0 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800087c:	08008cc0 	.word	0x08008cc0
  ldr r2, =_sbss
 8000880:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8000884:	200009f8 	.word	0x200009f8

08000888 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <CAN1_RX1_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 fddd 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff febe 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fdf5 	bl	80014c6 <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 fdbd 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000008 	.word	0x20000008
 8000938:	2000022c 	.word	0x2000022c

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	2000022c 	.word	0x2000022c

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e0be      	b.n	8000b38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d109      	bne.n	80009dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fe58 	bl	800068c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fbc1 	bl	8001164 <ADC_ConversionStop_Disable>
 80009e2:	4603      	mov	r3, r0
 80009e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8099 	bne.w	8000b26 <HAL_ADC_Init+0x18e>
 80009f4:	7dfb      	ldrb	r3, [r7, #23]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f040 8095 	bne.w	8000b26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a04:	f023 0302 	bic.w	r3, r3, #2
 8000a08:	f043 0202 	orr.w	r2, r3, #2
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7b1b      	ldrb	r3, [r3, #12]
 8000a1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a30:	d003      	beq.n	8000a3a <HAL_ADC_Init+0xa2>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d102      	bne.n	8000a40 <HAL_ADC_Init+0xa8>
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	e000      	b.n	8000a42 <HAL_ADC_Init+0xaa>
 8000a40:	2300      	movs	r3, #0
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7d1b      	ldrb	r3, [r3, #20]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d119      	bne.n	8000a84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7b1b      	ldrb	r3, [r3, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d109      	bne.n	8000a6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	035a      	lsls	r2, r3, #13
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	e00b      	b.n	8000a84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	f043 0220 	orr.w	r2, r3, #32
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	f043 0201 	orr.w	r2, r3, #1
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	430a      	orrs	r2, r1
 8000a96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <HAL_ADC_Init+0x1a8>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	68b9      	ldr	r1, [r7, #8]
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab4:	d003      	beq.n	8000abe <HAL_ADC_Init+0x126>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d104      	bne.n	8000ac8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	051b      	lsls	r3, r3, #20
 8000ac6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_ADC_Init+0x1ac>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d10b      	bne.n	8000b04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	f043 0201 	orr.w	r2, r3, #1
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b02:	e018      	b.n	8000b36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f023 0312 	bic.w	r3, r3, #18
 8000b0c:	f043 0210 	orr.w	r2, r3, #16
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b18:	f043 0201 	orr.w	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b24:	e007      	b.n	8000b36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f043 0210 	orr.w	r2, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	ffe1f7fd 	.word	0xffe1f7fd
 8000b44:	ff1f0efe 	.word	0xff1f0efe

08000b48 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a64      	ldr	r2, [pc, #400]	; (8000cf0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d004      	beq.n	8000b6c <HAL_ADC_Start_DMA+0x24>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a63      	ldr	r2, [pc, #396]	; (8000cf4 <HAL_ADC_Start_DMA+0x1ac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d106      	bne.n	8000b7a <HAL_ADC_Start_DMA+0x32>
 8000b6c:	4b60      	ldr	r3, [pc, #384]	; (8000cf0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f040 80b3 	bne.w	8000ce0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <HAL_ADC_Start_DMA+0x40>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e0ae      	b.n	8000ce6 <HAL_ADC_Start_DMA+0x19e>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 fa8d 	bl	80010b0 <ADC_Enable>
 8000b96:	4603      	mov	r3, r0
 8000b98:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f040 809a 	bne.w	8000cd6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000baa:	f023 0301 	bic.w	r3, r3, #1
 8000bae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a4e      	ldr	r2, [pc, #312]	; (8000cf4 <HAL_ADC_Start_DMA+0x1ac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d105      	bne.n	8000bcc <HAL_ADC_Start_DMA+0x84>
 8000bc0:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <HAL_ADC_Start_DMA+0x1a8>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d115      	bne.n	8000bf8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d026      	beq.n	8000c34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bf6:	e01d      	b.n	8000c34 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a39      	ldr	r2, [pc, #228]	; (8000cf0 <HAL_ADC_Start_DMA+0x1a8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d004      	beq.n	8000c18 <HAL_ADC_Start_DMA+0xd0>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a38      	ldr	r2, [pc, #224]	; (8000cf4 <HAL_ADC_Start_DMA+0x1ac>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d10d      	bne.n	8000c34 <HAL_ADC_Start_DMA+0xec>
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <HAL_ADC_Start_DMA+0x1a8>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	f023 0206 	bic.w	r2, r3, #6
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c4c:	e002      	b.n	8000c54 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a1b      	ldr	r3, [r3, #32]
 8000c60:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <HAL_ADC_Start_DMA+0x1b0>)
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_ADC_Start_DMA+0x1b4>)
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <HAL_ADC_Start_DMA+0x1b8>)
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f06f 0202 	mvn.w	r2, #2
 8000c7c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c8c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6a18      	ldr	r0, [r3, #32]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	334c      	adds	r3, #76	; 0x4c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f000 fc79 	bl	8001594 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cb0:	d108      	bne.n	8000cc4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cc0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cc2:	e00f      	b.n	8000ce4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cd2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cd4:	e006      	b.n	8000ce4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000cde:	e001      	b.n	8000ce4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40012400 	.word	0x40012400
 8000cf4:	40012800 	.word	0x40012800
 8000cf8:	080011e7 	.word	0x080011e7
 8000cfc:	08001263 	.word	0x08001263
 8000d00:	0800127f 	.word	0x0800127f

08000d04 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0320 	and.w	r3, r3, #32
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	d140      	bne.n	8000d9c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d139      	bne.n	8000d9c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d4e:	d11d      	bne.n	8000d8c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d119      	bne.n	8000d8c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0220 	bic.w	r2, r2, #32
 8000d66:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fa99 	bl	80002c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f06f 0212 	mvn.w	r2, #18
 8000d9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	2b80      	cmp	r3, #128	; 0x80
 8000da8:	d14f      	bne.n	8000e4a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d148      	bne.n	8000e4a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000dda:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000dde:	d012      	beq.n	8000e06 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d125      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000df8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dfc:	d11d      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d119      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d105      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fa39 	bl	80012b2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f06f 020c 	mvn.w	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	2b40      	cmp	r3, #64	; 0x40
 8000e56:	d114      	bne.n	8000e82 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d10d      	bne.n	8000e82 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f812 	bl	8000e9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f06f 0201 	mvn.w	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x20>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e0dc      	b.n	800109a <HAL_ADC_ConfigChannel+0x1da>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d81c      	bhi.n	8000f2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	3b05      	subs	r3, #5
 8000f02:	221f      	movs	r2, #31
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4019      	ands	r1, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b05      	subs	r3, #5
 8000f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
 8000f28:	e03c      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d81c      	bhi.n	8000f6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	3b23      	subs	r3, #35	; 0x23
 8000f44:	221f      	movs	r2, #31
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4019      	ands	r1, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b23      	subs	r3, #35	; 0x23
 8000f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6a:	e01b      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3b41      	subs	r3, #65	; 0x41
 8000f7e:	221f      	movs	r2, #31
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4019      	ands	r1, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	3b41      	subs	r3, #65	; 0x41
 8000f98:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b09      	cmp	r3, #9
 8000faa:	d91c      	bls.n	8000fe6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68d9      	ldr	r1, [r3, #12]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b1e      	subs	r3, #30
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4019      	ands	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6898      	ldr	r0, [r3, #8]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b1e      	subs	r3, #30
 8000fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	e019      	b.n	800101a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6919      	ldr	r1, [r3, #16]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4019      	ands	r1, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	6898      	ldr	r0, [r3, #8]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	fa00 f203 	lsl.w	r2, r0, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b10      	cmp	r3, #16
 8001020:	d003      	beq.n	800102a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001026:	2b11      	cmp	r3, #17
 8001028:	d132      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d125      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d126      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001050:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d11a      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0c9a      	lsrs	r2, r3, #18
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001070:	e002      	b.n	8001078 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3b01      	subs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f9      	bne.n	8001072 <HAL_ADC_ConfigChannel+0x1b2>
 800107e:	e007      	b.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f043 0220 	orr.w	r2, r3, #32
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	40012400 	.word	0x40012400
 80010a8:	20000000 	.word	0x20000000
 80010ac:	431bde83 	.word	0x431bde83

080010b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d040      	beq.n	8001150 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <ADC_Enable+0xac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <ADC_Enable+0xb0>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	0c9b      	lsrs	r3, r3, #18
 80010ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ec:	e002      	b.n	80010f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010fa:	f7ff fc1f 	bl	800093c <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001100:	e01f      	b.n	8001142 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001102:	f7ff fc1b 	bl	800093c <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d918      	bls.n	8001142 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b01      	cmp	r3, #1
 800111c:	d011      	beq.n	8001142 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e007      	b.n	8001152 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	d1d8      	bne.n	8001102 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000
 8001160:	431bde83 	.word	0x431bde83

08001164 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b01      	cmp	r3, #1
 800117c:	d12e      	bne.n	80011dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800118e:	f7ff fbd5 	bl	800093c <HAL_GetTick>
 8001192:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001194:	e01b      	b.n	80011ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001196:	f7ff fbd1 	bl	800093c <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d914      	bls.n	80011ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10d      	bne.n	80011ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	f043 0210 	orr.w	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e007      	b.n	80011de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d0dc      	beq.n	8001196 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d127      	bne.n	8001250 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001216:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800121a:	d115      	bne.n	8001248 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	f043 0201 	orr.w	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff f83b 	bl	80002c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800124e:	e004      	b.n	800125a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff fe0a 	bl	8000e8a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	f043 0204 	orr.w	r2, r3, #4
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff fe02 	bl	8000eae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4906      	ldr	r1, [pc, #24]	; (800135c <__NVIC_EnableIRQ+0x34>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff90 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff2d 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff42 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff35 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e043      	b.n	800157e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_DMA_Init+0xa8>)
 80014fe:	4413      	add	r3, r2
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <HAL_DMA_Init+0xac>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_DMA_Init+0xb0>)
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800152a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800152e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	bffdfff8 	.word	0xbffdfff8
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_DMA_Start_IT+0x20>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e04a      	b.n	800164a <HAL_DMA_Start_IT+0xb6>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d13a      	bne.n	800163c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2202      	movs	r2, #2
 80015ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f938 	bl	8001860 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 020e 	orr.w	r2, r2, #14
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e00f      	b.n	800162a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0204 	bic.w	r2, r2, #4
 8001618:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 020a 	orr.w	r2, r2, #10
 8001628:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e005      	b.n	8001648 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001644:	2302      	movs	r3, #2
 8001646:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001648:	7dfb      	ldrb	r3, [r7, #23]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2204      	movs	r2, #4
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d04f      	beq.n	800171c <HAL_DMA_IRQHandler+0xc8>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d04a      	beq.n	800171c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0204 	bic.w	r2, r2, #4
 80016a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_DMA_IRQHandler+0x1f0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d029      	beq.n	8001702 <HAL_DMA_IRQHandler+0xae>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a65      	ldr	r2, [pc, #404]	; (8001848 <HAL_DMA_IRQHandler+0x1f4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_IRQHandler+0xaa>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a63      	ldr	r2, [pc, #396]	; (800184c <HAL_DMA_IRQHandler+0x1f8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01a      	beq.n	80016f8 <HAL_DMA_IRQHandler+0xa4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a62      	ldr	r2, [pc, #392]	; (8001850 <HAL_DMA_IRQHandler+0x1fc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d012      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x9e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a60      	ldr	r2, [pc, #384]	; (8001854 <HAL_DMA_IRQHandler+0x200>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00a      	beq.n	80016ec <HAL_DMA_IRQHandler+0x98>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <HAL_DMA_IRQHandler+0x204>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d102      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x92>
 80016e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e4:	e00e      	b.n	8001704 <HAL_DMA_IRQHandler+0xb0>
 80016e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ea:	e00b      	b.n	8001704 <HAL_DMA_IRQHandler+0xb0>
 80016ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016f0:	e008      	b.n	8001704 <HAL_DMA_IRQHandler+0xb0>
 80016f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f6:	e005      	b.n	8001704 <HAL_DMA_IRQHandler+0xb0>
 80016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fc:	e002      	b.n	8001704 <HAL_DMA_IRQHandler+0xb0>
 80016fe:	2340      	movs	r3, #64	; 0x40
 8001700:	e000      	b.n	8001704 <HAL_DMA_IRQHandler+0xb0>
 8001702:	2304      	movs	r3, #4
 8001704:	4a55      	ldr	r2, [pc, #340]	; (800185c <HAL_DMA_IRQHandler+0x208>)
 8001706:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8094 	beq.w	800183a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800171a:	e08e      	b.n	800183a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2202      	movs	r2, #2
 8001722:	409a      	lsls	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d056      	beq.n	80017da <HAL_DMA_IRQHandler+0x186>
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d051      	beq.n	80017da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10b      	bne.n	800175c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020a 	bic.w	r2, r2, #10
 8001752:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a38      	ldr	r2, [pc, #224]	; (8001844 <HAL_DMA_IRQHandler+0x1f0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d029      	beq.n	80017ba <HAL_DMA_IRQHandler+0x166>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a37      	ldr	r2, [pc, #220]	; (8001848 <HAL_DMA_IRQHandler+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x162>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a35      	ldr	r2, [pc, #212]	; (800184c <HAL_DMA_IRQHandler+0x1f8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01a      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x15c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a34      	ldr	r2, [pc, #208]	; (8001850 <HAL_DMA_IRQHandler+0x1fc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d012      	beq.n	80017aa <HAL_DMA_IRQHandler+0x156>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a32      	ldr	r2, [pc, #200]	; (8001854 <HAL_DMA_IRQHandler+0x200>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00a      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x150>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a31      	ldr	r2, [pc, #196]	; (8001858 <HAL_DMA_IRQHandler+0x204>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d102      	bne.n	800179e <HAL_DMA_IRQHandler+0x14a>
 8001798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800179c:	e00e      	b.n	80017bc <HAL_DMA_IRQHandler+0x168>
 800179e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a2:	e00b      	b.n	80017bc <HAL_DMA_IRQHandler+0x168>
 80017a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a8:	e008      	b.n	80017bc <HAL_DMA_IRQHandler+0x168>
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	e005      	b.n	80017bc <HAL_DMA_IRQHandler+0x168>
 80017b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b4:	e002      	b.n	80017bc <HAL_DMA_IRQHandler+0x168>
 80017b6:	2320      	movs	r3, #32
 80017b8:	e000      	b.n	80017bc <HAL_DMA_IRQHandler+0x168>
 80017ba:	2302      	movs	r3, #2
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <HAL_DMA_IRQHandler+0x208>)
 80017be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d034      	beq.n	800183a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017d8:	e02f      	b.n	800183a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2208      	movs	r2, #8
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d028      	beq.n	800183c <HAL_DMA_IRQHandler+0x1e8>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 020e 	bic.w	r2, r2, #14
 8001802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
    }
  }
  return;
 800183a:	bf00      	nop
 800183c:	bf00      	nop
}
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40020008 	.word	0x40020008
 8001848:	4002001c 	.word	0x4002001c
 800184c:	40020030 	.word	0x40020030
 8001850:	40020044 	.word	0x40020044
 8001854:	40020058 	.word	0x40020058
 8001858:	4002006c 	.word	0x4002006c
 800185c:	40020000 	.word	0x40020000

08001860 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d108      	bne.n	80018a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800189e:	e007      	b.n	80018b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	60da      	str	r2, [r3, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e169      	b.n	8001ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8158 	bne.w	8001b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a9a      	ldr	r2, [pc, #616]	; (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4a98      	ldr	r2, [pc, #608]	; (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4a98      	ldr	r2, [pc, #608]	; (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a96      	ldr	r2, [pc, #600]	; (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a96      	ldr	r2, [pc, #600]	; (8001b64 <HAL_GPIO_Init+0x2a8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_GPIO_Init+0x2a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a94      	ldr	r2, [pc, #592]	; (8001b68 <HAL_GPIO_Init+0x2ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_GPIO_Init+0x2ac>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a92      	ldr	r2, [pc, #584]	; (8001b6c <HAL_GPIO_Init+0x2b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_GPIO_Init+0x2b0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a79      	ldr	r2, [pc, #484]	; (8001b70 <HAL_GPIO_Init+0x2b4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80b1 	beq.w	8001b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a40      	ldr	r2, [pc, #256]	; (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	492f      	ldr	r1, [pc, #188]	; (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	492c      	ldr	r1, [pc, #176]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4928      	ldr	r1, [pc, #160]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4922      	ldr	r1, [pc, #136]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	491e      	ldr	r1, [pc, #120]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4918      	ldr	r1, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4914      	ldr	r1, [pc, #80]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e021      	b.n	8001b9e <HAL_GPIO_Init+0x2e2>
 8001b5a:	bf00      	nop
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10220000 	.word	0x10220000
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4909      	ldr	r1, [pc, #36]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae8e 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	372c      	adds	r7, #44	; 0x2c
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e001      	b.n	8001be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf4:	b08b      	sub	sp, #44	; 0x2c
 8001bf6:	af06      	add	r7, sp, #24
 8001bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0fd      	b.n	8001e00 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 fd5b 	bl	80086d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fc42 	bl	80044b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	687e      	ldr	r6, [r7, #4]
 8001c38:	466d      	mov	r5, sp
 8001c3a:	f106 0410 	add.w	r4, r6, #16
 8001c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	602b      	str	r3, [r5, #0]
 8001c46:	1d33      	adds	r3, r6, #4
 8001c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f002 fc0c 	bl	8004468 <USB_CoreInit>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0ce      	b.n	8001e00 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fc3d 	bl	80044e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e04c      	b.n	8001d0e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3301      	adds	r3, #1
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3336      	adds	r3, #54	; 0x36
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	333c      	adds	r3, #60	; 0x3c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	3340      	adds	r3, #64	; 0x40
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3ad      	bcc.n	8001c74 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e044      	b.n	8001da8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3b5      	bcc.n	8001d1e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	687e      	ldr	r6, [r7, #4]
 8001dba:	466d      	mov	r5, sp
 8001dbc:	f106 0410 	add.w	r4, r6, #16
 8001dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	602b      	str	r3, [r5, #0]
 8001dc8:	1d33      	adds	r3, r6, #4
 8001dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f002 fb97 	bl	8004500 <USB_DevInit>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00d      	b.n	8001e00 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 f849 	bl	8006e90 <USB_DevDisconnect>

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_PCD_Start+0x16>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e016      	b.n	8001e4c <HAL_PCD_Start+0x44>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fb2c 	bl	8004488 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e30:	2101      	movs	r1, #1
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f006 fe9d 	bl	8008b72 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 f81d 	bl	8006e7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 f81f 	bl	8006ea4 <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fb48 	bl	8002508 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f005 f811 	bl	8006ea4 <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d112      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f006 fc8f 	bl	80087ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f923 	bl	80020fa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fff3 	bl	8006ea4 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 ffdc 	bl	8006ea4 <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d10b      	bne.n	8001f10 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 ffc5 	bl	8006ea4 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f24:	d126      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0204 	bic.w	r2, r2, #4
 8001f38:	b292      	uxth	r2, r2
 8001f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0208 	bic.w	r2, r2, #8
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f006 fc70 	bl	800883c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 ff93 	bl	8006ea4 <USB_ReadInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f88:	f040 8082 	bne.w	8002090 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	77fb      	strb	r3, [r7, #31]
 8001f90:	e010      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	441a      	add	r2, r3
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	443b      	add	r3, r7
 8001faa:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
 8001fb6:	2b07      	cmp	r3, #7
 8001fb8:	d9eb      	bls.n	8001f92 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	b292      	uxth	r2, r2
 8001fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001fea:	bf00      	nop
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f6      	beq.n	8001fec <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002010:	b292      	uxth	r2, r2
 8002012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	77fb      	strb	r3, [r7, #31]
 800201a:	e00f      	b.n	800203c <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	4611      	mov	r1, r2
 8002024:	7ffa      	ldrb	r2, [r7, #31]
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	440a      	add	r2, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	3320      	adds	r3, #32
 800202e:	443b      	add	r3, r7
 8002030:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002034:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	3301      	adds	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	2b07      	cmp	r3, #7
 8002040:	d9ec      	bls.n	800201c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0208 	orr.w	r2, r2, #8
 8002054:	b292      	uxth	r2, r2
 8002056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206c:	b292      	uxth	r2, r2
 800206e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0204 	orr.w	r2, r2, #4
 8002084:	b292      	uxth	r2, r2
 8002086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f006 fbbc 	bl	8008808 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f004 ff05 	bl	8006ea4 <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a4:	d10e      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020b8:	b292      	uxth	r2, r2
 80020ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f006 fb75 	bl	80087ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 feeb 	bl	8006ea4 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d8:	d10b      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020f2:	bf00      	nop
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_PCD_SetAddress+0x1a>
 8002110:	2302      	movs	r3, #2
 8002112:	e013      	b.n	800213c <HAL_PCD_SetAddress+0x42>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fe92 	bl	8006e56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	70fb      	strb	r3, [r7, #3]
 8002156:	460b      	mov	r3, r1
 8002158:	803b      	strh	r3, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da0e      	bge.n	8002188 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	705a      	strb	r2, [r3, #1]
 8002186:	e00e      	b.n	80021a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 0207 	and.w	r2, r3, #7
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021b2:	883a      	ldrh	r2, [r7, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	78ba      	ldrb	r2, [r7, #2]
 80021bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021d0:	78bb      	ldrb	r3, [r7, #2]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d102      	bne.n	80021dc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_EP_Open+0xa6>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00e      	b.n	8002208 <HAL_PCD_EP_Open+0xc4>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 f9a1 	bl	8004540 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002206:	7afb      	ldrb	r3, [r7, #11]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da0e      	bge.n	8002242 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	705a      	strb	r2, [r3, #1]
 8002240:	e00e      	b.n	8002260 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 0207 	and.w	r2, r3, #7
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	b2da      	uxtb	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_EP_Close+0x6a>
 8002276:	2302      	movs	r3, #2
 8002278:	e00e      	b.n	8002298 <HAL_PCD_EP_Close+0x88>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fcc3 	bl	8004c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	460b      	mov	r3, r1
 80022ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	f003 0207 	and.w	r2, r3, #7
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fe75 	bl	8004fec <USB_EPStartXfer>
 8002302:	e005      	b.n	8002310 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fe6e 	bl	8004fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	460b      	mov	r3, r1
 8002328:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2201      	movs	r2, #1
 8002364:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002366:	7afb      	ldrb	r3, [r7, #11]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	b2da      	uxtb	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002372:	7afb      	ldrb	r3, [r7, #11]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	4618      	mov	r0, r3
 8002384:	f002 fe32 	bl	8004fec <USB_EPStartXfer>
 8002388:	e005      	b.n	8002396 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6979      	ldr	r1, [r7, #20]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fe2b 	bl	8004fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 0207 	and.w	r2, r3, #7
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d901      	bls.n	80023be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e04c      	b.n	8002458 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da0e      	bge.n	80023e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	705a      	strb	r2, [r3, #1]
 80023e2:	e00c      	b.n	80023fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_PCD_EP_SetStall+0x7e>
 800241a:	2302      	movs	r3, #2
 800241c:	e01c      	b.n	8002458 <HAL_PCD_EP_SetStall+0xb8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	4618      	mov	r0, r3
 800242e:	f004 fc15 	bl	8006c5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	2b00      	cmp	r3, #0
 800243a:	d108      	bne.n	800244e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f004 fd3a 	bl	8006ec2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d901      	bls.n	800247e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e040      	b.n	8002500 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800247e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002482:	2b00      	cmp	r3, #0
 8002484:	da0e      	bge.n	80024a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	705a      	strb	r2, [r3, #1]
 80024a2:	e00e      	b.n	80024c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_PCD_EP_ClrStall+0x82>
 80024de:	2302      	movs	r3, #2
 80024e0:	e00e      	b.n	8002500 <HAL_PCD_EP_ClrStall+0xa0>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68f9      	ldr	r1, [r7, #12]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 fc03 	bl	8006cfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002510:	e2ec      	b.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800251c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 8161 	bne.w	80027f4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d152      	bne.n	80025e2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	81fb      	strh	r3, [r7, #14]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255c:	b29b      	uxth	r3, r3
 800255e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3328      	adds	r3, #40	; 0x28
 8002564:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	3302      	adds	r3, #2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	441a      	add	r2, r3
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025a0:	2100      	movs	r1, #0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f006 f8e9 	bl	800877a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 829b 	beq.w	8002aec <PCD_EP_ISR_Handler+0x5e4>
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 8296 	bne.w	8002aec <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b292      	uxth	r2, r2
 80025d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025e0:	e284      	b.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d034      	beq.n	8002666 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	3306      	adds	r3, #6
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800263a:	b29b      	uxth	r3, r3
 800263c:	f004 fc91 	bl	8006f62 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	f640 738f 	movw	r3, #3983	; 0xf8f
 800264c:	4013      	ands	r3, r2
 800264e:	823b      	strh	r3, [r7, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	8a3a      	ldrh	r2, [r7, #16]
 8002656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800265a:	b292      	uxth	r2, r2
 800265c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 f85e 	bl	8008720 <HAL_PCD_SetupStageCallback>
 8002664:	e242      	b.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002666:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800266a:	2b00      	cmp	r3, #0
 800266c:	f280 823e 	bge.w	8002aec <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29a      	uxth	r2, r3
 8002678:	f640 738f 	movw	r3, #3983	; 0xf8f
 800267c:	4013      	ands	r3, r2
 800267e:	83bb      	strh	r3, [r7, #28]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	8bba      	ldrh	r2, [r7, #28]
 8002686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268a:	b292      	uxth	r2, r2
 800268c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002696:	b29b      	uxth	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	3306      	adds	r3, #6
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <PCD_EP_ISR_Handler+0x1ee>
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	6959      	ldr	r1, [r3, #20]
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f004 fc41 	bl	8006f62 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	441a      	add	r2, r3
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026ee:	2100      	movs	r1, #0
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f006 f827 	bl	8008744 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 81f2 	bne.w	8002aec <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4413      	add	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d112      	bne.n	8002756 <PCD_EP_ISR_Handler+0x24e>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800273a:	b29a      	uxth	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274e:	b29a      	uxth	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e02f      	b.n	80027b6 <PCD_EP_ISR_Handler+0x2ae>
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b3e      	cmp	r3, #62	; 0x3e
 800275c:	d813      	bhi.n	8002786 <PCD_EP_ISR_Handler+0x27e>
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <PCD_EP_ISR_Handler+0x270>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	3301      	adds	r3, #1
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	b29b      	uxth	r3, r3
 800277c:	029b      	lsls	r3, r3, #10
 800277e:	b29a      	uxth	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	e017      	b.n	80027b6 <PCD_EP_ISR_Handler+0x2ae>
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <PCD_EP_ISR_Handler+0x298>
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	3b01      	subs	r3, #1
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	827b      	strh	r3, [r7, #18]
 80027c8:	8a7b      	ldrh	r3, [r7, #18]
 80027ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027ce:	827b      	strh	r3, [r7, #18]
 80027d0:	8a7b      	ldrh	r3, [r7, #18]
 80027d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027d6:	827b      	strh	r3, [r7, #18]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8013      	strh	r3, [r2, #0]
 80027f2:	e17b      	b.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002806:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800280a:	2b00      	cmp	r3, #0
 800280c:	f280 80ea 	bge.w	80029e4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29a      	uxth	r2, r3
 8002822:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002826:	4013      	ands	r3, r2
 8002828:	853b      	strh	r3, [r7, #40]	; 0x28
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800283a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283e:	b292      	uxth	r2, r2
 8002840:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002842:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	7b1b      	ldrb	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d122      	bne.n	80028a6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	3306      	adds	r3, #6
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800288a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8087 	beq.w	80029a0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	6959      	ldr	r1, [r3, #20]
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	88da      	ldrh	r2, [r3, #6]
 800289e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a0:	f004 fb5f 	bl	8006f62 <USB_ReadPMA>
 80028a4:	e07c      	b.n	80029a0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	78db      	ldrb	r3, [r3, #3]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d108      	bne.n	80028c0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028b0:	461a      	mov	r2, r3
 80028b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f927 	bl	8002b08 <HAL_PCD_EP_DB_Receive>
 80028ba:	4603      	mov	r3, r0
 80028bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028be:	e06f      	b.n	80029a0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	847b      	strh	r3, [r7, #34]	; 0x22
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d021      	beq.n	800295e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	3302      	adds	r3, #2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02a      	beq.n	80029a0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	6959      	ldr	r1, [r3, #20]
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	891a      	ldrh	r2, [r3, #8]
 8002956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002958:	f004 fb03 	bl	8006f62 <USB_ReadPMA>
 800295c:	e020      	b.n	80029a0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	3306      	adds	r3, #6
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002986:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002988:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	6959      	ldr	r1, [r3, #20]
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	895a      	ldrh	r2, [r3, #10]
 800299a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800299c:	f004 fae1 	bl	8006f62 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029a6:	441a      	add	r2, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b2:	441a      	add	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <PCD_EP_ISR_Handler+0x4c2>
 80029c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d206      	bcs.n	80029d8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f005 feb7 	bl	8008744 <HAL_PCD_DataOutStageCallback>
 80029d6:	e005      	b.n	80029e4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 fb04 	bl	8004fec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d07e      	beq.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80029ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	843b      	strh	r3, [r7, #32]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	441a      	add	r2, r3
 8002a2c:	8c3b      	ldrh	r3, [r7, #32]
 8002a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	78db      	ldrb	r3, [r3, #3]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d00c      	beq.n	8002a5c <PCD_EP_ISR_Handler+0x554>
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	78db      	ldrb	r3, [r3, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d146      	bne.n	8002ae0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d141      	bne.n	8002ae0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3302      	adds	r3, #2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a84:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	8bfb      	ldrh	r3, [r7, #30]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d906      	bls.n	8002a9e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	8bfb      	ldrh	r3, [r7, #30]
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	619a      	str	r2, [r3, #24]
 8002a9c:	e002      	b.n	8002aa4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f005 fe61 	bl	800877a <HAL_PCD_DataInStageCallback>
 8002ab8:	e018      	b.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	8bfb      	ldrh	r3, [r7, #30]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	8bfb      	ldrh	r3, [r7, #30]
 8002acc:	441a      	add	r2, r3
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fa87 	bl	8004fec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ade:	e005      	b.n	8002aec <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ae0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f91b 	bl	8002d22 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f6ff ad0a 	blt.w	8002512 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3738      	adds	r7, #56	; 0x38
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d07e      	beq.n	8002c1e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	3302      	adds	r3, #2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	8b7b      	ldrh	r3, [r7, #26]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d306      	bcc.n	8002b62 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	8b7b      	ldrh	r3, [r7, #26]
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	e002      	b.n	8002b68 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d123      	bne.n	8002bb8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	833b      	strh	r3, [r7, #24]
 8002b8c:	8b3b      	ldrh	r3, [r7, #24]
 8002b8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b92:	833b      	strh	r3, [r7, #24]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	441a      	add	r2, r3
 8002ba2:	8b3b      	ldrh	r3, [r7, #24]
 8002ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01f      	beq.n	8002c02 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	82fb      	strh	r3, [r7, #22]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	441a      	add	r2, r3
 8002bec:	8afb      	ldrh	r3, [r7, #22]
 8002bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c02:	8b7b      	ldrh	r3, [r7, #26]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8087 	beq.w	8002d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6959      	ldr	r1, [r3, #20]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	891a      	ldrh	r2, [r3, #8]
 8002c16:	8b7b      	ldrh	r3, [r7, #26]
 8002c18:	f004 f9a3 	bl	8006f62 <USB_ReadPMA>
 8002c1c:	e07c      	b.n	8002d18 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	3306      	adds	r3, #6
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	8b7b      	ldrh	r3, [r7, #26]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d306      	bcc.n	8002c60 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	8b7b      	ldrh	r3, [r7, #26]
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	619a      	str	r2, [r3, #24]
 8002c5e:	e002      	b.n	8002c66 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d123      	bne.n	8002cb6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c88:	83fb      	strh	r3, [r7, #30]
 8002c8a:	8bfb      	ldrh	r3, [r7, #30]
 8002c8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c90:	83fb      	strh	r3, [r7, #30]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	441a      	add	r2, r3
 8002ca0:	8bfb      	ldrh	r3, [r7, #30]
 8002ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11f      	bne.n	8002d00 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	83bb      	strh	r3, [r7, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	8bbb      	ldrh	r3, [r7, #28]
 8002cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d00:	8b7b      	ldrh	r3, [r7, #26]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6959      	ldr	r1, [r3, #20]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	895a      	ldrh	r2, [r3, #10]
 8002d12:	8b7b      	ldrh	r3, [r7, #26]
 8002d14:	f004 f925 	bl	8006f62 <USB_ReadPMA>
    }
  }

  return count;
 8002d18:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b0a2      	sub	sp, #136	; 0x88
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 81c7 	beq.w	80030ca <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3302      	adds	r3, #2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d907      	bls.n	8002d84 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d7c:	1ad2      	subs	r2, r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	619a      	str	r2, [r3, #24]
 8002d82:	e002      	b.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80b9 	bne.w	8002f06 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d126      	bne.n	8002dea <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	4413      	add	r3, r2
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	011a      	lsls	r2, r3, #4
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	801a      	strh	r2, [r3, #0]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	e01a      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d116      	bne.n	8002e20 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	4413      	add	r3, r2
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	011a      	lsls	r2, r3, #4
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	4413      	add	r3, r2
 8002e14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d126      	bne.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4413      	add	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	011a      	lsls	r2, r3, #4
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	801a      	strh	r2, [r3, #0]
 8002e7a:	e017      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d113      	bne.n	8002eac <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	4413      	add	r3, r2
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	011a      	lsls	r2, r3, #4
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f005 fc61 	bl	800877a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 82d4 	beq.w	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	827b      	strh	r3, [r7, #18]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	8a7b      	ldrh	r3, [r7, #18]
 8002ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
 8002f04:	e2b2      	b.n	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d021      	beq.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	441a      	add	r2, r3
 8002f3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	f040 8286 	bne.w	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f68:	441a      	add	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f76:	441a      	add	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d309      	bcc.n	8002f9c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f94:	1ad2      	subs	r2, r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	621a      	str	r2, [r3, #32]
 8002f9a:	e015      	b.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002fa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fb2:	e009      	b.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d155      	bne.n	800307c <HAL_PCD_EP_DB_Transmit+0x35a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	4413      	add	r3, r2
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	011a      	lsls	r2, r3, #4
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d112      	bne.n	8003024 <HAL_PCD_EP_DB_Transmit+0x302>
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003008:	b29a      	uxth	r2, r3
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301c:	b29a      	uxth	r2, r3
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	e047      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003026:	2b3e      	cmp	r3, #62	; 0x3e
 8003028:	d811      	bhi.n	800304e <HAL_PCD_EP_DB_Transmit+0x32c>
 800302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_PCD_EP_DB_Transmit+0x31e>
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303c:	3301      	adds	r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003042:	b29b      	uxth	r3, r3
 8003044:	029b      	lsls	r3, r3, #10
 8003046:	b29a      	uxth	r2, r3
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	e032      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x392>
 800304e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
 8003054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_PCD_EP_DB_Transmit+0x342>
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	3b01      	subs	r3, #1
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003066:	b29b      	uxth	r3, r3
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	b29b      	uxth	r3, r3
 800306c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003074:	b29a      	uxth	r2, r3
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	e01b      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x392>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d117      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	4413      	add	r3, r2
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	011a      	lsls	r2, r3, #4
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	4413      	add	r3, r2
 80030a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6959      	ldr	r1, [r3, #20]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	891a      	ldrh	r2, [r3, #8]
 80030c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f003 ff08 	bl	8006ed8 <USB_WritePMA>
 80030c8:	e1d0      	b.n	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	3306      	adds	r3, #6
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030fe:	429a      	cmp	r2, r3
 8003100:	d307      	bcc.n	8003112 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	619a      	str	r2, [r3, #24]
 8003110:	e002      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 80c4 	bne.w	80032aa <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d126      	bne.n	8003178 <HAL_PCD_EP_DB_Transmit+0x456>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313e:	4413      	add	r3, r2
 8003140:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	011a      	lsls	r2, r3, #4
 8003148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314a:	4413      	add	r3, r2
 800314c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003150:	66bb      	str	r3, [r7, #104]	; 0x68
 8003152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800315c:	b29a      	uxth	r2, r3
 800315e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800316c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003170:	b29a      	uxth	r2, r3
 8003172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	e01a      	b.n	80031ae <HAL_PCD_EP_DB_Transmit+0x48c>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d116      	bne.n	80031ae <HAL_PCD_EP_DB_Transmit+0x48c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	677b      	str	r3, [r7, #116]	; 0x74
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003194:	4413      	add	r3, r2
 8003196:	677b      	str	r3, [r7, #116]	; 0x74
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	011a      	lsls	r2, r3, #4
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	4413      	add	r3, r2
 80031a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031a6:	673b      	str	r3, [r7, #112]	; 0x70
 80031a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d12f      	bne.n	800321c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d4:	4413      	add	r3, r2
 80031d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	011a      	lsls	r2, r3, #4
 80031e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e4:	4413      	add	r3, r2
 80031e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003212:	b29a      	uxth	r2, r3
 8003214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	e017      	b.n	800324c <HAL_PCD_EP_DB_Transmit+0x52a>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d113      	bne.n	800324c <HAL_PCD_EP_DB_Transmit+0x52a>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003232:	4413      	add	r3, r2
 8003234:	67bb      	str	r3, [r7, #120]	; 0x78
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	011a      	lsls	r2, r3, #4
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	4413      	add	r3, r2
 8003240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003244:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003248:	2200      	movs	r2, #0
 800324a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f005 fa91 	bl	800877a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 8104 	bne.w	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8013      	strh	r3, [r2, #0]
 80032a8:	e0e0      	b.n	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d121      	bne.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fe:	2b01      	cmp	r3, #1
 8003300:	f040 80b4 	bne.w	800346c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800330c:	441a      	add	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800331a:	441a      	add	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d309      	bcc.n	8003340 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003338:	1ad2      	subs	r2, r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	621a      	str	r2, [r3, #32]
 800333e:	e015      	b.n	800336c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003348:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800334c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003356:	e009      	b.n	800336c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	667b      	str	r3, [r7, #100]	; 0x64
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d155      	bne.n	8003426 <HAL_PCD_EP_DB_Transmit+0x704>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338e:	4413      	add	r3, r2
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	011a      	lsls	r2, r3, #4
 8003398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339a:	4413      	add	r3, r2
 800339c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80033a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d112      	bne.n	80033ce <HAL_PCD_EP_DB_Transmit+0x6ac>
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	e044      	b.n	8003458 <HAL_PCD_EP_DB_Transmit+0x736>
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	2b3e      	cmp	r3, #62	; 0x3e
 80033d2:	d811      	bhi.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80033d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	657b      	str	r3, [r7, #84]	; 0x54
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_PCD_EP_DB_Transmit+0x6c8>
 80033e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e6:	3301      	adds	r3, #1
 80033e8:	657b      	str	r3, [r7, #84]	; 0x54
 80033ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	029b      	lsls	r3, r3, #10
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	e02f      	b.n	8003458 <HAL_PCD_EP_DB_Transmit+0x736>
 80033f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	657b      	str	r3, [r7, #84]	; 0x54
 80033fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340a:	3b01      	subs	r3, #1
 800340c:	657b      	str	r3, [r7, #84]	; 0x54
 800340e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003410:	b29b      	uxth	r3, r3
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	b29b      	uxth	r3, r3
 8003416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341e:	b29a      	uxth	r2, r3
 8003420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	e018      	b.n	8003458 <HAL_PCD_EP_DB_Transmit+0x736>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d114      	bne.n	8003458 <HAL_PCD_EP_DB_Transmit+0x736>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800343c:	4413      	add	r3, r2
 800343e:	667b      	str	r3, [r7, #100]	; 0x64
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	011a      	lsls	r2, r3, #4
 8003446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003448:	4413      	add	r3, r2
 800344a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800344e:	663b      	str	r3, [r7, #96]	; 0x60
 8003450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003452:	b29a      	uxth	r2, r3
 8003454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003456:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6959      	ldr	r1, [r3, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	895a      	ldrh	r2, [r3, #10]
 8003464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003466:	b29b      	uxth	r3, r3
 8003468:	f003 fd36 	bl	8006ed8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003486:	823b      	strh	r3, [r7, #16]
 8003488:	8a3b      	ldrh	r3, [r7, #16]
 800348a:	f083 0310 	eor.w	r3, r3, #16
 800348e:	823b      	strh	r3, [r7, #16]
 8003490:	8a3b      	ldrh	r3, [r7, #16]
 8003492:	f083 0320 	eor.w	r3, r3, #32
 8003496:	823b      	strh	r3, [r7, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	8a3b      	ldrh	r3, [r7, #16]
 80034a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3788      	adds	r7, #136	; 0x88
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	817b      	strh	r3, [r7, #10]
 80034d4:	4613      	mov	r3, r2
 80034d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e009      	b.n	8003510 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034fc:	897a      	ldrh	r2, [r7, #10]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003510:	893b      	ldrh	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d107      	bne.n	8003526 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	b29a      	uxth	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	80da      	strh	r2, [r3, #6]
 8003524:	e00b      	b.n	800353e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2201      	movs	r2, #1
 800352a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	b29a      	uxth	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b29a      	uxth	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
	...

0800354c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e272      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8087 	beq.w	800367a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b04      	cmp	r3, #4
 8003576:	d00c      	beq.n	8003592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003578:	4b8f      	ldr	r3, [pc, #572]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d112      	bne.n	80035aa <HAL_RCC_OscConfig+0x5e>
 8003584:	4b8c      	ldr	r3, [pc, #560]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d10b      	bne.n	80035aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003592:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d06c      	beq.n	8003678 <HAL_RCC_OscConfig+0x12c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d168      	bne.n	8003678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e24c      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x76>
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7f      	ldr	r2, [pc, #508]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e02e      	b.n	8003620 <HAL_RCC_OscConfig+0xd4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x98>
 80035ca:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a77      	ldr	r2, [pc, #476]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xd4>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0xbc>
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a71      	ldr	r2, [pc, #452]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6f      	ldr	r3, [pc, #444]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6e      	ldr	r2, [pc, #440]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xd4>
 8003608:	4b6b      	ldr	r3, [pc, #428]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6a      	ldr	r2, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd f988 	bl	800093c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd f984 	bl	800093c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e200      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xe4>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fd f974 	bl	800093c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7fd f970 	bl	800093c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1ec      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x10c>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003686:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003692:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x18c>
 800369e:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x176>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c0      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4939      	ldr	r1, [pc, #228]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd f929 	bl	800093c <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fd f925 	bl	800093c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a1      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4927      	ldr	r1, [pc, #156]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fd f908 	bl	800093c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7fd f904 	bl	800093c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e180      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03a      	beq.n	80037d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fd f8e8 	bl	800093c <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fd f8e4 	bl	800093c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e160      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800378e:	2001      	movs	r0, #1
 8003790:	f000 faa6 	bl	8003ce0 <RCC_Delay>
 8003794:	e01c      	b.n	80037d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fd f8ce 	bl	800093c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a2:	e00f      	b.n	80037c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fd f8ca 	bl	800093c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d908      	bls.n	80037c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e146      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	42420000 	.word	0x42420000
 80037c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b92      	ldr	r3, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e9      	bne.n	80037a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a6 	beq.w	800392a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4a87      	ldr	r2, [pc, #540]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	61d3      	str	r3, [r2, #28]
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b82      	ldr	r3, [pc, #520]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fd f88b 	bl	800093c <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fd f887 	bl	800093c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b64      	cmp	r3, #100	; 0x64
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e103      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4c8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x312>
 8003850:	4b6f      	ldr	r3, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	e02d      	b.n	80038ba <HAL_RCC_OscConfig+0x36e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x334>
 8003866:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6213      	str	r3, [r2, #32]
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a66      	ldr	r2, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	e01c      	b.n	80038ba <HAL_RCC_OscConfig+0x36e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d10c      	bne.n	80038a2 <HAL_RCC_OscConfig+0x356>
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	4a60      	ldr	r2, [pc, #384]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6213      	str	r3, [r2, #32]
 8003894:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a5d      	ldr	r2, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	e00b      	b.n	80038ba <HAL_RCC_OscConfig+0x36e>
 80038a2:	4b5b      	ldr	r3, [pc, #364]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a5a      	ldr	r2, [pc, #360]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d015      	beq.n	80038ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7fd f83b 	bl	800093c <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd f837 	bl	800093c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0b1      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ee      	beq.n	80038ca <HAL_RCC_OscConfig+0x37e>
 80038ec:	e014      	b.n	8003918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7fd f825 	bl	800093c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fd f821 	bl	800093c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e09b      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390c:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ee      	bne.n	80038f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8087 	beq.w	8003a42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d061      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d146      	bne.n	80039d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003948:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fc fff5 	bl	800093c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003956:	f7fc fff1 	bl	800093c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e06d      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4921      	ldr	r1, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a19      	ldr	r1, [r3, #32]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	430b      	orrs	r3, r1
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fc ffc5 	bl	800093c <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fc ffc1 	bl	800093c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e03d      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x46a>
 80039d4:	e035      	b.n	8003a42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x4cc>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fc ffae 	bl	800093c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fc ffaa 	bl	800093c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e026      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x498>
 8003a02:	e01e      	b.n	8003a42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e019      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x500>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000

08003a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0d0      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0207 	bic.w	r2, r3, #7
 8003a7a:	4965      	ldr	r1, [pc, #404]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494d      	ldr	r1, [pc, #308]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d040      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d115      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e073      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06b      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2e:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4936      	ldr	r1, [pc, #216]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b40:	f7fc fefc 	bl	800093c <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7fc fef8 	bl	800093c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e053      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 020c 	and.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1eb      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d210      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 0207 	bic.w	r2, r3, #7
 8003b86:	4922      	ldr	r1, [pc, #136]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e032      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	490e      	ldr	r1, [pc, #56]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bde:	f000 f821 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	5ccb      	ldrb	r3, [r1, r3]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1cc>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1d0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fe5a 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	08008ca8 	.word	0x08008ca8
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	b490      	push	{r4, r7}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c2c:	1d3c      	adds	r4, r7, #4
 8003c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c34:	f240 2301 	movw	r3, #513	; 0x201
 8003c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x40>
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x46>
 8003c62:	e02b      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c64:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c66:	623b      	str	r3, [r7, #32]
      break;
 8003c68:	e02b      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	0c9b      	lsrs	r3, r3, #18
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3328      	adds	r3, #40	; 0x28
 8003c74:	443b      	add	r3, r7
 8003c76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	3328      	adds	r3, #40	; 0x28
 8003c92:	443b      	add	r3, r7
 8003c94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e004      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	623b      	str	r3, [r7, #32]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cbe:	623b      	str	r3, [r7, #32]
      break;
 8003cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3728      	adds	r7, #40	; 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc90      	pop	{r4, r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	08008c50 	.word	0x08008c50
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	003d0900 	.word	0x003d0900

08003ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <RCC_Delay+0x34>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <RCC_Delay+0x38>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cfc:	bf00      	nop
  }
  while (Delay --);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	60fa      	str	r2, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f9      	bne.n	8003cfc <RCC_Delay+0x1c>
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	20000000 	.word	0x20000000
 8003d18:	10624dd3 	.word	0x10624dd3

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d07d      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a4b      	ldr	r2, [pc, #300]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	61d3      	str	r3, [r2, #28]
 8003d54:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d64:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d118      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7c:	f7fc fdde 	bl	800093c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	e008      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d84:	f7fc fdda 	bl	800093c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e06d      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02e      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d027      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd0:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd6:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d014      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fc fda9 	bl	800093c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fc fda5 	bl	800093c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e036      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4917      	ldr	r1, [pc, #92]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e28:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	490b      	ldr	r1, [pc, #44]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42420440 	.word	0x42420440

08003e88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e041      	b.n	8003f1e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fc5c 	bl	800076c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 f886 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e046      	b.n	8003fd0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	d839      	bhi.n	8003fc4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003fc5 	.word	0x08003fc5
 8003f60:	08003fc5 	.word	0x08003fc5
 8003f64:	08003fc5 	.word	0x08003fc5
 8003f68:	08003f9b 	.word	0x08003f9b
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	08003fa9 	.word	0x08003fa9
 8003f7c:	08003fc5 	.word	0x08003fc5
 8003f80:	08003fc5 	.word	0x08003fc5
 8003f84:	08003fc5 	.word	0x08003fc5
 8003f88:	08003fb7 	.word	0x08003fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f882 	bl	800409c <TIM_OC1_SetConfig>
      break;
 8003f98:	e015      	b.n	8003fc6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 f8e1 	bl	8004168 <TIM_OC2_SetConfig>
      break;
 8003fa6:	e00e      	b.n	8003fc6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f944 	bl	800423c <TIM_OC3_SetConfig>
      break;
 8003fb4:	e007      	b.n	8003fc6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f9a7 	bl	8004310 <TIM_OC4_SetConfig>
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003fc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a29      	ldr	r2, [pc, #164]	; (8004090 <TIM_Base_SetConfig+0xb8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0xbc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a25      	ldr	r2, [pc, #148]	; (8004098 <TIM_Base_SetConfig+0xc0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <TIM_Base_SetConfig+0xb8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <TIM_Base_SetConfig+0xbc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <TIM_Base_SetConfig+0xc0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <TIM_Base_SetConfig+0xb8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800

0800409c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0201 	bic.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 0302 	bic.w	r3, r3, #2
 80040e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <TIM_OC1_SetConfig+0xc8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d10c      	bne.n	8004112 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0308 	bic.w	r3, r3, #8
 80040fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <TIM_OC1_SetConfig+0xc8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d111      	bne.n	800413e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00

08004168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0210 	bic.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0320 	bic.w	r3, r3, #32
 80041b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <TIM_OC2_SetConfig+0xd0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d10d      	bne.n	80041e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <TIM_OC2_SetConfig+0xd0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d113      	bne.n	8004214 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00

0800423c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <TIM_OC3_SetConfig+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10d      	bne.n	80042b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <TIM_OC3_SetConfig+0xd0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d113      	bne.n	80042e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	621a      	str	r2, [r3, #32]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00

08004310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	031b      	lsls	r3, r3, #12
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <TIM_OC4_SetConfig+0x98>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d109      	bne.n	8004384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40012c00 	.word	0x40012c00

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e046      	b.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d009      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10c      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004468:	b084      	sub	sp, #16
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	f107 0014 	add.w	r0, r7, #20
 8004476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	b004      	add	sp, #16
 8004486:	4770      	bx	lr

08004488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004498:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800449c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004500:	b084      	sub	sp, #16
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	f107 0014 	add.w	r0, r7, #20
 800450e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	b004      	add	sp, #16
 800453e:	4770      	bx	lr

08004540 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004540:	b480      	push	{r7}
 8004542:	b09b      	sub	sp, #108	; 0x6c
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d81f      	bhi.n	80045b2 <USB_ActivateEndpoint+0x72>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <USB_ActivateEndpoint+0x38>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	08004589 	.word	0x08004589
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045bb 	.word	0x080045bb
 8004584:	08004597 	.word	0x08004597
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004588:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800458c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004590:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004594:	e012      	b.n	80045bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004596:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800459a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800459e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045a2:	e00b      	b.n	80045bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045b0:	e004      	b.n	80045bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80045b8:	e000      	b.n	80045bc <USB_ActivateEndpoint+0x7c>
      break;
 80045ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	7b1b      	ldrb	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8149 	bne.w	80048c0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8084 	beq.w	8004740 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	011a      	lsls	r2, r3, #4
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	88db      	ldrh	r3, [r3, #6]
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	81fb      	strh	r3, [r7, #14]
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <USB_ActivateEndpoint+0x17c>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	81bb      	strh	r3, [r7, #12]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	89bb      	ldrh	r3, [r7, #12]
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	78db      	ldrb	r3, [r3, #3]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d020      	beq.n	8004706 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	813b      	strh	r3, [r7, #8]
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	f083 0320 	eor.w	r3, r3, #32
 80046e2:	813b      	strh	r3, [r7, #8]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
 8004704:	e27f      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	817b      	strh	r3, [r7, #10]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]
 800473e:	e262      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	4413      	add	r3, r2
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	011a      	lsls	r2, r3, #4
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	4413      	add	r3, r2
 800475e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	88db      	ldrh	r3, [r3, #6]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	b29b      	uxth	r3, r3
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	4413      	add	r3, r2
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	011a      	lsls	r2, r3, #4
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	4413      	add	r3, r2
 8004792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d112      	bne.n	80047c6 <USB_ActivateEndpoint+0x286>
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e02f      	b.n	8004826 <USB_ActivateEndpoint+0x2e6>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b3e      	cmp	r3, #62	; 0x3e
 80047cc:	d813      	bhi.n	80047f6 <USB_ActivateEndpoint+0x2b6>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <USB_ActivateEndpoint+0x2a8>
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	3301      	adds	r3, #1
 80047e6:	663b      	str	r3, [r7, #96]	; 0x60
 80047e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e017      	b.n	8004826 <USB_ActivateEndpoint+0x2e6>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <USB_ActivateEndpoint+0x2d0>
 800480a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480c:	3b01      	subs	r3, #1
 800480e:	663b      	str	r3, [r7, #96]	; 0x60
 8004810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004812:	b29b      	uxth	r3, r3
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	b29b      	uxth	r3, r3
 8004818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004820:	b29a      	uxth	r2, r3
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	83fb      	strh	r3, [r7, #30]
 8004834:	8bfb      	ldrh	r3, [r7, #30]
 8004836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01b      	beq.n	8004876 <USB_ActivateEndpoint+0x336>
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004854:	83bb      	strh	r3, [r7, #28]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	8bbb      	ldrh	r3, [r7, #28]
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488c:	837b      	strh	r3, [r7, #26]
 800488e:	8b7b      	ldrh	r3, [r7, #26]
 8004890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004894:	837b      	strh	r3, [r7, #26]
 8004896:	8b7b      	ldrh	r3, [r7, #26]
 8004898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800489c:	837b      	strh	r3, [r7, #26]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	8b7b      	ldrh	r3, [r7, #26]
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]
 80048be:	e1a2      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490c:	4413      	add	r3, r2
 800490e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	011a      	lsls	r2, r3, #4
 8004916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004918:	4413      	add	r3, r2
 800491a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	891b      	ldrh	r3, [r3, #8]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	b29b      	uxth	r3, r3
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	4413      	add	r3, r2
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	011a      	lsls	r2, r3, #4
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	4413      	add	r3, r2
 800494e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	895b      	ldrh	r3, [r3, #10]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004962:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8091 	bne.w	8004a90 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800497c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <USB_ActivateEndpoint+0x47e>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80049cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <USB_ActivateEndpoint+0x4ce>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
 8004a8e:	e0ba      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004aa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01d      	beq.n	8004ae8 <USB_ActivateEndpoint+0x5a8>
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004af8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01d      	beq.n	8004b40 <USB_ActivateEndpoint+0x600>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	78db      	ldrb	r3, [r3, #3]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d024      	beq.n	8004b92 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b66:	f083 0320 	eor.w	r3, r3, #32
 8004b6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
 8004b90:	e01d      	b.n	8004bce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	376c      	adds	r7, #108	; 0x6c
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b08d      	sub	sp, #52	; 0x34
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	7b1b      	ldrb	r3, [r3, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 808e 	bne.w	8004d44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d044      	beq.n	8004cba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	81bb      	strh	r3, [r7, #12]
 8004c3e:	89bb      	ldrh	r3, [r7, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <USB_DeactivateEndpoint+0x6c>
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	817b      	strh	r3, [r7, #10]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	813b      	strh	r3, [r7, #8]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
 8004cb8:	e192      	b.n	8004fe0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	827b      	strh	r3, [r7, #18]
 8004cc8:	8a7b      	ldrh	r3, [r7, #18]
 8004cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01b      	beq.n	8004d0a <USB_DeactivateEndpoint+0xf6>
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce8:	823b      	strh	r3, [r7, #16]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	8a3b      	ldrh	r3, [r7, #16]
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	81fb      	strh	r3, [r7, #14]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	89fb      	ldrh	r3, [r7, #14]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
 8004d42:	e14d      	b.n	8004fe0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 80a5 	bne.w	8004e98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	843b      	strh	r3, [r7, #32]
 8004d5c:	8c3b      	ldrh	r3, [r7, #32]
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <USB_DeactivateEndpoint+0x18a>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	83fb      	strh	r3, [r7, #30]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8bfb      	ldrh	r3, [r7, #30]
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	83bb      	strh	r3, [r7, #28]
 8004dac:	8bbb      	ldrh	r3, [r7, #28]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <USB_DeactivateEndpoint+0x1da>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	837b      	strh	r3, [r7, #26]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8b7b      	ldrh	r3, [r7, #26]
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	833b      	strh	r3, [r7, #24]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8b3b      	ldrh	r3, [r7, #24]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	82fb      	strh	r3, [r7, #22]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8afb      	ldrh	r3, [r7, #22]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	82bb      	strh	r3, [r7, #20]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	8abb      	ldrh	r3, [r7, #20]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e0a3      	b.n	8004fe0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ea6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <USB_DeactivateEndpoint+0x2d4>
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <USB_DeactivateEndpoint+0x324>
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3734      	adds	r7, #52	; 0x34
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0cc      	sub	sp, #304	; 0x130
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffa:	6018      	str	r0, [r3, #0]
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b01      	cmp	r3, #1
 8005014:	f041 817d 	bne.w	8006312 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d908      	bls.n	8005046 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005044:	e007      	b.n	8005056 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	7b1b      	ldrb	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d152      	bne.n	800510c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	88da      	ldrh	r2, [r3, #6]
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	b29b      	uxth	r3, r3
 8005084:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005088:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f001 ff23 	bl	8006ed8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800509a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800509e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4619      	mov	r1, r3
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050c4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	440a      	add	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	011a      	lsls	r2, r3, #4
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	f001 b8b5 	b.w	8006276 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	2b02      	cmp	r3, #2
 800511a:	f040 84c6 	bne.w	8005aaa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800511e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	429a      	cmp	r2, r3
 8005138:	f240 8443 	bls.w	80059c2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 823e 	beq.w	800565a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 809a 	bne.w	8005338 <USB_EPStartXfer+0x34c>
 8005204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005210:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005236:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	440a      	add	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	011a      	lsls	r2, r3, #4
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4413      	add	r3, r2
 800525a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800525e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005262:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d122      	bne.n	80052b6 <USB_EPStartXfer+0x2ca>
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005282:	b29a      	uxth	r2, r3
 8005284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e079      	b.n	80053aa <USB_EPStartXfer+0x3be>
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	2b3e      	cmp	r3, #62	; 0x3e
 80052bc:	d81b      	bhi.n	80052f6 <USB_EPStartXfer+0x30a>
 80052be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <USB_EPStartXfer+0x2f2>
 80052d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052d8:	3301      	adds	r3, #1
 80052da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	029b      	lsls	r3, r3, #10
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e059      	b.n	80053aa <USB_EPStartXfer+0x3be>
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <USB_EPStartXfer+0x32a>
 800530c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005310:	3b01      	subs	r3, #1
 8005312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005328:	b29a      	uxth	r2, r3
 800532a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e038      	b.n	80053aa <USB_EPStartXfer+0x3be>
 8005338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d130      	bne.n	80053aa <USB_EPStartXfer+0x3be>
 8005348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	4619      	mov	r1, r3
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005362:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005366:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	440a      	add	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	011a      	lsls	r2, r3, #4
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4413      	add	r3, r2
 800538a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539c:	b29a      	uxth	r2, r3
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	895b      	ldrh	r3, [r3, #10]
 80053b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6959      	ldr	r1, [r3, #20]
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053d8:	6800      	ldr	r0, [r0, #0]
 80053da:	f001 fd7d 	bl	8006ed8 <USB_WritePMA>
            ep->xfer_buff += len;
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	441a      	add	r2, r3
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	429a      	cmp	r2, r3
 8005416:	d90f      	bls.n	8005438 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	621a      	str	r2, [r3, #32]
 8005436:	e00e      	b.n	8005456 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 809a 	bne.w	800559c <USB_EPStartXfer+0x5b0>
 8005468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005470:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005474:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	4619      	mov	r1, r3
 800548e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005492:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005496:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800549a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	440a      	add	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	011a      	lsls	r2, r3, #4
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4413      	add	r3, r2
 80054be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d122      	bne.n	800551a <USB_EPStartXfer+0x52e>
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550a:	b29a      	uxth	r2, r3
 800550c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005510:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e083      	b.n	8005622 <USB_EPStartXfer+0x636>
 800551a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551e:	2b3e      	cmp	r3, #62	; 0x3e
 8005520:	d81b      	bhi.n	800555a <USB_EPStartXfer+0x56e>
 8005522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800552c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <USB_EPStartXfer+0x556>
 8005538:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800553c:	3301      	adds	r3, #1
 800553e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005542:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005546:	b29b      	uxth	r3, r3
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	b29a      	uxth	r2, r3
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	e063      	b.n	8005622 <USB_EPStartXfer+0x636>
 800555a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <USB_EPStartXfer+0x58e>
 8005570:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005574:	3b01      	subs	r3, #1
 8005576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800557a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800557e:	b29b      	uxth	r3, r3
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e042      	b.n	8005622 <USB_EPStartXfer+0x636>
 800559c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d13a      	bne.n	8005622 <USB_EPStartXfer+0x636>
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	4619      	mov	r1, r3
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	440a      	add	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4413      	add	r3, r2
 8005602:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	b29a      	uxth	r2, r3
 8005616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	891b      	ldrh	r3, [r3, #8]
 800562e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6959      	ldr	r1, [r3, #20]
 800563e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005642:	b29b      	uxth	r3, r3
 8005644:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005648:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800564c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005650:	6800      	ldr	r0, [r0, #0]
 8005652:	f001 fc41 	bl	8006ed8 <USB_WritePMA>
 8005656:	f000 be0e 	b.w	8006276 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d16d      	bne.n	8005746 <USB_EPStartXfer+0x75a>
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	64bb      	str	r3, [r7, #72]	; 0x48
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568a:	4413      	add	r3, r2
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	011a      	lsls	r2, r3, #4
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	4413      	add	r3, r2
 80056a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
 80056a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d112      	bne.n	80056d4 <USB_EPStartXfer+0x6e8>
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e063      	b.n	800579c <USB_EPStartXfer+0x7b0>
 80056d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d8:	2b3e      	cmp	r3, #62	; 0x3e
 80056da:	d817      	bhi.n	800570c <USB_EPStartXfer+0x720>
 80056dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <USB_EPStartXfer+0x710>
 80056f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056f6:	3301      	adds	r3, #1
 80056f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005700:	b29b      	uxth	r3, r3
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	b29a      	uxth	r2, r3
 8005706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	e047      	b.n	800579c <USB_EPStartXfer+0x7b0>
 800570c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <USB_EPStartXfer+0x740>
 8005722:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005726:	3b01      	subs	r3, #1
 8005728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800572c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573e:	b29a      	uxth	r2, r3
 8005740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e02a      	b.n	800579c <USB_EPStartXfer+0x7b0>
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d122      	bne.n	800579c <USB_EPStartXfer+0x7b0>
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	4413      	add	r3, r2
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
 800577a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	011a      	lsls	r2, r3, #4
 8005788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578a:	4413      	add	r3, r2
 800578c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005796:	b29a      	uxth	r2, r3
 8005798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800579c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	891b      	ldrh	r3, [r3, #8]
 80057a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6959      	ldr	r1, [r3, #20]
 80057b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	f001 fb84 	bl	8006ed8 <USB_WritePMA>
            ep->xfer_buff += len;
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	441a      	add	r2, r3
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d90f      	bls.n	800582a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	621a      	str	r2, [r3, #32]
 8005828:	e00e      	b.n	8005848 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2200      	movs	r2, #0
 8005846:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d16d      	bne.n	8005940 <USB_EPStartXfer+0x954>
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	4413      	add	r3, r2
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
 8005888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	4413      	add	r3, r2
 800589a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d112      	bne.n	80058ce <USB_EPStartXfer+0x8e2>
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e05d      	b.n	800598a <USB_EPStartXfer+0x99e>
 80058ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d2:	2b3e      	cmp	r3, #62	; 0x3e
 80058d4:	d817      	bhi.n	8005906 <USB_EPStartXfer+0x91a>
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <USB_EPStartXfer+0x90a>
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e041      	b.n	800598a <USB_EPStartXfer+0x99e>
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <USB_EPStartXfer+0x93a>
 800591c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005920:	3b01      	subs	r3, #1
 8005922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29b      	uxth	r3, r3
 8005930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005938:	b29a      	uxth	r2, r3
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	e024      	b.n	800598a <USB_EPStartXfer+0x99e>
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d11c      	bne.n	800598a <USB_EPStartXfer+0x99e>
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005964:	4413      	add	r3, r2
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	011a      	lsls	r2, r3, #4
 8005976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005978:	4413      	add	r3, r2
 800597a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	b29a      	uxth	r2, r3
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	895b      	ldrh	r3, [r3, #10]
 8005996:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6959      	ldr	r1, [r3, #20]
 80059a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059b8:	6800      	ldr	r0, [r0, #0]
 80059ba:	f001 fa8d 	bl	8006ed8 <USB_WritePMA>
 80059be:	f000 bc5a 	b.w	8006276 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a4e:	4413      	add	r3, r2
 8005a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	891b      	ldrh	r3, [r3, #8]
 8005a80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6959      	ldr	r1, [r3, #20]
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005aa2:	6800      	ldr	r0, [r0, #0]
 8005aa4:	f001 fa18 	bl	8006ed8 <USB_WritePMA>
 8005aa8:	e3e5      	b.n	8006276 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 81bc 	beq.w	8005ec4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d16d      	bne.n	8005c46 <USB_EPStartXfer+0xc5a>
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8a:	4413      	add	r3, r2
 8005b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	011a      	lsls	r2, r3, #4
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba4:	677b      	str	r3, [r7, #116]	; 0x74
 8005ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d112      	bne.n	8005bd4 <USB_EPStartXfer+0xbe8>
 8005bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e060      	b.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bda:	d817      	bhi.n	8005c0c <USB_EPStartXfer+0xc20>
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <USB_EPStartXfer+0xc10>
 8005bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e044      	b.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <USB_EPStartXfer+0xc40>
 8005c22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c26:	3b01      	subs	r3, #1
 8005c28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e027      	b.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d11f      	bne.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	895b      	ldrh	r3, [r3, #10]
 8005ca2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6959      	ldr	r1, [r3, #20]
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cbc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cc0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cc4:	6800      	ldr	r0, [r0, #0]
 8005cc6:	f001 f907 	bl	8006ed8 <USB_WritePMA>
          ep->xfer_buff += len;
 8005cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cda:	441a      	add	r2, r3
 8005cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d90f      	bls.n	8005d24 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a1a      	ldr	r2, [r3, #32]
 8005d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	621a      	str	r2, [r3, #32]
 8005d22:	e00e      	b.n	8005d42 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8295 	beq.w	8006276 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d16d      	bne.n	8005e38 <USB_EPStartXfer+0xe4c>
 8005d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7c:	4413      	add	r3, r2
 8005d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	011a      	lsls	r2, r3, #4
 8005d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d90:	4413      	add	r3, r2
 8005d92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d96:	667b      	str	r3, [r7, #100]	; 0x64
 8005d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d112      	bne.n	8005dc6 <USB_EPStartXfer+0xdda>
 8005da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e063      	b.n	8005e8e <USB_EPStartXfer+0xea2>
 8005dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dca:	2b3e      	cmp	r3, #62	; 0x3e
 8005dcc:	d817      	bhi.n	8005dfe <USB_EPStartXfer+0xe12>
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <USB_EPStartXfer+0xe02>
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e047      	b.n	8005e8e <USB_EPStartXfer+0xea2>
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <USB_EPStartXfer+0xe32>
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e02a      	b.n	8005e8e <USB_EPStartXfer+0xea2>
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d122      	bne.n	8005e8e <USB_EPStartXfer+0xea2>
 8005e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	673b      	str	r3, [r7, #112]	; 0x70
 8005e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e68:	4413      	add	r3, r2
 8005e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	011a      	lsls	r2, r3, #4
 8005e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	891b      	ldrh	r3, [r3, #8]
 8005e9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005eb4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005eb8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f001 f80b 	bl	8006ed8 <USB_WritePMA>
 8005ec2:	e1d8      	b.n	8006276 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d178      	bne.n	8005fc6 <USB_EPStartXfer+0xfda>
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ef8:	4413      	add	r3, r2
 8005efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	011a      	lsls	r2, r3, #4
 8005f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <USB_EPStartXfer+0xf64>
 8005f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e06b      	b.n	8006028 <USB_EPStartXfer+0x103c>
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	2b3e      	cmp	r3, #62	; 0x3e
 8005f56:	d818      	bhi.n	8005f8a <USB_EPStartXfer+0xf9e>
 8005f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <USB_EPStartXfer+0xf8c>
 8005f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f72:	3301      	adds	r3, #1
 8005f74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e04e      	b.n	8006028 <USB_EPStartXfer+0x103c>
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <USB_EPStartXfer+0xfbe>
 8005fa0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005faa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	029b      	lsls	r3, r3, #10
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e030      	b.n	8006028 <USB_EPStartXfer+0x103c>
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d128      	bne.n	8006028 <USB_EPStartXfer+0x103c>
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	011a      	lsls	r2, r3, #4
 800600e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006012:	4413      	add	r3, r2
 8006014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006026:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	891b      	ldrh	r3, [r3, #8]
 8006034:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6959      	ldr	r1, [r3, #20]
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006048:	b29b      	uxth	r3, r3
 800604a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800604e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006052:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f000 ff3e 	bl	8006ed8 <USB_WritePMA>
          ep->xfer_buff += len;
 800605c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606c:	441a      	add	r2, r3
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d90f      	bls.n	80060b6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	621a      	str	r2, [r3, #32]
 80060b4:	e00e      	b.n	80060d4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80060d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80cc 	beq.w	8006276 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d178      	bne.n	80061ee <USB_EPStartXfer+0x1202>
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006120:	4413      	add	r3, r2
 8006122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	011a      	lsls	r2, r3, #4
 8006134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006138:	4413      	add	r3, r2
 800613a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800613e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <USB_EPStartXfer+0x118c>
 800614a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e064      	b.n	8006242 <USB_EPStartXfer+0x1256>
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	2b3e      	cmp	r3, #62	; 0x3e
 800617e:	d818      	bhi.n	80061b2 <USB_EPStartXfer+0x11c6>
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800618a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <USB_EPStartXfer+0x11b4>
 8006196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619a:	3301      	adds	r3, #1
 800619c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	029b      	lsls	r3, r3, #10
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e047      	b.n	8006242 <USB_EPStartXfer+0x1256>
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <USB_EPStartXfer+0x11e6>
 80061c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061cc:	3b01      	subs	r3, #1
 80061ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	029b      	lsls	r3, r3, #10
 80061da:	b29b      	uxth	r3, r3
 80061dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	e029      	b.n	8006242 <USB_EPStartXfer+0x1256>
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d121      	bne.n	8006242 <USB_EPStartXfer+0x1256>
 80061fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620c:	b29b      	uxth	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006214:	4413      	add	r3, r2
 8006216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	011a      	lsls	r2, r3, #4
 8006228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800622c:	4413      	add	r3, r2
 800622e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006240:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	895b      	ldrh	r3, [r3, #10]
 800624e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6959      	ldr	r1, [r3, #20]
 800625e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006262:	b29b      	uxth	r3, r3
 8006264:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006268:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800626c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006270:	6800      	ldr	r0, [r0, #0]
 8006272:	f000 fe31 	bl	8006ed8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006298:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a4:	8013      	strh	r3, [r2, #0]
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062b2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	f082 0210 	eor.w	r2, r2, #16
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062ca:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062ce:	8812      	ldrh	r2, [r2, #0]
 80062d0:	f082 0220 	eor.w	r2, r2, #32
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630a:	b29b      	uxth	r3, r3
 800630c:	8013      	strh	r3, [r2, #0]
 800630e:	f000 bc9f 	b.w	8006c50 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	7b1b      	ldrb	r3, [r3, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 80ae 	bne.w	8006480 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	429a      	cmp	r2, r3
 800633e:	d917      	bls.n	8006370 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	1ad2      	subs	r2, r2, r3
 8006362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	619a      	str	r2, [r3, #24]
 800636e:	e00e      	b.n	800638e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800639c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063b2:	4413      	add	r3, r2
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	011a      	lsls	r2, r3, #4
 80063c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063ca:	4413      	add	r3, r2
 80063cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d116      	bne.n	800640a <USB_EPStartXfer+0x141e>
 80063dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e3e8      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	2b3e      	cmp	r3, #62	; 0x3e
 8006410:	d818      	bhi.n	8006444 <USB_EPStartXfer+0x1458>
 8006412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <USB_EPStartXfer+0x1446>
 8006428:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642c:	3301      	adds	r3, #1
 800642e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e3cb      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <USB_EPStartXfer+0x1478>
 800645a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645e:	3b01      	subs	r3, #1
 8006460:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006468:	b29b      	uxth	r3, r3
 800646a:	029b      	lsls	r3, r3, #10
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e3ad      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	78db      	ldrb	r3, [r3, #3]
 800648c:	2b02      	cmp	r3, #2
 800648e:	f040 8200 	bne.w	8006892 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 8091 	bne.w	80065c6 <USB_EPStartXfer+0x15da>
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064c8:	4413      	add	r3, r2
 80064ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	011a      	lsls	r2, r3, #4
 80064dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d116      	bne.n	8006528 <USB_EPStartXfer+0x153c>
 80064fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	e083      	b.n	8006630 <USB_EPStartXfer+0x1644>
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b3e      	cmp	r3, #62	; 0x3e
 8006536:	d820      	bhi.n	800657a <USB_EPStartXfer+0x158e>
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800654a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <USB_EPStartXfer+0x157c>
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	3301      	adds	r3, #1
 8006564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e05a      	b.n	8006630 <USB_EPStartXfer+0x1644>
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800658c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <USB_EPStartXfer+0x15be>
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a4:	3b01      	subs	r3, #1
 80065a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065bc:	b29a      	uxth	r2, r3
 80065be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e034      	b.n	8006630 <USB_EPStartXfer+0x1644>
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d12c      	bne.n	8006630 <USB_EPStartXfer+0x1644>
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fa:	4413      	add	r3, r2
 80065fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	4413      	add	r3, r2
 8006614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 8091 	bne.w	8006772 <USB_EPStartXfer+0x1786>
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666c:	b29b      	uxth	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006674:	4413      	add	r3, r2
 8006676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	011a      	lsls	r2, r3, #4
 8006688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800668c:	4413      	add	r3, r2
 800668e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <USB_EPStartXfer+0x16e8>
 80066a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e07c      	b.n	80067ce <USB_EPStartXfer+0x17e2>
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b3e      	cmp	r3, #62	; 0x3e
 80066e2:	d820      	bhi.n	8006726 <USB_EPStartXfer+0x173a>
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <USB_EPStartXfer+0x1728>
 800670a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800670e:	3301      	adds	r3, #1
 8006710:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006718:	b29b      	uxth	r3, r3
 800671a:	029b      	lsls	r3, r3, #10
 800671c:	b29a      	uxth	r2, r3
 800671e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e053      	b.n	80067ce <USB_EPStartXfer+0x17e2>
 8006726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <USB_EPStartXfer+0x176a>
 800674c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006750:	3b01      	subs	r3, #1
 8006752:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006768:	b29a      	uxth	r2, r3
 800676a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e02d      	b.n	80067ce <USB_EPStartXfer+0x17e2>
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d125      	bne.n	80067ce <USB_EPStartXfer+0x17e2>
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006798:	4413      	add	r3, r2
 800679a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 81fe 	beq.w	8006bdc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006800:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <USB_EPStartXfer+0x182c>
 800680c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006818:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800681c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 81db 	bne.w	8006bdc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006826:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 81d4 	bne.w	8006bdc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800685e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]
 8006890:	e1a4      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	f040 819a 	bne.w	8006bd8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d917      	bls.n	80068f0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80068d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e0:	1ad2      	subs	r2, r2, r3
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	619a      	str	r2, [r3, #24]
 80068ee:	e00e      	b.n	800690e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d178      	bne.n	8006a10 <USB_EPStartXfer+0x1a24>
 800691e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006942:	4413      	add	r3, r2
 8006944:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800695a:	4413      	add	r3, r2
 800695c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006960:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d116      	bne.n	800699a <USB_EPStartXfer+0x19ae>
 800696c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e06b      	b.n	8006a72 <USB_EPStartXfer+0x1a86>
 800699a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699e:	2b3e      	cmp	r3, #62	; 0x3e
 80069a0:	d818      	bhi.n	80069d4 <USB_EPStartXfer+0x19e8>
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <USB_EPStartXfer+0x19d6>
 80069b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069bc:	3301      	adds	r3, #1
 80069be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e04e      	b.n	8006a72 <USB_EPStartXfer+0x1a86>
 80069d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <USB_EPStartXfer+0x1a08>
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ee:	3b01      	subs	r3, #1
 80069f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e030      	b.n	8006a72 <USB_EPStartXfer+0x1a86>
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d128      	bne.n	8006a72 <USB_EPStartXfer+0x1a86>
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	4413      	add	r3, r2
 8006a46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	011a      	lsls	r2, r3, #4
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d178      	bne.n	8006b82 <USB_EPStartXfer+0x1b96>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	011a      	lsls	r2, r3, #4
 8006ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d116      	bne.n	8006b0c <USB_EPStartXfer+0x1b20>
 8006ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	e067      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	2b3e      	cmp	r3, #62	; 0x3e
 8006b12:	d818      	bhi.n	8006b46 <USB_EPStartXfer+0x1b5a>
 8006b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <USB_EPStartXfer+0x1b48>
 8006b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e04a      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <USB_EPStartXfer+0x1b7a>
 8006b5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e02c      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d124      	bne.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	4413      	add	r3, r2
 8006baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	011a      	lsls	r2, r3, #4
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e001      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e03a      	b.n	8006c52 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c84:	81bb      	strh	r3, [r7, #12]
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	f083 0310 	eor.w	r3, r3, #16
 8006c8c:	81bb      	strh	r3, [r7, #12]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	89bb      	ldrh	r3, [r7, #12]
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]
 8006cae:	e01f      	b.n	8006cf0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	81fb      	strh	r3, [r7, #14]
 8006cc8:	89fb      	ldrh	r3, [r7, #14]
 8006cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cce:	81fb      	strh	r3, [r7, #14]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	441a      	add	r2, r3
 8006cda:	89fb      	ldrh	r3, [r7, #14]
 8006cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	7b1b      	ldrb	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 809d 	bne.w	8006e4a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d04c      	beq.n	8006db2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	823b      	strh	r3, [r7, #16]
 8006d26:	8a3b      	ldrh	r3, [r7, #16]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01b      	beq.n	8006d68 <USB_EPClearStall+0x6c>
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	81fb      	strh	r3, [r7, #14]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	89fb      	ldrh	r3, [r7, #14]
 8006d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	78db      	ldrb	r3, [r3, #3]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d06c      	beq.n	8006e4a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d86:	81bb      	strh	r3, [r7, #12]
 8006d88:	89bb      	ldrh	r3, [r7, #12]
 8006d8a:	f083 0320 	eor.w	r3, r3, #32
 8006d8e:	81bb      	strh	r3, [r7, #12]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
 8006db0:	e04b      	b.n	8006e4a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	82fb      	strh	r3, [r7, #22]
 8006dc0:	8afb      	ldrh	r3, [r7, #22]
 8006dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <USB_EPClearStall+0x106>
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de0:	82bb      	strh	r3, [r7, #20]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	8abb      	ldrh	r3, [r7, #20]
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	827b      	strh	r3, [r7, #18]
 8006e1a:	8a7b      	ldrh	r3, [r7, #18]
 8006e1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e20:	827b      	strh	r3, [r7, #18]
 8006e22:	8a7b      	ldrh	r3, [r7, #18]
 8006e24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e28:	827b      	strh	r3, [r7, #18]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	441a      	add	r2, r3
 8006e34:	8a7b      	ldrh	r3, [r7, #18]
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr

08006ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr

08006ec2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b08d      	sub	sp, #52	; 0x34
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	80fb      	strh	r3, [r7, #6]
 8006eea:	4613      	mov	r3, r2
 8006eec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006eee:	88bb      	ldrh	r3, [r7, #4]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	005a      	lsls	r2, r3, #1
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f10:	e01e      	b.n	8006f50 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	3302      	adds	r3, #2
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	3301      	adds	r3, #1
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1dd      	bne.n	8006f12 <USB_WritePMA+0x3a>
  }
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	3734      	adds	r7, #52	; 0x34
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bc80      	pop	{r7}
 8006f60:	4770      	bx	lr

08006f62 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b08b      	sub	sp, #44	; 0x2c
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	461a      	mov	r2, r3
 8006f70:	460b      	mov	r3, r1
 8006f72:	80fb      	strh	r3, [r7, #6]
 8006f74:	4613      	mov	r3, r2
 8006f76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f78:	88bb      	ldrh	r3, [r7, #4]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	005a      	lsls	r2, r3, #1
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f94:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9a:	e01b      	b.n	8006fd4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	3302      	adds	r3, #2
 8006fcc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e0      	bne.n	8006f9c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fda:	88bb      	ldrh	r3, [r7, #4]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	701a      	strb	r2, [r3, #0]
  }
}
 8006ff6:	bf00      	nop
 8006ff8:	372c      	adds	r7, #44	; 0x2c
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800700c:	2304      	movs	r3, #4
 800700e:	2203      	movs	r2, #3
 8007010:	2181      	movs	r1, #129	; 0x81
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fc83 	bl	800891e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800701e:	2010      	movs	r0, #16
 8007020:	f001 fd92 	bl	8008b48 <USBD_static_malloc>
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007036:	2302      	movs	r3, #2
 8007038:	e005      	b.n	8007046 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	2200      	movs	r2, #0
 8007042:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800705a:	2181      	movs	r1, #129	; 0x81
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fc84 	bl	800896a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007078:	4618      	mov	r0, r3
 800707a:	f001 fd71 	bl	8008b60 <USBD_static_free>
    pdev->pClassData = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d045      	beq.n	800714a <USBD_HID_Setup+0xba>
 80070be:	2b20      	cmp	r3, #32
 80070c0:	f040 80d3 	bne.w	800726a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	3b02      	subs	r3, #2
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d835      	bhi.n	800713a <USBD_HID_Setup+0xaa>
 80070ce:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <USBD_HID_Setup+0x44>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	0800712b 	.word	0x0800712b
 80070d8:	0800710b 	.word	0x0800710b
 80070dc:	0800713b 	.word	0x0800713b
 80070e0:	0800713b 	.word	0x0800713b
 80070e4:	0800713b 	.word	0x0800713b
 80070e8:	0800713b 	.word	0x0800713b
 80070ec:	0800713b 	.word	0x0800713b
 80070f0:	0800713b 	.word	0x0800713b
 80070f4:	08007119 	.word	0x08007119
 80070f8:	080070fd 	.word	0x080070fd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	885b      	ldrh	r3, [r3, #2]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	601a      	str	r2, [r3, #0]
          break;
 8007108:	e01e      	b.n	8007148 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2201      	movs	r2, #1
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f944 	bl	800839e <USBD_CtlSendData>
          break;
 8007116:	e017      	b.n	8007148 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	0a1b      	lsrs	r3, r3, #8
 800711e:	b29b      	uxth	r3, r3
 8007120:	b2db      	uxtb	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	605a      	str	r2, [r3, #4]
          break;
 8007128:	e00e      	b.n	8007148 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	3304      	adds	r3, #4
 800712e:	2201      	movs	r2, #1
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 f933 	bl	800839e <USBD_CtlSendData>
          break;
 8007138:	e006      	b.n	8007148 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f8c4 	bl	80082ca <USBD_CtlError>
          ret = USBD_FAIL;
 8007142:	2302      	movs	r3, #2
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	bf00      	nop
      }
      break;
 8007148:	e096      	b.n	8007278 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b0b      	cmp	r3, #11
 8007150:	f200 8083 	bhi.w	800725a <USBD_HID_Setup+0x1ca>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <USBD_HID_Setup+0xcc>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	0800718d 	.word	0x0800718d
 8007160:	0800725b 	.word	0x0800725b
 8007164:	0800725b 	.word	0x0800725b
 8007168:	0800725b 	.word	0x0800725b
 800716c:	0800725b 	.word	0x0800725b
 8007170:	0800725b 	.word	0x0800725b
 8007174:	080071b5 	.word	0x080071b5
 8007178:	0800725b 	.word	0x0800725b
 800717c:	0800725b 	.word	0x0800725b
 8007180:	0800725b 	.word	0x0800725b
 8007184:	0800720d 	.word	0x0800720d
 8007188:	08007235 	.word	0x08007235
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007192:	2b03      	cmp	r3, #3
 8007194:	d107      	bne.n	80071a6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007196:	f107 030e 	add.w	r3, r7, #14
 800719a:	2202      	movs	r2, #2
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 f8fd 	bl	800839e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071a4:	e060      	b.n	8007268 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 f88e 	bl	80082ca <USBD_CtlError>
            ret = USBD_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	75fb      	strb	r3, [r7, #23]
          break;
 80071b2:	e059      	b.n	8007268 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b22      	cmp	r3, #34	; 0x22
 80071be:	d108      	bne.n	80071d2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	2b2f      	cmp	r3, #47	; 0x2f
 80071c6:	bf28      	it	cs
 80071c8:	232f      	movcs	r3, #47	; 0x2f
 80071ca:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80071cc:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <USBD_HID_Setup+0x1f4>)
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	e015      	b.n	80071fe <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b21      	cmp	r3, #33	; 0x21
 80071dc:	d108      	bne.n	80071f0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80071de:	4b2a      	ldr	r3, [pc, #168]	; (8007288 <USBD_HID_Setup+0x1f8>)
 80071e0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	88db      	ldrh	r3, [r3, #6]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	bf28      	it	cs
 80071ea:	2309      	movcs	r3, #9
 80071ec:	83fb      	strh	r3, [r7, #30]
 80071ee:	e006      	b.n	80071fe <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 f869 	bl	80082ca <USBD_CtlError>
            ret = USBD_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	75fb      	strb	r3, [r7, #23]
            break;
 80071fc:	e034      	b.n	8007268 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80071fe:	8bfb      	ldrh	r3, [r7, #30]
 8007200:	461a      	mov	r2, r3
 8007202:	69b9      	ldr	r1, [r7, #24]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f8ca 	bl	800839e <USBD_CtlSendData>
          break;
 800720a:	e02d      	b.n	8007268 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007212:	2b03      	cmp	r3, #3
 8007214:	d107      	bne.n	8007226 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	3308      	adds	r3, #8
 800721a:	2201      	movs	r2, #1
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 f8bd 	bl	800839e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007224:	e020      	b.n	8007268 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f84e 	bl	80082ca <USBD_CtlError>
            ret = USBD_FAIL;
 800722e:	2302      	movs	r3, #2
 8007230:	75fb      	strb	r3, [r7, #23]
          break;
 8007232:	e019      	b.n	8007268 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723a:	2b03      	cmp	r3, #3
 800723c:	d106      	bne.n	800724c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800724a:	e00d      	b.n	8007268 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 f83b 	bl	80082ca <USBD_CtlError>
            ret = USBD_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	75fb      	strb	r3, [r7, #23]
          break;
 8007258:	e006      	b.n	8007268 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f834 	bl	80082ca <USBD_CtlError>
          ret = USBD_FAIL;
 8007262:	2302      	movs	r3, #2
 8007264:	75fb      	strb	r3, [r7, #23]
          break;
 8007266:	bf00      	nop
      }
      break;
 8007268:	e006      	b.n	8007278 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 f82c 	bl	80082ca <USBD_CtlError>
      ret = USBD_FAIL;
 8007272:	2302      	movs	r3, #2
 8007274:	75fb      	strb	r3, [r7, #23]
      break;
 8007276:	bf00      	nop
  }

  return ret;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	200000c8 	.word	0x200000c8
 8007288:	200000b0 	.word	0x200000b0

0800728c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d10c      	bne.n	80072c6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	7b1b      	ldrb	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d108      	bne.n	80072c6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2201      	movs	r2, #1
 80072b8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	2181      	movs	r1, #129	; 0x81
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f001 fbfa 	bl	8008aba <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2222      	movs	r2, #34	; 0x22
 80072dc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000044 	.word	0x20000044

080072f0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2222      	movs	r2, #34	; 0x22
 80072fc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80072fe:	4b03      	ldr	r3, [pc, #12]	; (800730c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000068 	.word	0x20000068

08007310 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2222      	movs	r2, #34	; 0x22
 800731c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	2000008c 	.word	0x2000008c

08007330 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	2200      	movs	r2, #0
 8007344:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr
	...

08007354 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	220a      	movs	r2, #10
 8007360:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	200000bc 	.word	0x200000bc

08007374 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007388:	2302      	movs	r3, #2
 800738a:	e01a      	b.n	80073c2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	79fa      	ldrb	r2, [r7, #7]
 80073b8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 fa4c 	bl	8008858 <USBD_LL_Init>

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d006      	beq.n	80073ec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]
 80073ea:	e001      	b.n	80073f0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073ec:	2302      	movs	r3, #2
 80073ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fa6f 	bl	80088e8 <USBD_LL_Start>

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007434:	2302      	movs	r3, #2
 8007436:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	4611      	mov	r1, r2
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fed7 	bl	8008252 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d016      	beq.n	80074f6 <USBD_LL_SetupStage+0x6a>
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d81c      	bhi.n	8007506 <USBD_LL_SetupStage+0x7a>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <USBD_LL_SetupStage+0x4a>
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d008      	beq.n	80074e6 <USBD_LL_SetupStage+0x5a>
 80074d4:	e017      	b.n	8007506 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9ca 	bl	8007878 <USBD_StdDevReq>
      break;
 80074e4:	e01a      	b.n	800751c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa2c 	bl	800794c <USBD_StdItfReq>
      break;
 80074f4:	e012      	b.n	800751c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa6c 	bl	80079dc <USBD_StdEPReq>
      break;
 8007504:	e00a      	b.n	800751c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800750c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007510:	b2db      	uxtb	r3, r3
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fa47 	bl	80089a8 <USBD_LL_StallEP>
      break;
 800751a:	bf00      	nop
  }

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	460b      	mov	r3, r1
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d14b      	bne.n	80075d2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007540:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007548:	2b03      	cmp	r3, #3
 800754a:	d134      	bne.n	80075b6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d919      	bls.n	800758c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	1ad2      	subs	r2, r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800756e:	429a      	cmp	r2, r3
 8007570:	d203      	bcs.n	800757a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007576:	b29b      	uxth	r3, r3
 8007578:	e002      	b.n	8007580 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 ff38 	bl	80083fa <USBD_CtlContinueRx>
 800758a:	e038      	b.n	80075fe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d105      	bne.n	80075ae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 ff35 	bl	800841e <USBD_CtlSendStatus>
 80075b4:	e023      	b.n	80075fe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d11e      	bne.n	80075fe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075c8:	2100      	movs	r1, #0
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f001 f9ec 	bl	80089a8 <USBD_LL_StallEP>
 80075d0:	e015      	b.n	80075fe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d108      	bne.n	80075fa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	7afa      	ldrb	r2, [r7, #11]
 80075f2:	4611      	mov	r1, r2
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	4798      	blx	r3
 80075f8:	e001      	b.n	80075fe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075fa:	2302      	movs	r3, #2
 80075fc:	e000      	b.n	8007600 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	460b      	mov	r3, r1
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007616:	7afb      	ldrb	r3, [r7, #11]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d17f      	bne.n	800771c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3314      	adds	r3, #20
 8007620:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007628:	2b02      	cmp	r3, #2
 800762a:	d15c      	bne.n	80076e6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	429a      	cmp	r2, r3
 8007636:	d915      	bls.n	8007664 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	1ad2      	subs	r2, r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fec0 	bl	80083d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007656:	2300      	movs	r3, #0
 8007658:	2200      	movs	r2, #0
 800765a:	2100      	movs	r1, #0
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f001 fa4f 	bl	8008b00 <USBD_LL_PrepareReceive>
 8007662:	e04e      	b.n	8007702 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	6912      	ldr	r2, [r2, #16]
 800766c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007670:	fb01 f202 	mul.w	r2, r1, r2
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d11c      	bne.n	80076b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007682:	429a      	cmp	r2, r3
 8007684:	d316      	bcc.n	80076b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007690:	429a      	cmp	r2, r3
 8007692:	d20f      	bcs.n	80076b4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007694:	2200      	movs	r2, #0
 8007696:	2100      	movs	r1, #0
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fe9c 	bl	80083d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076a6:	2300      	movs	r3, #0
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f001 fa27 	bl	8008b00 <USBD_LL_PrepareReceive>
 80076b2:	e026      	b.n	8007702 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d105      	bne.n	80076d6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076d6:	2180      	movs	r1, #128	; 0x80
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 f965 	bl	80089a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 feb0 	bl	8008444 <USBD_CtlReceiveStatus>
 80076e4:	e00d      	b.n	8007702 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d004      	beq.n	80076fa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076fa:	2180      	movs	r1, #128	; 0x80
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f001 f953 	bl	80089a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007708:	2b01      	cmp	r3, #1
 800770a:	d11d      	bne.n	8007748 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f7ff fe81 	bl	8007414 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800771a:	e015      	b.n	8007748 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00d      	beq.n	8007744 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800772e:	2b03      	cmp	r3, #3
 8007730:	d108      	bne.n	8007744 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	7afa      	ldrb	r2, [r7, #11]
 800773c:	4611      	mov	r1, r2
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	4798      	blx	r3
 8007742:	e001      	b.n	8007748 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007744:	2302      	movs	r3, #2
 8007746:	e000      	b.n	800774a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	2200      	movs	r2, #0
 800775e:	2100      	movs	r1, #0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 f8dc 	bl	800891e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2240      	movs	r2, #64	; 0x40
 8007772:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007776:	2340      	movs	r3, #64	; 0x40
 8007778:	2200      	movs	r2, #0
 800777a:	2180      	movs	r1, #128	; 0x80
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f8ce 	bl	800891e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2240      	movs	r2, #64	; 0x40
 800778c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6852      	ldr	r2, [r2, #4]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	4611      	mov	r1, r2
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
  }

  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2204      	movs	r2, #4
 800780a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007828:	2b04      	cmp	r3, #4
 800782a:	d105      	bne.n	8007838 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr

08007844 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007852:	2b03      	cmp	r3, #3
 8007854:	d10b      	bne.n	800786e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d005      	beq.n	800789e <USBD_StdDevReq+0x26>
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d84f      	bhi.n	8007936 <USBD_StdDevReq+0xbe>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <USBD_StdDevReq+0x36>
 800789a:	2b20      	cmp	r3, #32
 800789c:	d14b      	bne.n	8007936 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
      break;
 80078ac:	e048      	b.n	8007940 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d839      	bhi.n	800792a <USBD_StdDevReq+0xb2>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_StdDevReq+0x44>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	0800790d 	.word	0x0800790d
 80078c0:	08007921 	.word	0x08007921
 80078c4:	0800792b 	.word	0x0800792b
 80078c8:	08007917 	.word	0x08007917
 80078cc:	0800792b 	.word	0x0800792b
 80078d0:	080078ef 	.word	0x080078ef
 80078d4:	080078e5 	.word	0x080078e5
 80078d8:	0800792b 	.word	0x0800792b
 80078dc:	08007903 	.word	0x08007903
 80078e0:	080078f9 	.word	0x080078f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9dc 	bl	8007ca4 <USBD_GetDescriptor>
          break;
 80078ec:	e022      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fb3f 	bl	8007f74 <USBD_SetAddress>
          break;
 80078f6:	e01d      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb7e 	bl	8007ffc <USBD_SetConfig>
          break;
 8007900:	e018      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc07 	bl	8008118 <USBD_GetConfig>
          break;
 800790a:	e013      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fc37 	bl	8008182 <USBD_GetStatus>
          break;
 8007914:	e00e      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc65 	bl	80081e8 <USBD_SetFeature>
          break;
 800791e:	e009      	b.n	8007934 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc74 	bl	8008210 <USBD_ClrFeature>
          break;
 8007928:	e004      	b.n	8007934 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fccc 	bl	80082ca <USBD_CtlError>
          break;
 8007932:	bf00      	nop
      }
      break;
 8007934:	e004      	b.n	8007940 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fcc6 	bl	80082ca <USBD_CtlError>
      break;
 800793e:	bf00      	nop
  }

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop

0800794c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d005      	beq.n	8007972 <USBD_StdItfReq+0x26>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d82e      	bhi.n	80079c8 <USBD_StdItfReq+0x7c>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <USBD_StdItfReq+0x26>
 800796e:	2b20      	cmp	r3, #32
 8007970:	d12a      	bne.n	80079c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007978:	3b01      	subs	r3, #1
 800797a:	2b02      	cmp	r3, #2
 800797c:	d81d      	bhi.n	80079ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	889b      	ldrh	r3, [r3, #4]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d813      	bhi.n	80079b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d110      	bne.n	80079c4 <USBD_StdItfReq+0x78>
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10d      	bne.n	80079c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fd38 	bl	800841e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ae:	e009      	b.n	80079c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fc89 	bl	80082ca <USBD_CtlError>
          break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc84 	bl	80082ca <USBD_CtlError>
          break;
 80079c2:	e000      	b.n	80079c6 <USBD_StdItfReq+0x7a>
          break;
 80079c4:	bf00      	nop
      }
      break;
 80079c6:	e004      	b.n	80079d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc7d 	bl	80082ca <USBD_CtlError>
      break;
 80079d0:	bf00      	nop
  }

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	d007      	beq.n	8007a0c <USBD_StdEPReq+0x30>
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	f200 8146 	bhi.w	8007c8e <USBD_StdEPReq+0x2b2>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <USBD_StdEPReq+0x40>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 8141 	bne.w	8007c8e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
      break;
 8007a1a:	e13d      	b.n	8007c98 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d10a      	bne.n	8007a3e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	e12d      	b.n	8007c9a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d007      	beq.n	8007a56 <USBD_StdEPReq+0x7a>
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	f300 811b 	bgt.w	8007c82 <USBD_StdEPReq+0x2a6>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d072      	beq.n	8007b36 <USBD_StdEPReq+0x15a>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d03a      	beq.n	8007aca <USBD_StdEPReq+0xee>
 8007a54:	e115      	b.n	8007c82 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d002      	beq.n	8007a66 <USBD_StdEPReq+0x8a>
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d015      	beq.n	8007a90 <USBD_StdEPReq+0xb4>
 8007a64:	e02b      	b.n	8007abe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00c      	beq.n	8007a86 <USBD_StdEPReq+0xaa>
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d009      	beq.n	8007a86 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 ff96 	bl	80089a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 ff92 	bl	80089a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a84:	e020      	b.n	8007ac8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc1e 	bl	80082ca <USBD_CtlError>
              break;
 8007a8e:	e01b      	b.n	8007ac8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	885b      	ldrh	r3, [r3, #2]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10e      	bne.n	8007ab6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <USBD_StdEPReq+0xda>
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b80      	cmp	r3, #128	; 0x80
 8007aa2:	d008      	beq.n	8007ab6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	88db      	ldrh	r3, [r3, #6]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 ff79 	bl	80089a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fcb1 	bl	800841e <USBD_CtlSendStatus>

              break;
 8007abc:	e004      	b.n	8007ac8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fc02 	bl	80082ca <USBD_CtlError>
              break;
 8007ac6:	bf00      	nop
          }
          break;
 8007ac8:	e0e0      	b.n	8007c8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d002      	beq.n	8007ada <USBD_StdEPReq+0xfe>
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d015      	beq.n	8007b04 <USBD_StdEPReq+0x128>
 8007ad8:	e026      	b.n	8007b28 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <USBD_StdEPReq+0x11e>
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b80      	cmp	r3, #128	; 0x80
 8007ae4:	d009      	beq.n	8007afa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 ff5c 	bl	80089a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ff58 	bl	80089a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af8:	e01c      	b.n	8007b34 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fbe4 	bl	80082ca <USBD_CtlError>
              break;
 8007b02:	e017      	b.n	8007b34 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d112      	bne.n	8007b32 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 ff63 	bl	80089e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fc7c 	bl	800841e <USBD_CtlSendStatus>
              }
              break;
 8007b26:	e004      	b.n	8007b32 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fbcd 	bl	80082ca <USBD_CtlError>
              break;
 8007b30:	e000      	b.n	8007b34 <USBD_StdEPReq+0x158>
              break;
 8007b32:	bf00      	nop
          }
          break;
 8007b34:	e0aa      	b.n	8007c8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d002      	beq.n	8007b46 <USBD_StdEPReq+0x16a>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d032      	beq.n	8007baa <USBD_StdEPReq+0x1ce>
 8007b44:	e097      	b.n	8007c76 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <USBD_StdEPReq+0x180>
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d004      	beq.n	8007b5c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fbb8 	bl	80082ca <USBD_CtlError>
                break;
 8007b5a:	e091      	b.n	8007c80 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da0b      	bge.n	8007b7c <USBD_StdEPReq+0x1a0>
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	3310      	adds	r3, #16
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	3304      	adds	r3, #4
 8007b7a:	e00b      	b.n	8007b94 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	4413      	add	r3, r2
 8007b92:	3304      	adds	r3, #4
 8007b94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fbfb 	bl	800839e <USBD_CtlSendData>
              break;
 8007ba8:	e06a      	b.n	8007c80 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da11      	bge.n	8007bd6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	f003 020f 	and.w	r2, r3, #15
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d117      	bne.n	8007bfc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb7b 	bl	80082ca <USBD_CtlError>
                  break;
 8007bd4:	e054      	b.n	8007c80 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	f003 020f 	and.w	r2, r3, #15
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb68 	bl	80082ca <USBD_CtlError>
                  break;
 8007bfa:	e041      	b.n	8007c80 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	da0b      	bge.n	8007c1c <USBD_StdEPReq+0x240>
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	3310      	adds	r3, #16
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	3304      	adds	r3, #4
 8007c1a:	e00b      	b.n	8007c34 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	3304      	adds	r3, #4
 8007c34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <USBD_StdEPReq+0x266>
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	d103      	bne.n	8007c4a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e00e      	b.n	8007c68 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fee8 	bl	8008a24 <USBD_LL_IsStallEP>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e002      	b.n	8007c68 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb95 	bl	800839e <USBD_CtlSendData>
              break;
 8007c74:	e004      	b.n	8007c80 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb26 	bl	80082ca <USBD_CtlError>
              break;
 8007c7e:	bf00      	nop
          }
          break;
 8007c80:	e004      	b.n	8007c8c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb20 	bl	80082ca <USBD_CtlError>
          break;
 8007c8a:	bf00      	nop
      }
      break;
 8007c8c:	e004      	b.n	8007c98 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fb1a 	bl	80082ca <USBD_CtlError>
      break;
 8007c96:	bf00      	nop
  }

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	f200 8128 	bhi.w	8007f1a <USBD_GetDescriptor+0x276>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USBD_GetDescriptor+0x2c>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007d45 	.word	0x08007d45
 8007cdc:	08007f1b 	.word	0x08007f1b
 8007ce0:	08007f1b 	.word	0x08007f1b
 8007ce4:	08007ebb 	.word	0x08007ebb
 8007ce8:	08007ee7 	.word	0x08007ee7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
      break;
 8007d02:	e112      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7c1b      	ldrb	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10d      	bne.n	8007d28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	f107 0208 	add.w	r2, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	2202      	movs	r2, #2
 8007d24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d26:	e100      	b.n	8007f2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	f107 0208 	add.w	r2, r7, #8
 8007d34:	4610      	mov	r0, r2
 8007d36:	4798      	blx	r3
 8007d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	2202      	movs	r2, #2
 8007d40:	701a      	strb	r2, [r3, #0]
      break;
 8007d42:	e0f2      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	f200 80ac 	bhi.w	8007ea8 <USBD_GetDescriptor+0x204>
 8007d50:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <USBD_GetDescriptor+0xb4>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007da5 	.word	0x08007da5
 8007d60:	08007dd9 	.word	0x08007dd9
 8007d64:	08007e0d 	.word	0x08007e0d
 8007d68:	08007e41 	.word	0x08007e41
 8007d6c:	08007e75 	.word	0x08007e75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d92:	e091      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa97 	bl	80082ca <USBD_CtlError>
            err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
          break;
 8007da2:	e089      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc6:	e077      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa7d 	bl	80082ca <USBD_CtlError>
            err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd6:	e06f      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfa:	e05d      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa63 	bl	80082ca <USBD_CtlError>
            err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0a:	e055      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2e:	e043      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa49 	bl	80082ca <USBD_CtlError>
            err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3e:	e03b      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	7c12      	ldrb	r2, [r2, #16]
 8007e58:	f107 0108 	add.w	r1, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e62:	e029      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa2f 	bl	80082ca <USBD_CtlError>
            err++;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	72fb      	strb	r3, [r7, #11]
          break;
 8007e72:	e021      	b.n	8007eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e96:	e00f      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa15 	bl	80082ca <USBD_CtlError>
            err++;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea6:	e007      	b.n	8007eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa0d 	bl	80082ca <USBD_CtlError>
          err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007eb6:	e038      	b.n	8007f2a <USBD_GetDescriptor+0x286>
 8007eb8:	e037      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	7c1b      	ldrb	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eca:	f107 0208 	add.w	r2, r7, #8
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4798      	blx	r3
 8007ed2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed4:	e029      	b.n	8007f2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9f6 	bl	80082ca <USBD_CtlError>
        err++;
 8007ede:	7afb      	ldrb	r3, [r7, #11]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee4:	e021      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7c1b      	ldrb	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	f107 0208 	add.w	r2, r7, #8
 8007efa:	4610      	mov	r0, r2
 8007efc:	4798      	blx	r3
 8007efe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	2207      	movs	r2, #7
 8007f06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f08:	e00f      	b.n	8007f2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f9dc 	bl	80082ca <USBD_CtlError>
        err++;
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	3301      	adds	r3, #1
 8007f16:	72fb      	strb	r3, [r7, #11]
      break;
 8007f18:	e007      	b.n	8007f2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f9d4 	bl	80082ca <USBD_CtlError>
      err++;
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	3301      	adds	r3, #1
 8007f26:	72fb      	strb	r3, [r7, #11]
      break;
 8007f28:	bf00      	nop
  }

  if (err != 0U)
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d11c      	bne.n	8007f6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f30:	893b      	ldrh	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <USBD_GetDescriptor+0x2b6>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	88da      	ldrh	r2, [r3, #6]
 8007f42:	893b      	ldrh	r3, [r7, #8]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	bf28      	it	cs
 8007f48:	4613      	movcs	r3, r2
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f4e:	893b      	ldrh	r3, [r7, #8]
 8007f50:	461a      	mov	r2, r3
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fa22 	bl	800839e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	88db      	ldrh	r3, [r3, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa5b 	bl	800841e <USBD_CtlSendStatus>
 8007f68:	e000      	b.n	8007f6c <USBD_GetDescriptor+0x2c8>
    return;
 8007f6a:	bf00      	nop
    }
  }
}
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop

08007f74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d130      	bne.n	8007fe8 <USBD_SetAddress+0x74>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	88db      	ldrh	r3, [r3, #6]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d12c      	bne.n	8007fe8 <USBD_SetAddress+0x74>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	2b7f      	cmp	r3, #127	; 0x7f
 8007f94:	d828      	bhi.n	8007fe8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d104      	bne.n	8007fb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f98b 	bl	80082ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	e01d      	b.n	8007ff2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	7bfa      	ldrb	r2, [r7, #15]
 8007fba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fd5a 	bl	8008a7c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa28 	bl	800841e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fdc:	e009      	b.n	8007ff2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	e004      	b.n	8007ff2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f96d 	bl	80082ca <USBD_CtlError>
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b41      	ldr	r3, [pc, #260]	; (8008114 <USBD_SetConfig+0x118>)
 800800e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008010:	4b40      	ldr	r3, [pc, #256]	; (8008114 <USBD_SetConfig+0x118>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d904      	bls.n	8008022 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f955 	bl	80082ca <USBD_CtlError>
 8008020:	e075      	b.n	800810e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	2b02      	cmp	r3, #2
 800802a:	d002      	beq.n	8008032 <USBD_SetConfig+0x36>
 800802c:	2b03      	cmp	r3, #3
 800802e:	d023      	beq.n	8008078 <USBD_SetConfig+0x7c>
 8008030:	e062      	b.n	80080f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008032:	4b38      	ldr	r3, [pc, #224]	; (8008114 <USBD_SetConfig+0x118>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01a      	beq.n	8008070 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800803a:	4b36      	ldr	r3, [pc, #216]	; (8008114 <USBD_SetConfig+0x118>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2203      	movs	r2, #3
 8008048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800804c:	4b31      	ldr	r3, [pc, #196]	; (8008114 <USBD_SetConfig+0x118>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff f9e8 	bl	8007428 <USBD_SetClassConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	2b02      	cmp	r3, #2
 800805c:	d104      	bne.n	8008068 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f932 	bl	80082ca <USBD_CtlError>
            return;
 8008066:	e052      	b.n	800810e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9d8 	bl	800841e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800806e:	e04e      	b.n	800810e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f9d4 	bl	800841e <USBD_CtlSendStatus>
        break;
 8008076:	e04a      	b.n	800810e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008078:	4b26      	ldr	r3, [pc, #152]	; (8008114 <USBD_SetConfig+0x118>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d112      	bne.n	80080a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008088:	4b22      	ldr	r3, [pc, #136]	; (8008114 <USBD_SetConfig+0x118>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008092:	4b20      	ldr	r3, [pc, #128]	; (8008114 <USBD_SetConfig+0x118>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff f9e4 	bl	8007466 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f9bd 	bl	800841e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080a4:	e033      	b.n	800810e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80080a6:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <USBD_SetConfig+0x118>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d01d      	beq.n	80080f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff f9d2 	bl	8007466 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <USBD_SetConfig+0x118>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <USBD_SetConfig+0x118>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff f9a8 	bl	8007428 <USBD_SetClassConfig>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d104      	bne.n	80080e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f8f2 	bl	80082ca <USBD_CtlError>
            return;
 80080e6:	e012      	b.n	800810e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f998 	bl	800841e <USBD_CtlSendStatus>
        break;
 80080ee:	e00e      	b.n	800810e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f994 	bl	800841e <USBD_CtlSendStatus>
        break;
 80080f6:	e00a      	b.n	800810e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f8e5 	bl	80082ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008100:	4b04      	ldr	r3, [pc, #16]	; (8008114 <USBD_SetConfig+0x118>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff f9ad 	bl	8007466 <USBD_ClrClassConfig>
        break;
 800810c:	bf00      	nop
    }
  }
}
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000230 	.word	0x20000230

08008118 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d004      	beq.n	8008134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8cc 	bl	80082ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008132:	e022      	b.n	800817a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	2b02      	cmp	r3, #2
 800813c:	dc02      	bgt.n	8008144 <USBD_GetConfig+0x2c>
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc03      	bgt.n	800814a <USBD_GetConfig+0x32>
 8008142:	e015      	b.n	8008170 <USBD_GetConfig+0x58>
 8008144:	2b03      	cmp	r3, #3
 8008146:	d00b      	beq.n	8008160 <USBD_GetConfig+0x48>
 8008148:	e012      	b.n	8008170 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3308      	adds	r3, #8
 8008154:	2201      	movs	r2, #1
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f920 	bl	800839e <USBD_CtlSendData>
        break;
 800815e:	e00c      	b.n	800817a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	2201      	movs	r2, #1
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f918 	bl	800839e <USBD_CtlSendData>
        break;
 800816e:	e004      	b.n	800817a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8a9 	bl	80082ca <USBD_CtlError>
        break;
 8008178:	bf00      	nop
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008192:	3b01      	subs	r3, #1
 8008194:	2b02      	cmp	r3, #2
 8008196:	d81e      	bhi.n	80081d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d004      	beq.n	80081aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f891 	bl	80082ca <USBD_CtlError>
        break;
 80081a8:	e01a      	b.n	80081e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	330c      	adds	r3, #12
 80081ca:	2202      	movs	r2, #2
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f8e5 	bl	800839e <USBD_CtlSendData>
      break;
 80081d4:	e004      	b.n	80081e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f876 	bl	80082ca <USBD_CtlError>
      break;
 80081de:	bf00      	nop
  }
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d106      	bne.n	8008208 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f90b 	bl	800841e <USBD_CtlSendStatus>
  }
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008220:	3b01      	subs	r3, #1
 8008222:	2b02      	cmp	r3, #2
 8008224:	d80b      	bhi.n	800823e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d10c      	bne.n	8008248 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8f1 	bl	800841e <USBD_CtlSendStatus>
      }
      break;
 800823c:	e004      	b.n	8008248 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f842 	bl	80082ca <USBD_CtlError>
      break;
 8008246:	e000      	b.n	800824a <USBD_ClrFeature+0x3a>
      break;
 8008248:	bf00      	nop
  }
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781a      	ldrb	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	785a      	ldrb	r2, [r3, #1]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	3302      	adds	r3, #2
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	b29a      	uxth	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	3303      	adds	r3, #3
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	b29b      	uxth	r3, r3
 8008280:	4413      	add	r3, r2
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	3304      	adds	r3, #4
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29a      	uxth	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	3305      	adds	r3, #5
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	b29b      	uxth	r3, r3
 800829c:	4413      	add	r3, r2
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	3306      	adds	r3, #6
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	3307      	adds	r3, #7
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	4413      	add	r3, r2
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	80da      	strh	r2, [r3, #6]

}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082d4:	2180      	movs	r1, #128	; 0x80
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fb66 	bl	80089a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fb62 	bl	80089a8 <USBD_LL_StallEP>
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d032      	beq.n	8008368 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f834 	bl	8008370 <USBD_GetLen>
 8008308:	4603      	mov	r3, r0
 800830a:	3301      	adds	r3, #1
 800830c:	b29b      	uxth	r3, r3
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	75fa      	strb	r2, [r7, #23]
 800831c:	461a      	mov	r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	7812      	ldrb	r2, [r2, #0]
 8008326:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	75fa      	strb	r2, [r7, #23]
 800832e:	461a      	mov	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4413      	add	r3, r2
 8008334:	2203      	movs	r2, #3
 8008336:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008338:	e012      	b.n	8008360 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	60fa      	str	r2, [r7, #12]
 8008340:	7dfa      	ldrb	r2, [r7, #23]
 8008342:	1c51      	adds	r1, r2, #1
 8008344:	75f9      	strb	r1, [r7, #23]
 8008346:	4611      	mov	r1, r2
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	440a      	add	r2, r1
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	75fa      	strb	r2, [r7, #23]
 8008356:	461a      	mov	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4413      	add	r3, r2
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e8      	bne.n	800833a <USBD_GetString+0x4e>
    }
  }
}
 8008368:	bf00      	nop
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800837c:	e005      	b.n	800838a <USBD_GetLen+0x1a>
  {
    len++;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	3301      	adds	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3301      	adds	r3, #1
 8008388:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f5      	bne.n	800837e <USBD_GetLen+0xe>
  }

  return len;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr

0800839e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	4613      	mov	r3, r2
 80083aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	2100      	movs	r1, #0
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 fb77 	bl	8008aba <USBD_LL_Transmit>

  return USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	2100      	movs	r1, #0
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 fb65 	bl	8008aba <USBD_LL_Transmit>

  return USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	2100      	movs	r1, #0
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fb76 	bl	8008b00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2204      	movs	r2, #4
 800842a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800842e:	2300      	movs	r3, #0
 8008430:	2200      	movs	r2, #0
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb40 	bl	8008aba <USBD_LL_Transmit>

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2205      	movs	r2, #5
 8008450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008454:	2300      	movs	r3, #0
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fb50 	bl	8008b00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008470:	2200      	movs	r2, #0
 8008472:	490e      	ldr	r1, [pc, #56]	; (80084ac <MX_USB_DEVICE_Init+0x40>)
 8008474:	480e      	ldr	r0, [pc, #56]	; (80084b0 <MX_USB_DEVICE_Init+0x44>)
 8008476:	f7fe ff7d 	bl	8007374 <USBD_Init>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008480:	f7f8 f8cc 	bl	800061c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008484:	490b      	ldr	r1, [pc, #44]	; (80084b4 <MX_USB_DEVICE_Init+0x48>)
 8008486:	480a      	ldr	r0, [pc, #40]	; (80084b0 <MX_USB_DEVICE_Init+0x44>)
 8008488:	f7fe ff9f 	bl	80073ca <USBD_RegisterClass>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008492:	f7f8 f8c3 	bl	800061c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008496:	4806      	ldr	r0, [pc, #24]	; (80084b0 <MX_USB_DEVICE_Init+0x44>)
 8008498:	f7fe ffb0 	bl	80073fc <USBD_Start>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80084a2:	f7f8 f8bb 	bl	800061c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200000f8 	.word	0x200000f8
 80084b0:	20000234 	.word	0x20000234
 80084b4:	2000000c 	.word	0x2000000c

080084b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2212      	movs	r2, #18
 80084c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20000114 	.word	0x20000114

080084dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2204      	movs	r2, #4
 80084ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000128 	.word	0x20000128

08008500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d105      	bne.n	800851e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4907      	ldr	r1, [pc, #28]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
 8008516:	4808      	ldr	r0, [pc, #32]	; (8008538 <USBD_FS_ProductStrDescriptor+0x38>)
 8008518:	f7ff fee8 	bl	80082ec <USBD_GetString>
 800851c:	e004      	b.n	8008528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4904      	ldr	r1, [pc, #16]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
 8008522:	4805      	ldr	r0, [pc, #20]	; (8008538 <USBD_FS_ProductStrDescriptor+0x38>)
 8008524:	f7ff fee2 	bl	80082ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200004f8 	.word	0x200004f8
 8008538:	08008c60 	.word	0x08008c60

0800853c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	4904      	ldr	r1, [pc, #16]	; (800855c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800854e:	f7ff fecd 	bl	80082ec <USBD_GetString>
  return USBD_StrDesc;
 8008552:	4b02      	ldr	r3, [pc, #8]	; (800855c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200004f8 	.word	0x200004f8
 8008560:	08008c78 	.word	0x08008c78

08008564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	221a      	movs	r2, #26
 8008574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008576:	f000 f843 	bl	8008600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800857a:	4b02      	ldr	r3, [pc, #8]	; (8008584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	2000012c 	.word	0x2000012c

08008588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4907      	ldr	r1, [pc, #28]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800859e:	4808      	ldr	r0, [pc, #32]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a0:	f7ff fea4 	bl	80082ec <USBD_GetString>
 80085a4:	e004      	b.n	80085b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4904      	ldr	r1, [pc, #16]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085ac:	f7ff fe9e 	bl	80082ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200004f8 	.word	0x200004f8
 80085c0:	08008c8c 	.word	0x08008c8c

080085c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4907      	ldr	r1, [pc, #28]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085da:	4808      	ldr	r0, [pc, #32]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085dc:	f7ff fe86 	bl	80082ec <USBD_GetString>
 80085e0:	e004      	b.n	80085ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4904      	ldr	r1, [pc, #16]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085e6:	4805      	ldr	r0, [pc, #20]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e8:	f7ff fe80 	bl	80082ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200004f8 	.word	0x200004f8
 80085fc:	08008c98 	.word	0x08008c98

08008600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008606:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <Get_SerialNum+0x44>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800860c:	4b0e      	ldr	r3, [pc, #56]	; (8008648 <Get_SerialNum+0x48>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008612:	4b0e      	ldr	r3, [pc, #56]	; (800864c <Get_SerialNum+0x4c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008626:	2208      	movs	r2, #8
 8008628:	4909      	ldr	r1, [pc, #36]	; (8008650 <Get_SerialNum+0x50>)
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f814 	bl	8008658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008630:	2204      	movs	r2, #4
 8008632:	4908      	ldr	r1, [pc, #32]	; (8008654 <Get_SerialNum+0x54>)
 8008634:	68b8      	ldr	r0, [r7, #8]
 8008636:	f000 f80f 	bl	8008658 <IntToUnicode>
  }
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	1ffff7e8 	.word	0x1ffff7e8
 8008648:	1ffff7ec 	.word	0x1ffff7ec
 800864c:	1ffff7f0 	.word	0x1ffff7f0
 8008650:	2000012e 	.word	0x2000012e
 8008654:	2000013e 	.word	0x2000013e

08008658 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]
 800866e:	e027      	b.n	80086c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0f1b      	lsrs	r3, r3, #28
 8008674:	2b09      	cmp	r3, #9
 8008676:	d80b      	bhi.n	8008690 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	0f1b      	lsrs	r3, r3, #28
 800867c:	b2da      	uxtb	r2, r3
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	4619      	mov	r1, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	440b      	add	r3, r1
 8008688:	3230      	adds	r2, #48	; 0x30
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e00a      	b.n	80086a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	0f1b      	lsrs	r3, r3, #28
 8008694:	b2da      	uxtb	r2, r3
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	4619      	mov	r1, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	440b      	add	r3, r1
 80086a0:	3237      	adds	r2, #55	; 0x37
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	3301      	adds	r3, #1
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4413      	add	r3, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	3301      	adds	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
 80086c0:	7dfa      	ldrb	r2, [r7, #23]
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d3d3      	bcc.n	8008670 <IntToUnicode+0x18>
  }
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a0d      	ldr	r2, [pc, #52]	; (8008718 <HAL_PCD_MspInit+0x44>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d113      	bne.n	800870e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <HAL_PCD_MspInit+0x48>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	4a0c      	ldr	r2, [pc, #48]	; (800871c <HAL_PCD_MspInit+0x48>)
 80086ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086f0:	61d3      	str	r3, [r2, #28]
 80086f2:	4b0a      	ldr	r3, [pc, #40]	; (800871c <HAL_PCD_MspInit+0x48>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80086fe:	2200      	movs	r2, #0
 8008700:	2100      	movs	r1, #0
 8008702:	2014      	movs	r0, #20
 8008704:	f7f8 feb5 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008708:	2014      	movs	r0, #20
 800870a:	f7f8 fece 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40005c00 	.word	0x40005c00
 800871c:	40021000 	.word	0x40021000

08008720 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008734:	4619      	mov	r1, r3
 8008736:	4610      	mov	r0, r2
 8008738:	f7fe fea8 	bl	800748c <USBD_LL_SetupStage>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008756:	78fa      	ldrb	r2, [r7, #3]
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	440b      	add	r3, r1
 8008764:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	4619      	mov	r1, r3
 800876e:	f7fe feda 	bl	8007526 <USBD_LL_DataOutStage>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800878c:	78fa      	ldrb	r2, [r7, #3]
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	440b      	add	r3, r1
 800879a:	333c      	adds	r3, #60	; 0x3c
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	4619      	mov	r1, r3
 80087a2:	f7fe ff31 	bl	8007608 <USBD_LL_DataInStage>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff f841 	bl	8007844 <USBD_LL_SOF>
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d001      	beq.n	80087e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087de:	f7f7 ff1d 	bl	800061c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fff1 	bl	80077d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe ffaa 	bl	8007752 <USBD_LL_Reset>
}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe ffeb 	bl	80077f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <HAL_PCD_SuspendCallback+0x30>)
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	4a03      	ldr	r2, [pc, #12]	; (8008838 <HAL_PCD_SuspendCallback+0x30>)
 800882a:	f043 0306 	orr.w	r3, r3, #6
 800882e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed00 	.word	0xe000ed00

0800883c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe ffe5 	bl	800781a <USBD_LL_Resume>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008860:	4a1f      	ldr	r2, [pc, #124]	; (80088e0 <USBD_LL_Init+0x88>)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <USBD_LL_Init+0x88>)
 800886c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <USBD_LL_Init+0x88>)
 8008872:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <USBD_LL_Init+0x8c>)
 8008874:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <USBD_LL_Init+0x88>)
 8008878:	2208      	movs	r2, #8
 800887a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800887c:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <USBD_LL_Init+0x88>)
 800887e:	2202      	movs	r2, #2
 8008880:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <USBD_LL_Init+0x88>)
 8008884:	2200      	movs	r2, #0
 8008886:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <USBD_LL_Init+0x88>)
 800888a:	2200      	movs	r2, #0
 800888c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800888e:	4b14      	ldr	r3, [pc, #80]	; (80088e0 <USBD_LL_Init+0x88>)
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008894:	4812      	ldr	r0, [pc, #72]	; (80088e0 <USBD_LL_Init+0x88>)
 8008896:	f7f9 f9ac 	bl	8001bf2 <HAL_PCD_Init>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088a0:	f7f7 febc 	bl	800061c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088aa:	2318      	movs	r3, #24
 80088ac:	2200      	movs	r2, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	f7fa fe09 	bl	80034c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ba:	2358      	movs	r3, #88	; 0x58
 80088bc:	2200      	movs	r2, #0
 80088be:	2180      	movs	r1, #128	; 0x80
 80088c0:	f7fa fe01 	bl	80034c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088ce:	2200      	movs	r2, #0
 80088d0:	2181      	movs	r1, #129	; 0x81
 80088d2:	f7fa fdf8 	bl	80034c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200006f8 	.word	0x200006f8
 80088e4:	40005c00 	.word	0x40005c00

080088e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f9 fa82 	bl	8001e08 <HAL_PCD_Start>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 f93c 	bl	8008b88 <USBD_Get_USB_Status>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008914:	7bbb      	ldrb	r3, [r7, #14]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	461a      	mov	r2, r3
 800892c:	4603      	mov	r3, r0
 800892e:	70fb      	strb	r3, [r7, #3]
 8008930:	460b      	mov	r3, r1
 8008932:	70bb      	strb	r3, [r7, #2]
 8008934:	4613      	mov	r3, r2
 8008936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008946:	78bb      	ldrb	r3, [r7, #2]
 8008948:	883a      	ldrh	r2, [r7, #0]
 800894a:	78f9      	ldrb	r1, [r7, #3]
 800894c:	f7f9 fbfa 	bl	8002144 <HAL_PCD_EP_Open>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f916 	bl	8008b88 <USBD_Get_USB_Status>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008960:	7bbb      	ldrb	r3, [r7, #14]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f7f9 fc41 	bl	8002210 <HAL_PCD_EP_Close>
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f8f7 	bl	8008b88 <USBD_Get_USB_Status>
 800899a:	4603      	mov	r3, r0
 800899c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899e:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089c2:	78fa      	ldrb	r2, [r7, #3]
 80089c4:	4611      	mov	r1, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f9 fcea 	bl	80023a0 <HAL_PCD_EP_SetStall>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 f8d8 	bl	8008b88 <USBD_Get_USB_Status>
 80089d8:	4603      	mov	r3, r0
 80089da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a00:	78fa      	ldrb	r2, [r7, #3]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f9 fd2b 	bl	8002460 <HAL_PCD_EP_ClrStall>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f8b9 	bl	8008b88 <USBD_Get_USB_Status>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da0c      	bge.n	8008a5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	440b      	add	r3, r1
 8008a54:	3302      	adds	r3, #2
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	e00b      	b.n	8008a72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a60:	68f9      	ldr	r1, [r7, #12]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	440b      	add	r3, r1
 8008a6c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a70:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bc80      	pop	{r7}
 8008a7a:	4770      	bx	lr

08008a7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7f9 fb2d 	bl	80020fa <HAL_PCD_SetAddress>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f86e 	bl	8008b88 <USBD_Get_USB_Status>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	72fb      	strb	r3, [r7, #11]
 8008aca:	4613      	mov	r3, r2
 8008acc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008adc:	893b      	ldrh	r3, [r7, #8]
 8008ade:	7af9      	ldrb	r1, [r7, #11]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	f7f9 fc1a 	bl	800231a <HAL_PCD_EP_Transmit>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f84b 	bl	8008b88 <USBD_Get_USB_Status>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	72fb      	strb	r3, [r7, #11]
 8008b10:	4613      	mov	r3, r2
 8008b12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	7af9      	ldrb	r1, [r7, #11]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	f7f9 fbba 	bl	80022a0 <HAL_PCD_EP_Receive>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f828 	bl	8008b88 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <USBD_static_malloc+0x14>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr
 8008b5c:	200009e4 	.word	0x200009e4

08008b60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]

}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr

08008b72 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d817      	bhi.n	8008bcc <USBD_Get_USB_Status+0x44>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBD_Get_USB_Status+0x1c>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bbb 	.word	0x08008bbb
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc7 	.word	0x08008bc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb8:	e00b      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bba:	2302      	movs	r3, #2
 8008bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbe:	e008      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc4:	e005      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bca:	e002      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd0:	bf00      	nop
  }
  return usb_status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop

08008be0 <__libc_init_array>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	2600      	movs	r6, #0
 8008be4:	4d0c      	ldr	r5, [pc, #48]	; (8008c18 <__libc_init_array+0x38>)
 8008be6:	4c0d      	ldr	r4, [pc, #52]	; (8008c1c <__libc_init_array+0x3c>)
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	42a6      	cmp	r6, r4
 8008bee:	d109      	bne.n	8008c04 <__libc_init_array+0x24>
 8008bf0:	f000 f822 	bl	8008c38 <_init>
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	4d0a      	ldr	r5, [pc, #40]	; (8008c20 <__libc_init_array+0x40>)
 8008bf8:	4c0a      	ldr	r4, [pc, #40]	; (8008c24 <__libc_init_array+0x44>)
 8008bfa:	1b64      	subs	r4, r4, r5
 8008bfc:	10a4      	asrs	r4, r4, #2
 8008bfe:	42a6      	cmp	r6, r4
 8008c00:	d105      	bne.n	8008c0e <__libc_init_array+0x2e>
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c08:	4798      	blx	r3
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	e7ee      	b.n	8008bec <__libc_init_array+0xc>
 8008c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c12:	4798      	blx	r3
 8008c14:	3601      	adds	r6, #1
 8008c16:	e7f2      	b.n	8008bfe <__libc_init_array+0x1e>
 8008c18:	08008cb8 	.word	0x08008cb8
 8008c1c:	08008cb8 	.word	0x08008cb8
 8008c20:	08008cb8 	.word	0x08008cb8
 8008c24:	08008cbc 	.word	0x08008cbc

08008c28 <memset>:
 8008c28:	4603      	mov	r3, r0
 8008c2a:	4402      	add	r2, r0
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d100      	bne.n	8008c32 <memset+0xa>
 8008c30:	4770      	bx	lr
 8008c32:	f803 1b01 	strb.w	r1, [r3], #1
 8008c36:	e7f9      	b.n	8008c2c <memset+0x4>

08008c38 <_init>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	bf00      	nop
 8008c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3e:	bc08      	pop	{r3}
 8008c40:	469e      	mov	lr, r3
 8008c42:	4770      	bx	lr

08008c44 <_fini>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr
