
LED_FREERTOS_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004688  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004800  08004800  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004800  08004800  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c4  20000010  08004818  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  08004818  000219d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012168  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af0  00000000  00000000  000321a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003536  00000000  00000000  00036d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a23  00000000  00000000  0003a256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b88  00000000  00000000  0004bc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004604  00000000  00000000  000dc854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004780 	.word	0x08004780

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004780 	.word	0x08004780

08000150 <inicializar_arrebote>:
#include "arrebote.h"

void inicializar_arrebote(arrebote *s, uint8_t activo_en_cero, uint16_t debounce)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	70fb      	strb	r3, [r7, #3]
 800015c:	4613      	mov	r3, r2
 800015e:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	883a      	ldrh	r2, [r7, #0]
 8000164:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks=0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero)?1:0;
 800016c:	78fb      	ldrb	r3, [r7, #3]
 800016e:	2b00      	cmp	r3, #0
 8000170:	bf14      	ite	ne
 8000172:	2301      	movne	r3, #1
 8000174:	2300      	moveq	r3, #0
 8000176:	b2db      	uxtb	r3, r3
 8000178:	461a      	mov	r2, r3
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t)BTN_LIBRE;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2200      	movs	r2, #0
 8000188:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t)BTN_PRESIONADO;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2201      	movs	r2, #1
 800018e:	719a      	strb	r2, [r3, #6]
}
 8000190:	bf00      	nop
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <chequear_arrebote>:

void chequear_arrebote(arrebote *s, uint32_t estado)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	bf14      	ite	ne
 80001ac:	2301      	movne	r3, #1
 80001ae:	2300      	moveq	r3, #0
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	79db      	ldrb	r3, [r3, #7]
 80001b8:	461a      	mov	r2, r3
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	4053      	eors	r3, r2
 80001be:	60fb      	str	r3, [r7, #12]

	switch (s->estado)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	791b      	ldrb	r3, [r3, #4]
 80001c4:	2b03      	cmp	r3, #3
 80001c6:	d866      	bhi.n	8000296 <chequear_arrebote+0xfa>
 80001c8:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <chequear_arrebote+0x34>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	080001e1 	.word	0x080001e1
 80001d4:	08000203 	.word	0x08000203
 80001d8:	08000239 	.word	0x08000239
 80001dc:	0800025b 	.word	0x0800025b
	{
	case 0:
		if (boton)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d006      	beq.n	80001f4 <chequear_arrebote+0x58>
		{
			s->debounce_ticks = s->debounce;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	885a      	ldrh	r2, [r3, #2]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2201      	movs	r2, #1
 80001f2:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2200      	movs	r2, #0
 80001f8:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2200      	movs	r2, #0
 80001fe:	719a      	strb	r2, [r3, #6]
		break;
 8000200:	e049      	b.n	8000296 <chequear_arrebote+0xfa>
	case 1:
		if (!(--(s->debounce_ticks)))
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	881b      	ldrh	r3, [r3, #0]
 8000206:	3b01      	subs	r3, #1
 8000208:	b29a      	uxth	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	801a      	strh	r2, [r3, #0]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d13c      	bne.n	8000290 <chequear_arrebote+0xf4>
		{
			if (boton)
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d009      	beq.n	8000230 <chequear_arrebote+0x94>
			{
				s->estado_pin = BTN_PRESIONADO;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2201      	movs	r2, #1
 8000220:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2200      	movs	r2, #0
 8000226:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2202      	movs	r2, #2
 800022c:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 0;
			}
		}
		break;
 800022e:	e02f      	b.n	8000290 <chequear_arrebote+0xf4>
				s->estado = 0;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	711a      	strb	r2, [r3, #4]
		break;
 8000236:	e02b      	b.n	8000290 <chequear_arrebote+0xf4>
	case 2:
		if (!boton)
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d106      	bne.n	800024c <chequear_arrebote+0xb0>
		{
			s->debounce_ticks = s->debounce;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	885a      	ldrh	r2, [r3, #2]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2203      	movs	r2, #3
 800024a:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2201      	movs	r2, #1
 8000250:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2201      	movs	r2, #1
 8000256:	719a      	strb	r2, [r3, #6]
		break;
 8000258:	e01d      	b.n	8000296 <chequear_arrebote+0xfa>
	case 3:
		if (!(--(s->debounce_ticks)))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	3b01      	subs	r3, #1
 8000260:	b29a      	uxth	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	801a      	strh	r2, [r3, #0]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d112      	bne.n	8000294 <chequear_arrebote+0xf8>
		{
			if (!boton)
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d109      	bne.n	8000288 <chequear_arrebote+0xec>
			{
				s->estado_pin = BTN_LIBRE;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2200      	movs	r2, #0
 8000278:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2201      	movs	r2, #1
 800027e:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 2;
			}
		}
		break;
 8000286:	e005      	b.n	8000294 <chequear_arrebote+0xf8>
				s->estado = 2;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2202      	movs	r2, #2
 800028c:	711a      	strb	r2, [r3, #4]
		break;
 800028e:	e001      	b.n	8000294 <chequear_arrebote+0xf8>
		break;
 8000290:	bf00      	nop
 8000292:	e000      	b.n	8000296 <chequear_arrebote+0xfa>
		break;
 8000294:	bf00      	nop
	}
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <hay_flanco_arrebote>:

int hay_flanco_arrebote(arrebote *s)//detecta flancos positivos y negativos
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	int salida = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]

	if((((s->estado_pin == BTN_PRESIONADO) && (s->estado_anterior_pin == BTN_LIBRE)) || (s->estado_pin == BTN_LIBRE) && (s->estado_anterior_pin == BTN_PRESIONADO))){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d103      	bne.n	80002bc <hay_flanco_arrebote+0x1c>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	799b      	ldrb	r3, [r3, #6]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d007      	beq.n	80002cc <hay_flanco_arrebote+0x2c>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	795b      	ldrb	r3, [r3, #5]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d105      	bne.n	80002d0 <hay_flanco_arrebote+0x30>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	799b      	ldrb	r3, [r3, #6]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d101      	bne.n	80002d0 <hay_flanco_arrebote+0x30>
		salida = 1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
	}

	return salida;
 80002d0:	68fb      	ldr	r3, [r7, #12]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fa49 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f8bd 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f8ff 	bl	80004ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002ee:	f001 fba1 	bl	8001a34 <osKernelInitialize>

  xTaskCreate(	tarea_pulsador,
 80002f2:	2300      	movs	r3, #0
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	2301      	movs	r3, #1
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2300      	movs	r3, #0
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	4916      	ldr	r1, [pc, #88]	; (8000358 <main+0x7c>)
 8000300:	4816      	ldr	r0, [pc, #88]	; (800035c <main+0x80>)
 8000302:	f002 fb81 	bl	8002a08 <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL,
				tskIDLE_PRIORITY+1,
				NULL);

  xTaskCreate(	tarea_led,
 8000306:	2300      	movs	r3, #0
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	2301      	movs	r3, #1
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2300      	movs	r3, #0
 8000310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000314:	4912      	ldr	r1, [pc, #72]	; (8000360 <main+0x84>)
 8000316:	4813      	ldr	r0, [pc, #76]	; (8000364 <main+0x88>)
 8000318:	f002 fb76 	bl	8002a08 <xTaskCreate>
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY+1,
				NULL);

  vSemaphoreCreateBinary(sem_led);
 800031c:	2203      	movs	r2, #3
 800031e:	2100      	movs	r1, #0
 8000320:	2001      	movs	r0, #1
 8000322:	f001 fdae 	bl	8001e82 <xQueueGenericCreate>
 8000326:	4603      	mov	r3, r0
 8000328:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <main+0x8c>)
 800032a:	6013      	str	r3, [r2, #0]
 800032c:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <main+0x8c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d006      	beq.n	8000342 <main+0x66>
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <main+0x8c>)
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	2300      	movs	r3, #0
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	f001 fe01 	bl	8001f44 <xQueueGenericSend>

  xSemaphoreTake(sem_led, portMAX_DELAY);//tomo el semaforo antes de iniciar las tareas
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <main+0x8c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f04f 31ff 	mov.w	r1, #4294967295
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f870 	bl	8002430 <xQueueSemaphoreTake>
  /* Start scheduler */
  osKernelStart();
 8000350:	f001 fba2 	bl	8001a98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000354:	e7fe      	b.n	8000354 <main+0x78>
 8000356:	bf00      	nop
 8000358:	080047a4 	.word	0x080047a4
 800035c:	080003ad 	.word	0x080003ad
 8000360:	080047b4 	.word	0x080047b4
 8000364:	0800036d 	.word	0x0800036d
 8000368:	2000002c 	.word	0x2000002c

0800036c <tarea_led>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void tarea_led(void* p){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]

	for(;;){

		if(xSemaphoreTake(sem_led, portMAX_DELAY) == pdTRUE){
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <tarea_led+0x34>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f04f 31ff 	mov.w	r1, #4294967295
 800037c:	4618      	mov	r0, r3
 800037e:	f002 f857 	bl	8002430 <xQueueSemaphoreTake>
 8000382:	4603      	mov	r3, r0
 8000384:	2b01      	cmp	r3, #1
 8000386:	d1f5      	bne.n	8000374 <tarea_led+0x8>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <tarea_led+0x38>)
 800038e:	f000 fcb8 	bl	8000d02 <HAL_GPIO_TogglePin>
			vTaskDelay(tiempo_ms);
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <tarea_led+0x3c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fc72 	bl	8002c80 <vTaskDelay>
		if(xSemaphoreTake(sem_led, portMAX_DELAY) == pdTRUE){
 800039c:	e7ea      	b.n	8000374 <tarea_led+0x8>
 800039e:	bf00      	nop
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	20000030 	.word	0x20000030

080003ac <tarea_pulsador>:
		}
	}
}

void tarea_pulsador(void* p){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]

	static uint32_t estado_boton = 0;
	uint32_t tics_led;
	uint8_t flag_sem = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	72fb      	strb	r3, [r7, #11]


	inicializar_arrebote(&boton_b1, TRUE, DEBOUNCE_BTN_MS);
 80003b8:	2214      	movs	r2, #20
 80003ba:	2101      	movs	r1, #1
 80003bc:	4824      	ldr	r0, [pc, #144]	; (8000450 <tarea_pulsador+0xa4>)
 80003be:	f7ff fec7 	bl	8000150 <inicializar_arrebote>

	for(;;)
	{
		chequear_arrebote(&boton_b1, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));//ES ACTIVO EN CERO
 80003c2:	2101      	movs	r1, #1
 80003c4:	4823      	ldr	r0, [pc, #140]	; (8000454 <tarea_pulsador+0xa8>)
 80003c6:	f000 fc6d 	bl	8000ca4 <HAL_GPIO_ReadPin>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4619      	mov	r1, r3
 80003ce:	4820      	ldr	r0, [pc, #128]	; (8000450 <tarea_pulsador+0xa4>)
 80003d0:	f7ff fee4 	bl	800019c <chequear_arrebote>
		if(hay_flanco_arrebote(&boton_b1))
 80003d4:	481e      	ldr	r0, [pc, #120]	; (8000450 <tarea_pulsador+0xa4>)
 80003d6:	f7ff ff63 	bl	80002a0 <hay_flanco_arrebote>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d029      	beq.n	8000434 <tarea_pulsador+0x88>
		{
			estado_boton^=1;//cambio el estado del boton
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <tarea_pulsador+0xac>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f083 0301 	eor.w	r3, r3, #1
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <tarea_pulsador+0xac>)
 80003ea:	6013      	str	r3, [r2, #0]
			if(estado_boton == 1){//si es 1 quiere decir que se presiono el boton
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <tarea_pulsador+0xac>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d103      	bne.n	80003fc <tarea_pulsador+0x50>

				tics_led = xTaskGetTickCount();
 80003f4:	f002 fd8a 	bl	8002f0c <xTaskGetTickCount>
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	e01b      	b.n	8000434 <tarea_pulsador+0x88>

			}
			else{//se solto el boton

				tics_led = xTaskGetTickCount() - tics_led;//la cantidad de ticks se calcula haciendo la resta
 80003fc:	f002 fd86 	bl	8002f0c <xTaskGetTickCount>
 8000400:	4602      	mov	r2, r0
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	60fb      	str	r3, [r7, #12]
				tiempo_ms = tics_led/portTICK_RATE_MS;
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <tarea_pulsador+0xb0>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6013      	str	r3, [r2, #0]
				if(tiempo_ms < 50) tiempo_ms = 50;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <tarea_pulsador+0xb0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b31      	cmp	r3, #49	; 0x31
 8000414:	d803      	bhi.n	800041e <tarea_pulsador+0x72>
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <tarea_pulsador+0xb0>)
 8000418:	2232      	movs	r2, #50	; 0x32
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e008      	b.n	8000430 <tarea_pulsador+0x84>
				else if(tiempo_ms > 1000) tiempo_ms = 1000;
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <tarea_pulsador+0xb0>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000426:	d903      	bls.n	8000430 <tarea_pulsador+0x84>
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <tarea_pulsador+0xb0>)
 800042a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800042e:	601a      	str	r2, [r3, #0]
				flag_sem = 1;//esto permite devolver el semaforo la primera vez que se presiona el boton
 8000430:	2301      	movs	r3, #1
 8000432:	72fb      	strb	r3, [r7, #11]
			}

		}

		if(flag_sem){
 8000434:	7afb      	ldrb	r3, [r7, #11]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0c3      	beq.n	80003c2 <tarea_pulsador+0x16>

			xSemaphoreGive(sem_led);//devuelvo el semaforo
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <tarea_pulsador+0xb4>)
 800043c:	6818      	ldr	r0, [r3, #0]
 800043e:	2300      	movs	r3, #0
 8000440:	2200      	movs	r2, #0
 8000442:	2100      	movs	r1, #0
 8000444:	f001 fd7e 	bl	8001f44 <xQueueGenericSend>
			vTaskDelay(1/portTICK_RATE_MS);
 8000448:	2001      	movs	r0, #1
 800044a:	f002 fc19 	bl	8002c80 <vTaskDelay>
		chequear_arrebote(&boton_b1, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));//ES ACTIVO EN CERO
 800044e:	e7b8      	b.n	80003c2 <tarea_pulsador+0x16>
 8000450:	20000034 	.word	0x20000034
 8000454:	40010c00 	.word	0x40010c00
 8000458:	2000003c 	.word	0x2000003c
 800045c:	20000030 	.word	0x20000030
 8000460:	2000002c 	.word	0x2000002c

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f004 f97c 	bl	8004770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80004a2:	2300      	movs	r3, #0
 80004a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fc42 	bl	8000d34 <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004b6:	f000 f883 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	230f      	movs	r3, #15
 80004bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004be:	2302      	movs	r3, #2
 80004c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 feb0 	bl	8001238 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004de:	f000 f86f 	bl	80005c0 <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3740      	adds	r7, #64	; 0x40
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <MX_GPIO_Init+0xa8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a23      	ldr	r2, [pc, #140]	; (8000594 <MX_GPIO_Init+0xa8>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <MX_GPIO_Init+0xa8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <MX_GPIO_Init+0xa8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a1d      	ldr	r2, [pc, #116]	; (8000594 <MX_GPIO_Init+0xa8>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_GPIO_Init+0xa8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_GPIO_Init+0xa8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a17      	ldr	r2, [pc, #92]	; (8000594 <MX_GPIO_Init+0xa8>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_GPIO_Init+0xa8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <MX_GPIO_Init+0xac>)
 8000550:	f000 fbbf 	bl	8000cd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055c:	2301      	movs	r3, #1
 800055e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_GPIO_Init+0xac>)
 8000568:	f000 fa18 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2302      	movs	r3, #2
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_GPIO_Init+0xac>)
 8000586:	f000 fa09 	bl	800099c <HAL_GPIO_Init>

}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000
 8000598:	40010c00 	.word	0x40010c00

0800059c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d101      	bne.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ae:	f000 f8f9 	bl	80007a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40012c00 	.word	0x40012c00

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_MspInit+0x5c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_MspInit+0x5c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x5c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x5c>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_MspInit+0x60>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_MspInit+0x60>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	2019      	movs	r0, #25
 8000646:	f000 f97e 	bl	8000946 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800064a:	2019      	movs	r0, #25
 800064c:	f000 f997 	bl	800097e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <HAL_InitTick+0x9c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <HAL_InitTick+0x9c>)
 8000656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_InitTick+0x9c>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000668:	f107 0210 	add.w	r2, r7, #16
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff46 	bl	8001504 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000678:	f000 ff30 	bl	80014dc <HAL_RCC_GetPCLK2Freq>
 800067c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_InitTick+0xa0>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	0c9b      	lsrs	r3, r3, #18
 8000688:	3b01      	subs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_InitTick+0xa4>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <HAL_InitTick+0xa8>)
 8000690:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_InitTick+0xa4>)
 8000694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000698:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_InitTick+0xa4>)
 800069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_InitTick+0xa4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_InitTick+0xa4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <HAL_InitTick+0xa4>)
 80006ae:	f000 ff77 	bl	80015a0 <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d104      	bne.n	80006c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <HAL_InitTick+0xa4>)
 80006ba:	f000 ffc9 	bl	8001650 <HAL_TIM_Base_Start_IT>
 80006be:	4603      	mov	r3, r0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	431bde83 	.word	0x431bde83
 80006d4:	20000040 	.word	0x20000040
 80006d8:	40012c00 	.word	0x40012c00

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <HardFault_Handler+0x4>

080006ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <MemManage_Handler+0x4>

080006f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <BusFault_Handler+0x4>

080006fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <UsageFault_Handler+0x4>

08000700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM1_UP_IRQHandler+0x10>)
 8000712:	f000 ffef 	bl	80016f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000040 	.word	0x20000040

08000720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000752:	f7ff ffe5 	bl	8000720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f003 ffd9 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fdbf 	bl	80002dc <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000768:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 800076c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000770:	200019d4 	.word	0x200019d4

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f8d1 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff4e 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff ff1a 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000088 	.word	0x20000088

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000088 	.word	0x20000088

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db0b      	blt.n	800086a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 021f 	and.w	r2, r3, #31
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <__NVIC_EnableIRQ+0x34>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	; (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff4f 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000958:	f7ff ff64 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800095c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f7ff ffb2 	bl	80008cc <NVIC_EncodePriority>
 8000968:	4602      	mov	r2, r0
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff81 	bl	8000878 <__NVIC_SetPriority>
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff57 	bl	8000840 <__NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b08b      	sub	sp, #44	; 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e169      	b.n	8000c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b0:	2201      	movs	r2, #1
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	f040 8158 	bne.w	8000c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a9a      	ldr	r2, [pc, #616]	; (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d05e      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009d8:	4a98      	ldr	r2, [pc, #608]	; (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d875      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009de:	4a98      	ldr	r2, [pc, #608]	; (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d058      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009e4:	4a96      	ldr	r2, [pc, #600]	; (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d86f      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009ea:	4a96      	ldr	r2, [pc, #600]	; (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d052      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009f0:	4a94      	ldr	r2, [pc, #592]	; (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d869      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009f6:	4a94      	ldr	r2, [pc, #592]	; (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d04c      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009fc:	4a92      	ldr	r2, [pc, #584]	; (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d863      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a02:	4a92      	ldr	r2, [pc, #584]	; (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d046      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 8000a08:	4a90      	ldr	r2, [pc, #576]	; (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d85d      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d82a      	bhi.n	8000a68 <HAL_GPIO_Init+0xcc>
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d859      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a16:	a201      	add	r2, pc, #4	; (adr r2, 8000a1c <HAL_GPIO_Init+0x80>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a83 	.word	0x08000a83
 8000a28:	08000ac5 	.word	0x08000ac5
 8000a2c:	08000acb 	.word	0x08000acb
 8000a30:	08000acb 	.word	0x08000acb
 8000a34:	08000acb 	.word	0x08000acb
 8000a38:	08000acb 	.word	0x08000acb
 8000a3c:	08000acb 	.word	0x08000acb
 8000a40:	08000acb 	.word	0x08000acb
 8000a44:	08000acb 	.word	0x08000acb
 8000a48:	08000acb 	.word	0x08000acb
 8000a4c:	08000acb 	.word	0x08000acb
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000acb 	.word	0x08000acb
 8000a58:	08000acb 	.word	0x08000acb
 8000a5c:	08000acb 	.word	0x08000acb
 8000a60:	08000a79 	.word	0x08000a79
 8000a64:	08000a8d 	.word	0x08000a8d
 8000a68:	4a79      	ldr	r2, [pc, #484]	; (8000c50 <HAL_GPIO_Init+0x2b4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a6e:	e02c      	b.n	8000aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e029      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e024      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	3308      	adds	r3, #8
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e01f      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	330c      	adds	r3, #12
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e01a      	b.n	8000acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e013      	b.n	8000acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d105      	bne.n	8000ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	611a      	str	r2, [r3, #16]
          break;
 8000ab6:	e009      	b.n	8000acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	615a      	str	r2, [r3, #20]
          break;
 8000ac2:	e003      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x130>
          break;
 8000aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d801      	bhi.n	8000ad6 <HAL_GPIO_Init+0x13a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	e001      	b.n	8000ada <HAL_GPIO_Init+0x13e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	2bff      	cmp	r3, #255	; 0xff
 8000ae0:	d802      	bhi.n	8000ae8 <HAL_GPIO_Init+0x14c>
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x152>
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	3b08      	subs	r3, #8
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	210f      	movs	r1, #15
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	401a      	ands	r2, r3
 8000b00:	6a39      	ldr	r1, [r7, #32]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80b1 	beq.w	8000c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b4a      	ldr	r3, [pc, #296]	; (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b34:	4a48      	ldr	r2, [pc, #288]	; (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a40      	ldr	r2, [pc, #256]	; (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d013      	beq.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <HAL_GPIO_Init+0x2c4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1e8>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <HAL_GPIO_Init+0x1e0>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b9a:	492f      	ldr	r1, [pc, #188]	; (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	492c      	ldr	r1, [pc, #176]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4928      	ldr	r1, [pc, #160]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	4922      	ldr	r1, [pc, #136]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	491e      	ldr	r1, [pc, #120]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	4918      	ldr	r1, [pc, #96]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4914      	ldr	r1, [pc, #80]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d021      	beq.n	8000c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	490e      	ldr	r1, [pc, #56]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60cb      	str	r3, [r1, #12]
 8000c38:	e021      	b.n	8000c7e <HAL_GPIO_Init+0x2e2>
 8000c3a:	bf00      	nop
 8000c3c:	10320000 	.word	0x10320000
 8000c40:	10310000 	.word	0x10310000
 8000c44:	10220000 	.word	0x10220000
 8000c48:	10210000 	.word	0x10210000
 8000c4c:	10120000 	.word	0x10120000
 8000c50:	10110000 	.word	0x10110000
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4909      	ldr	r1, [pc, #36]	; (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3301      	adds	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f47f ae8e 	bne.w	80009b0 <HAL_GPIO_Init+0x14>
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	372c      	adds	r7, #44	; 0x2c
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce2:	787b      	ldrb	r3, [r7, #1]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cee:	e003      	b.n	8000cf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	041a      	lsls	r2, r3, #16
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	611a      	str	r2, [r3, #16]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b085      	sub	sp, #20
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d14:	887a      	ldrh	r2, [r7, #2]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	041a      	lsls	r2, r3, #16
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	400b      	ands	r3, r1
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	611a      	str	r2, [r3, #16]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e272      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8087 	beq.w	8000e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d54:	4b92      	ldr	r3, [pc, #584]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d00c      	beq.n	8000d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d60:	4b8f      	ldr	r3, [pc, #572]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d112      	bne.n	8000d92 <HAL_RCC_OscConfig+0x5e>
 8000d6c:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d78:	d10b      	bne.n	8000d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7a:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d06c      	beq.n	8000e60 <HAL_RCC_OscConfig+0x12c>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d168      	bne.n	8000e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e24c      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9a:	d106      	bne.n	8000daa <HAL_RCC_OscConfig+0x76>
 8000d9c:	4b80      	ldr	r3, [pc, #512]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a7f      	ldr	r2, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e02e      	b.n	8000e08 <HAL_RCC_OscConfig+0xd4>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x98>
 8000db2:	4b7b      	ldr	r3, [pc, #492]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a7a      	ldr	r2, [pc, #488]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b78      	ldr	r3, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a77      	ldr	r2, [pc, #476]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e01d      	b.n	8000e08 <HAL_RCC_OscConfig+0xd4>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0xbc>
 8000dd6:	4b72      	ldr	r3, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a71      	ldr	r2, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a6e      	ldr	r2, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e00b      	b.n	8000e08 <HAL_RCC_OscConfig+0xd4>
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a6a      	ldr	r2, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b68      	ldr	r3, [pc, #416]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a67      	ldr	r2, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fcda 	bl	80007c8 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fcd6 	bl	80007c8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e200      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0xe4>
 8000e36:	e014      	b.n	8000e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fcc6 	bl	80007c8 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fcc2 	bl	80007c8 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	; 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e1ec      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0x10c>
 8000e5e:	e000      	b.n	8000e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d063      	beq.n	8000f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e6e:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d11c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x18c>
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <HAL_RCC_OscConfig+0x176>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d001      	beq.n	8000eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e1c0      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4939      	ldr	r1, [pc, #228]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	e03a      	b.n	8000f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d020      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fc7b 	bl	80007c8 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fc77 	bl	80007c8 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e1a1      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4927      	ldr	r1, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
 8000f08:	e015      	b.n	8000f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc5a 	bl	80007c8 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc56 	bl	80007c8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e180      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d03a      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d019      	beq.n	8000f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	f7ff fc3a 	bl	80007c8 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc36 	bl	80007c8 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e160      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 faf4 	bl	8001564 <RCC_Delay>
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc20 	bl	80007c8 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8a:	e00f      	b.n	8000fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc1c 	bl	80007c8 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d908      	bls.n	8000fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e146      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	42420000 	.word	0x42420000
 8000fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fac:	4b92      	ldr	r3, [pc, #584]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1e9      	bne.n	8000f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a6 	beq.w	8001112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fca:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a87      	ldr	r2, [pc, #540]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b85      	ldr	r3, [pc, #532]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff2:	4b82      	ldr	r3, [pc, #520]	; (80011fc <HAL_RCC_OscConfig+0x4c8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d118      	bne.n	8001030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffe:	4b7f      	ldr	r3, [pc, #508]	; (80011fc <HAL_RCC_OscConfig+0x4c8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a7e      	ldr	r2, [pc, #504]	; (80011fc <HAL_RCC_OscConfig+0x4c8>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100a:	f7ff fbdd 	bl	80007c8 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001012:	f7ff fbd9 	bl	80007c8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b64      	cmp	r3, #100	; 0x64
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e103      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	4b75      	ldr	r3, [pc, #468]	; (80011fc <HAL_RCC_OscConfig+0x4c8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x312>
 8001038:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6213      	str	r3, [r2, #32]
 8001044:	e02d      	b.n	80010a2 <HAL_RCC_OscConfig+0x36e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0x334>
 800104e:	4b6a      	ldr	r3, [pc, #424]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4a69      	ldr	r2, [pc, #420]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6213      	str	r3, [r2, #32]
 800105a:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a66      	ldr	r2, [pc, #408]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	e01c      	b.n	80010a2 <HAL_RCC_OscConfig+0x36e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b05      	cmp	r3, #5
 800106e:	d10c      	bne.n	800108a <HAL_RCC_OscConfig+0x356>
 8001070:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a60      	ldr	r2, [pc, #384]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a5d      	ldr	r2, [pc, #372]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6213      	str	r3, [r2, #32]
 8001088:	e00b      	b.n	80010a2 <HAL_RCC_OscConfig+0x36e>
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a5a      	ldr	r2, [pc, #360]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a57      	ldr	r2, [pc, #348]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d015      	beq.n	80010d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fb8d 	bl	80007c8 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fb89 	bl	80007c8 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e0b1      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0ee      	beq.n	80010b2 <HAL_RCC_OscConfig+0x37e>
 80010d4:	e014      	b.n	8001100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fb77 	bl	80007c8 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fb73 	bl	80007c8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e09b      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f4:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1ee      	bne.n	80010de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d105      	bne.n	8001112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a3b      	ldr	r2, [pc, #236]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8087 	beq.w	800122a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d061      	beq.n	80011ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d146      	bne.n	80011be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_RCC_OscConfig+0x4cc>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb47 	bl	80007c8 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fb43 	bl	80007c8 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e06d      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f0      	bne.n	800113e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d108      	bne.n	8001178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	4921      	ldr	r1, [pc, #132]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a19      	ldr	r1, [r3, #32]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	430b      	orrs	r3, r1
 800118a:	491b      	ldr	r1, [pc, #108]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_RCC_OscConfig+0x4cc>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb17 	bl	80007c8 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff fb13 	bl	80007c8 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e03d      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x46a>
 80011bc:	e035      	b.n	800122a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_RCC_OscConfig+0x4cc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fb00 	bl	80007c8 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff fafc 	bl	80007c8 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e026      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x498>
 80011ea:	e01e      	b.n	800122a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e019      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40007000 	.word	0x40007000
 8001200:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_OscConfig+0x500>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	429a      	cmp	r2, r3
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	429a      	cmp	r2, r3
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0d0      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d910      	bls.n	800127c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 0207 	bic.w	r2, r3, #7
 8001262:	4965      	ldr	r1, [pc, #404]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0b8      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a58      	ldr	r2, [pc, #352]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800129e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b8:	4b50      	ldr	r3, [pc, #320]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	494d      	ldr	r1, [pc, #308]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d040      	beq.n	8001358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d115      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e07f      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e073      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06b      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f023 0203 	bic.w	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4936      	ldr	r1, [pc, #216]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fa4e 	bl	80007c8 <HAL_GetTick>
 800132c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	e00a      	b.n	8001346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001330:	f7ff fa4a 	bl	80007c8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e053      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 020c 	and.w	r2, r3, #12
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	429a      	cmp	r2, r3
 8001356:	d1eb      	bne.n	8001330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d210      	bcs.n	8001388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 0207 	bic.w	r2, r3, #7
 800136e:	4922      	ldr	r1, [pc, #136]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e032      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4916      	ldr	r1, [pc, #88]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	490e      	ldr	r1, [pc, #56]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013c6:	f000 f821 	bl	800140c <HAL_RCC_GetSysClockFreq>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	490a      	ldr	r1, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x1c8>)
 80013d8:	5ccb      	ldrb	r3, [r1, r3]
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1cc>)
 80013e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_ClockConfig+0x1d0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f922 	bl	8000630 <HAL_InitTick>

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40021000 	.word	0x40021000
 8001400:	080047e8 	.word	0x080047e8
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001414:	1d3c      	adds	r4, r7, #4
 8001416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800141c:	f240 2301 	movw	r3, #513	; 0x201
 8001420:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d002      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0x40>
 8001446:	2b08      	cmp	r3, #8
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x46>
 800144a:	e02b      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800144e:	623b      	str	r3, [r7, #32]
      break;
 8001450:	e02b      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3328      	adds	r3, #40	; 0x28
 800145c:	443b      	add	r3, r7
 800145e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001462:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0c5b      	lsrs	r3, r3, #17
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	3328      	adds	r3, #40	; 0x28
 800147a:	443b      	add	r3, r7
 800147c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001480:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001486:	fb03 f202 	mul.w	r2, r3, r2
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
 8001492:	e004      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	623b      	str	r3, [r7, #32]
      break;
 80014a2:	e002      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a6:	623b      	str	r3, [r7, #32]
      break;
 80014a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014aa:	6a3b      	ldr	r3, [r7, #32]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc90      	pop	{r4, r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	080047c0 	.word	0x080047c0
 80014bc:	40021000 	.word	0x40021000
 80014c0:	007a1200 	.word	0x007a1200
 80014c4:	003d0900 	.word	0x003d0900

080014c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000000 	.word	0x20000000

080014dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e0:	f7ff fff2 	bl	80014c8 <HAL_RCC_GetHCLKFreq>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	0adb      	lsrs	r3, r3, #11
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	4903      	ldr	r1, [pc, #12]	; (8001500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	080047f8 	.word	0x080047f8

08001504 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	220f      	movs	r2, #15
 8001512:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_GetClockConfig+0x5c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0207 	and.w	r2, r3, #7
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40022000 	.word	0x40022000

08001564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <RCC_Delay+0x34>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <RCC_Delay+0x38>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0a5b      	lsrs	r3, r3, #9
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001580:	bf00      	nop
  }
  while (Delay --);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	60fa      	str	r2, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f9      	bne.n	8001580 <RCC_Delay+0x1c>
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000000 	.word	0x20000000
 800159c:	10624dd3 	.word	0x10624dd3

080015a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e041      	b.n	8001636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f839 	bl	800163e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3304      	adds	r3, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f000 f9b4 	bl	800194c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d001      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e03a      	b.n	80016de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <HAL_TIM_Base_Start_IT+0x98>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00e      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x58>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001692:	d009      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x58>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_TIM_Base_Start_IT+0x9c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d004      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x58>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d010      	beq.n	80016dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ca:	e007      	b.n	80016dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40000400 	.word	0x40000400
 80016f0:	40000800 	.word	0x40000800

080016f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d122      	bne.n	8001750 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b02      	cmp	r3, #2
 8001716:	d11b      	bne.n	8001750 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0202 	mvn.w	r2, #2
 8001720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8ed 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 800173c:	e005      	b.n	800174a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8e0 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8ef 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b04      	cmp	r3, #4
 800175c:	d122      	bne.n	80017a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d11b      	bne.n	80017a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0204 	mvn.w	r2, #4
 8001774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2202      	movs	r2, #2
 800177a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8c3 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8b6 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8c5 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d122      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d11b      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0208 	mvn.w	r2, #8
 80017c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2204      	movs	r2, #4
 80017ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f899 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 80017e4:	e005      	b.n	80017f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f88c 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f89b 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b10      	cmp	r3, #16
 8001804:	d122      	bne.n	800184c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b10      	cmp	r3, #16
 8001812:	d11b      	bne.n	800184c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0210 	mvn.w	r2, #16
 800181c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2208      	movs	r2, #8
 8001822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f86f 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 8001838:	e005      	b.n	8001846 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f862 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f871 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10e      	bne.n	8001878 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0201 	mvn.w	r2, #1
 8001870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe92 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	d10e      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	2b80      	cmp	r3, #128	; 0x80
 8001892:	d107      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800189c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8bf 	bl	8001a22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d107      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f835 	bl	800193a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d10e      	bne.n	80018fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d107      	bne.n	80018fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0220 	mvn.w	r2, #32
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f88a 	bl	8001a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <TIM_Base_SetConfig+0xb8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00b      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d007      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <TIM_Base_SetConfig+0xbc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d003      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <TIM_Base_SetConfig+0xc0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d108      	bne.n	800198e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <TIM_Base_SetConfig+0xb8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00b      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d007      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <TIM_Base_SetConfig+0xbc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d003      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <TIM_Base_SetConfig+0xc0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d108      	bne.n	80019c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <TIM_Base_SetConfig+0xb8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d103      	bne.n	80019f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	615a      	str	r2, [r3, #20]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800

08001a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a3a:	f3ef 8305 	mrs	r3, IPSR
 8001a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a46:	f3ef 8310 	mrs	r3, PRIMASK
 8001a4a:	607b      	str	r3, [r7, #4]
  return(result);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <osKernelInitialize+0x32>
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <osKernelInitialize+0x60>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d109      	bne.n	8001a6e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8001a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001a66:	f06f 0305 	mvn.w	r3, #5
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e00c      	b.n	8001a88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <osKernelInitialize+0x60>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <osKernelInitialize+0x60>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e002      	b.n	8001a88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	2000008c 	.word	0x2000008c

08001a98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a9e:	f3ef 8305 	mrs	r3, IPSR
 8001aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8001aae:	607b      	str	r3, [r7, #4]
  return(result);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <osKernelStart+0x32>
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <osKernelStart+0x64>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d109      	bne.n	8001ad2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001abe:	f3ef 8311 	mrs	r3, BASEPRI
 8001ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001aca:	f06f 0305 	mvn.w	r3, #5
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e00e      	b.n	8001af0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <osKernelStart+0x64>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <osKernelStart+0x64>)
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001ae0:	f001 f902 	bl	8002ce8 <vTaskStartScheduler>
      stat = osOK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e002      	b.n	8001af0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000008c 	.word	0x2000008c

08001b00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <vApplicationGetIdleTaskMemory+0x28>)
 8001b10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <vApplicationGetIdleTaskMemory+0x2c>)
 8001b16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000090 	.word	0x20000090
 8001b2c:	200000ec 	.word	0x200000ec

08001b30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <vApplicationGetTimerTaskMemory+0x2c>)
 8001b40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <vApplicationGetTimerTaskMemory+0x30>)
 8001b46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200002ec 	.word	0x200002ec
 8001b60:	20000348 	.word	0x20000348

08001b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 0208 	add.w	r2, r3, #8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f103 0208 	add.w	r2, r3, #8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f103 0208 	add.w	r2, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c16:	d103      	bne.n	8001c20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e00c      	b.n	8001c3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3308      	adds	r3, #8
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e002      	b.n	8001c2e <vListInsert+0x2e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d2f6      	bcs.n	8001c28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6892      	ldr	r2, [r2, #8]
 8001c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6852      	ldr	r2, [r2, #4]
 8001c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d103      	bne.n	8001ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
	...

08001cc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001cea:	bf00      	nop
 8001cec:	e7fe      	b.n	8001cec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001cee:	f002 fa35 	bl	800415c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	441a      	add	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	441a      	add	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	22ff      	movs	r2, #255	; 0xff
 8001d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d114      	bne.n	8001d6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01a      	beq.n	8001d82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3310      	adds	r3, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fa53 	bl	80031fc <xTaskRemoveFromEventList>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <xQueueGenericReset+0xcc>)
 8001d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	e009      	b.n	8001d82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3310      	adds	r3, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fef6 	bl	8001b64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3324      	adds	r3, #36	; 0x24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fef1 	bl	8001b64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d82:	f002 fa1b 	bl	80041bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	e000ed04 	.word	0xe000ed04

08001d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001dba:	bf00      	nop
 8001dbc:	e7fe      	b.n	8001dbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001dd6:	bf00      	nop
 8001dd8:	e7fe      	b.n	8001dd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <xQueueGenericCreateStatic+0x52>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <xQueueGenericCreateStatic+0x56>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <xQueueGenericCreateStatic+0x58>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	623b      	str	r3, [r7, #32]
}
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <xQueueGenericCreateStatic+0x7e>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <xQueueGenericCreateStatic+0x82>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <xQueueGenericCreateStatic+0x84>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	61fb      	str	r3, [r7, #28]
}
 8001e2e:	bf00      	nop
 8001e30:	e7fe      	b.n	8001e30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e32:	2350      	movs	r3, #80	; 0x50
 8001e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b50      	cmp	r3, #80	; 0x50
 8001e3a:	d00a      	beq.n	8001e52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	61bb      	str	r3, [r7, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	e7fe      	b.n	8001e50 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f843 	bl	8001efe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3730      	adds	r7, #48	; 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b08a      	sub	sp, #40	; 0x28
 8001e86:	af02      	add	r7, sp, #8
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10a      	bne.n	8001eac <xQueueGenericCreate+0x2a>
	__asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9a:	f383 8811 	msr	BASEPRI, r3
 8001e9e:	f3bf 8f6f 	isb	sy
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	613b      	str	r3, [r7, #16]
}
 8001ea8:	bf00      	nop
 8001eaa:	e7fe      	b.n	8001eaa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e004      	b.n	8001ec2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3350      	adds	r3, #80	; 0x50
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fa48 	bl	800435c <pvPortMalloc>
 8001ecc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00f      	beq.n	8001ef4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	3350      	adds	r3, #80	; 0x50
 8001ed8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f805 	bl	8001efe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e002      	b.n	8001f20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	69b8      	ldr	r0, [r7, #24]
 8001f30:	f7ff fec8 	bl	8001cc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <xQueueGenericSend+0x32>
	__asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f72:	bf00      	nop
 8001f74:	e7fe      	b.n	8001f74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <xQueueGenericSend+0x40>
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <xQueueGenericSend+0x44>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <xQueueGenericSend+0x46>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <xQueueGenericSend+0x60>
	__asm volatile
 8001f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fa0:	bf00      	nop
 8001fa2:	e7fe      	b.n	8001fa2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d103      	bne.n	8001fb2 <xQueueGenericSend+0x6e>
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <xQueueGenericSend+0x72>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <xQueueGenericSend+0x74>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	623b      	str	r3, [r7, #32]
}
 8001fce:	bf00      	nop
 8001fd0:	e7fe      	b.n	8001fd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fd2:	f001 fad5 	bl	8003580 <xTaskGetSchedulerState>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <xQueueGenericSend+0x9e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <xQueueGenericSend+0xa2>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <xQueueGenericSend+0xa4>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xQueueGenericSend+0xbe>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	61fb      	str	r3, [r7, #28]
}
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002002:	f002 f8ab 	bl	800415c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	429a      	cmp	r2, r3
 8002010:	d302      	bcc.n	8002018 <xQueueGenericSend+0xd4>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d129      	bne.n	800206c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800201e:	f000 fb2a 	bl	8002676 <prvCopyDataToQueue>
 8002022:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	3324      	adds	r3, #36	; 0x24
 8002030:	4618      	mov	r0, r3
 8002032:	f001 f8e3 	bl	80031fc <xTaskRemoveFromEventList>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <xQueueGenericSend+0x1f8>)
 800203e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	e00a      	b.n	8002064 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <xQueueGenericSend+0x1f8>)
 8002056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002064:	f002 f8aa 	bl	80041bc <vPortExitCritical>
				return pdPASS;
 8002068:	2301      	movs	r3, #1
 800206a:	e063      	b.n	8002134 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002072:	f002 f8a3 	bl	80041bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002076:	2300      	movs	r3, #0
 8002078:	e05c      	b.n	8002134 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4618      	mov	r0, r3
 8002086:	f001 f91d 	bl	80032c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800208a:	2301      	movs	r3, #1
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800208e:	f002 f895 	bl	80041bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002092:	f000 fe8f 	bl	8002db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002096:	f002 f861 	bl	800415c <vPortEnterCritical>
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a6:	d103      	bne.n	80020b0 <xQueueGenericSend+0x16c>
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d103      	bne.n	80020c6 <xQueueGenericSend+0x182>
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020c6:	f002 f879 	bl	80041bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020ca:	1d3a      	adds	r2, r7, #4
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f90c 	bl	80032f0 <xTaskCheckForTimeOut>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d124      	bne.n	8002128 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e0:	f000 fbc1 	bl	8002866 <prvIsQueueFull>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d018      	beq.n	800211c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	3310      	adds	r3, #16
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 f832 	bl	800315c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020fa:	f000 fb4c 	bl	8002796 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020fe:	f000 fe67 	bl	8002dd0 <xTaskResumeAll>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f af7c 	bne.w	8002002 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <xQueueGenericSend+0x1f8>)
 800210c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	e772      	b.n	8002002 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800211c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800211e:	f000 fb3a 	bl	8002796 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002122:	f000 fe55 	bl	8002dd0 <xTaskResumeAll>
 8002126:	e76c      	b.n	8002002 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212a:	f000 fb34 	bl	8002796 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800212e:	f000 fe4f 	bl	8002dd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002132:	2300      	movs	r3, #0
		}
	}
}
 8002134:	4618      	mov	r0, r3
 8002136:	3738      	adds	r7, #56	; 0x38
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	e000ed04 	.word	0xe000ed04

08002140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215c:	f383 8811 	msr	BASEPRI, r3
 8002160:	f3bf 8f6f 	isb	sy
 8002164:	f3bf 8f4f 	dsb	sy
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800216a:	bf00      	nop
 800216c:	e7fe      	b.n	800216c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <xQueueGenericSendFromISR+0x3c>
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <xQueueGenericSendFromISR+0x40>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <xQueueGenericSendFromISR+0x42>
 8002180:	2300      	movs	r3, #0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10a      	bne.n	800219c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	623b      	str	r3, [r7, #32]
}
 8002198:	bf00      	nop
 800219a:	e7fe      	b.n	800219a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d103      	bne.n	80021aa <xQueueGenericSendFromISR+0x6a>
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <xQueueGenericSendFromISR+0x6e>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <xQueueGenericSendFromISR+0x70>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	61fb      	str	r3, [r7, #28]
}
 80021c6:	bf00      	nop
 80021c8:	e7fe      	b.n	80021c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021ca:	f002 f889 	bl	80042e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021ce:	f3ef 8211 	mrs	r2, BASEPRI
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	61ba      	str	r2, [r7, #24]
 80021e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <xQueueGenericSendFromISR+0xbc>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d12c      	bne.n	8002256 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800220c:	f000 fa33 	bl	8002676 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002210:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d112      	bne.n	8002240 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	3324      	adds	r3, #36	; 0x24
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ffe8 	bl	80031fc <xTaskRemoveFromEventList>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00e      	beq.n	8002250 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e007      	b.n	8002250 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002244:	3301      	adds	r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	b25a      	sxtb	r2, r3
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002250:	2301      	movs	r3, #1
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002254:	e001      	b.n	800225a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002264:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002268:	4618      	mov	r0, r3
 800226a:	3738      	adds	r7, #56	; 0x38
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <xQueueReceive+0x30>
	__asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	623b      	str	r3, [r7, #32]
}
 800229c:	bf00      	nop
 800229e:	e7fe      	b.n	800229e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <xQueueReceive+0x3e>
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <xQueueReceive+0x42>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <xQueueReceive+0x44>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <xQueueReceive+0x5e>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	61fb      	str	r3, [r7, #28]
}
 80022ca:	bf00      	nop
 80022cc:	e7fe      	b.n	80022cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022ce:	f001 f957 	bl	8003580 <xTaskGetSchedulerState>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <xQueueReceive+0x6e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <xQueueReceive+0x72>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <xQueueReceive+0x74>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xQueueReceive+0x8e>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	61bb      	str	r3, [r7, #24]
}
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80022fe:	f001 ff2d 	bl	800415c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01f      	beq.n	800234e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002312:	f000 fa1a 	bl	800274a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00f      	beq.n	8002346 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	3310      	adds	r3, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f000 ff66 	bl	80031fc <xTaskRemoveFromEventList>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <xQueueReceive+0x1bc>)
 8002338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002346:	f001 ff39 	bl	80041bc <vPortExitCritical>
				return pdPASS;
 800234a:	2301      	movs	r3, #1
 800234c:	e069      	b.n	8002422 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002354:	f001 ff32 	bl	80041bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002358:	2300      	movs	r3, #0
 800235a:	e062      	b.n	8002422 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	4618      	mov	r0, r3
 8002368:	f000 ffac 	bl	80032c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800236c:	2301      	movs	r3, #1
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002370:	f001 ff24 	bl	80041bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002374:	f000 fd1e 	bl	8002db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002378:	f001 fef0 	bl	800415c <vPortEnterCritical>
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002382:	b25b      	sxtb	r3, r3
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d103      	bne.n	8002392 <xQueueReceive+0x122>
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d103      	bne.n	80023a8 <xQueueReceive+0x138>
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a8:	f001 ff08 	bl	80041bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023ac:	1d3a      	adds	r2, r7, #4
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 ff9b 	bl	80032f0 <xTaskCheckForTimeOut>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d123      	bne.n	8002408 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c2:	f000 fa3a 	bl	800283a <prvIsQueueEmpty>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	3324      	adds	r3, #36	; 0x24
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fec1 	bl	800315c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023dc:	f000 f9db 	bl	8002796 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023e0:	f000 fcf6 	bl	8002dd0 <xTaskResumeAll>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d189      	bne.n	80022fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <xQueueReceive+0x1bc>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	e780      	b.n	80022fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023fe:	f000 f9ca 	bl	8002796 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002402:	f000 fce5 	bl	8002dd0 <xTaskResumeAll>
 8002406:	e77a      	b.n	80022fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800240a:	f000 f9c4 	bl	8002796 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800240e:	f000 fcdf 	bl	8002dd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002414:	f000 fa11 	bl	800283a <prvIsQueueEmpty>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f43f af6f 	beq.w	80022fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002422:	4618      	mov	r0, r3
 8002424:	3730      	adds	r7, #48	; 0x30
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	; 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	623b      	str	r3, [r7, #32]
}
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	61fb      	str	r3, [r7, #28]
}
 800247c:	bf00      	nop
 800247e:	e7fe      	b.n	800247e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002480:	f001 f87e 	bl	8003580 <xTaskGetSchedulerState>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <xQueueSemaphoreTake+0x60>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <xQueueSemaphoreTake+0x64>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <xQueueSemaphoreTake+0x66>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	61bb      	str	r3, [r7, #24]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80024b0:	f001 fe54 	bl	800415c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d024      	beq.n	800250a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80024d0:	f001 f9d6 	bl	8003880 <pvTaskIncrementMutexHeldCount>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00f      	beq.n	8002502 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	3310      	adds	r3, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fe88 	bl	80031fc <xTaskRemoveFromEventList>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <xQueueSemaphoreTake+0x214>)
 80024f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002502:	f001 fe5b 	bl	80041bc <vPortExitCritical>
				return pdPASS;
 8002506:	2301      	movs	r3, #1
 8002508:	e097      	b.n	800263a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	617b      	str	r3, [r7, #20]
}
 8002528:	bf00      	nop
 800252a:	e7fe      	b.n	800252a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800252c:	f001 fe46 	bl	80041bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002530:	2300      	movs	r3, #0
 8002532:	e082      	b.n	800263a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fec0 	bl	80032c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002544:	2301      	movs	r3, #1
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002548:	f001 fe38 	bl	80041bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800254c:	f000 fc32 	bl	8002db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002550:	f001 fe04 	bl	800415c <vPortEnterCritical>
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255a:	b25b      	sxtb	r3, r3
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d103      	bne.n	800256a <xQueueSemaphoreTake+0x13a>
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002570:	b25b      	sxtb	r3, r3
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d103      	bne.n	8002580 <xQueueSemaphoreTake+0x150>
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002580:	f001 fe1c 	bl	80041bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002584:	463a      	mov	r2, r7
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 feaf 	bl	80032f0 <xTaskCheckForTimeOut>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d132      	bne.n	80025fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800259a:	f000 f94e 	bl	800283a <prvIsQueueEmpty>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d026      	beq.n	80025f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80025ac:	f001 fdd6 	bl	800415c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f801 	bl	80035bc <xTaskPriorityInherit>
 80025ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80025bc:	f001 fdfe 	bl	80041bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	3324      	adds	r3, #36	; 0x24
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fdc7 	bl	800315c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025d0:	f000 f8e1 	bl	8002796 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025d4:	f000 fbfc 	bl	8002dd0 <xTaskResumeAll>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f47f af68 	bne.w	80024b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <xQueueSemaphoreTake+0x214>)
 80025e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	e75e      	b.n	80024b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80025f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025f4:	f000 f8cf 	bl	8002796 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025f8:	f000 fbea 	bl	8002dd0 <xTaskResumeAll>
 80025fc:	e758      	b.n	80024b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80025fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002600:	f000 f8c9 	bl	8002796 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002604:	f000 fbe4 	bl	8002dd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800260a:	f000 f916 	bl	800283a <prvIsQueueEmpty>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f43f af4d 	beq.w	80024b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800261c:	f001 fd9e 	bl	800415c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002622:	f000 f811 	bl	8002648 <prvGetDisinheritPriorityAfterTimeout>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262e:	4618      	mov	r0, r3
 8002630:	f001 f8a0 	bl	8003774 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002634:	f001 fdc2 	bl	80041bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800263a:	4618      	mov	r0, r3
 800263c:	3738      	adds	r7, #56	; 0x38
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e001      	b.n	800266a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800266a:	68fb      	ldr	r3, [r7, #12]
	}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d14d      	bne.n	8002738 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fff9 	bl	8003698 <xTaskPriorityDisinherit>
 80026a6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	e043      	b.n	8002738 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6898      	ldr	r0, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	461a      	mov	r2, r3
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	f002 f847 	bl	8004754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d32b      	bcc.n	8002738 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e026      	b.n	8002738 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68d8      	ldr	r0, [r3, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	461a      	mov	r2, r3
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	f002 f82d 	bl	8004754 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	425b      	negs	r3, r3
 8002704:	441a      	add	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d207      	bcs.n	8002726 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	425b      	negs	r3, r3
 8002720:	441a      	add	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d105      	bne.n	8002738 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	3b01      	subs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002740:	697b      	ldr	r3, [r7, #20]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	d303      	bcc.n	800277e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68d9      	ldr	r1, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	461a      	mov	r2, r3
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	f001 ffe3 	bl	8004754 <memcpy>
	}
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800279e:	f001 fcdd 	bl	800415c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027aa:	e011      	b.n	80027d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3324      	adds	r3, #36	; 0x24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd1f 	bl	80031fc <xTaskRemoveFromEventList>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027c4:	f000 fdf6 	bl	80033b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	dce9      	bgt.n	80027ac <prvUnlockQueue+0x16>
 80027d8:	e000      	b.n	80027dc <prvUnlockQueue+0x46>
					break;
 80027da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	22ff      	movs	r2, #255	; 0xff
 80027e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027e4:	f001 fcea 	bl	80041bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027e8:	f001 fcb8 	bl	800415c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f4:	e011      	b.n	800281a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3310      	adds	r3, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fcfa 	bl	80031fc <xTaskRemoveFromEventList>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800280e:	f000 fdd1 	bl	80033b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800281a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800281e:	2b00      	cmp	r3, #0
 8002820:	dce9      	bgt.n	80027f6 <prvUnlockQueue+0x60>
 8002822:	e000      	b.n	8002826 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002824:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800282e:	f001 fcc5 	bl	80041bc <vPortExitCritical>
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002842:	f001 fc8b 	bl	800415c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e001      	b.n	8002858 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002858:	f001 fcb0 	bl	80041bc <vPortExitCritical>

	return xReturn;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800286e:	f001 fc75 	bl	800415c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	429a      	cmp	r2, r3
 800287c:	d102      	bne.n	8002884 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800287e:	2301      	movs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e001      	b.n	8002888 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002888:	f001 fc98 	bl	80041bc <vPortExitCritical>

	return xReturn;
 800288c:	68fb      	ldr	r3, [r7, #12]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e014      	b.n	80028d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <vQueueAddToRegistry+0x4c>)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028b4:	490b      	ldr	r1, [pc, #44]	; (80028e4 <vQueueAddToRegistry+0x4c>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <vQueueAddToRegistry+0x4c>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028ca:	e006      	b.n	80028da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d9e7      	bls.n	80028a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000748 	.word	0x20000748

080028e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028f8:	f001 fc30 	bl	800415c <vPortEnterCritical>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d103      	bne.n	8002912 <vQueueWaitForMessageRestricted+0x2a>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002918:	b25b      	sxtb	r3, r3
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d103      	bne.n	8002928 <vQueueWaitForMessageRestricted+0x40>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002928:	f001 fc48 	bl	80041bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3324      	adds	r3, #36	; 0x24
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fc31 	bl	80031a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff27 	bl	8002796 <prvUnlockQueue>
	}
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	; 0x38
 8002954:	af04      	add	r7, sp, #16
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	623b      	str	r3, [r7, #32]
}
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xTaskCreateStatic+0x46>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	61fb      	str	r3, [r7, #28]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002996:	235c      	movs	r3, #92	; 0x5c
 8002998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b5c      	cmp	r3, #92	; 0x5c
 800299e:	d00a      	beq.n	80029b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	61bb      	str	r3, [r7, #24]
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01e      	beq.n	80029fa <xTaskCreateStatic+0xaa>
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01b      	beq.n	80029fa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029d4:	2300      	movs	r3, #0
 80029d6:	9303      	str	r3, [sp, #12]
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f850 	bl	8002a92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029f4:	f000 f8d4 	bl	8002ba0 <prvAddNewTaskToReadyList>
 80029f8:	e001      	b.n	80029fe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029fe:	697b      	ldr	r3, [r7, #20]
	}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08c      	sub	sp, #48	; 0x30
 8002a0c:	af04      	add	r7, sp, #16
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 fc9d 	bl	800435c <pvPortMalloc>
 8002a22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00e      	beq.n	8002a48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a2a:	205c      	movs	r0, #92	; 0x5c
 8002a2c:	f001 fc96 	bl	800435c <pvPortMalloc>
 8002a30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3e:	e005      	b.n	8002a4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a40:	6978      	ldr	r0, [r7, #20]
 8002a42:	f001 fd4f 	bl	80044e4 <vPortFree>
 8002a46:	e001      	b.n	8002a4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9303      	str	r3, [sp, #12]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	9302      	str	r3, [sp, #8]
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f80e 	bl	8002a92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a76:	69f8      	ldr	r0, [r7, #28]
 8002a78:	f000 f892 	bl	8002ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e002      	b.n	8002a88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a88:	69bb      	ldr	r3, [r7, #24]
	}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b088      	sub	sp, #32
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	21a5      	movs	r1, #165	; 0xa5
 8002aac:	f001 fe60 	bl	8004770 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002aba:	3b01      	subs	r3, #1
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f023 0307 	bic.w	r3, r3, #7
 8002ac8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	617b      	str	r3, [r7, #20]
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e012      	b.n	8002b16 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	7819      	ldrb	r1, [r3, #0]
 8002af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	3334      	adds	r3, #52	; 0x34
 8002b00:	460a      	mov	r2, r1
 8002b02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d9e9      	bls.n	8002af0 <prvInitialiseNewTask+0x5e>
 8002b1c:	e000      	b.n	8002b20 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002b1e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	2b37      	cmp	r3, #55	; 0x37
 8002b2c:	d901      	bls.n	8002b32 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b2e:	2337      	movs	r3, #55	; 0x37
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	2200      	movs	r2, #0
 8002b42:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	3304      	adds	r3, #4
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f82a 	bl	8001ba2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	3318      	adds	r3, #24
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f825 	bl	8001ba2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	2200      	movs	r2, #0
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	69b8      	ldr	r0, [r7, #24]
 8002b82:	f001 f9f7 	bl	8003f74 <pxPortInitialiseStack>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b98:	bf00      	nop
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ba8:	f001 fad8 	bl	800415c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <prvAddNewTaskToReadyList+0xc4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <prvAddNewTaskToReadyList+0xc4>)
 8002bb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <prvAddNewTaskToReadyList+0xc4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d110      	bne.n	8002bee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bcc:	f000 fc16 	bl	80033fc <prvInitialiseTaskLists>
 8002bd0:	e00d      	b.n	8002bee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <prvAddNewTaskToReadyList+0xcc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d802      	bhi.n	8002bee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002be8:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <prvAddNewTaskToReadyList+0xd0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <prvAddNewTaskToReadyList+0xd0>)
 8002bf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <prvAddNewTaskToReadyList+0xd0>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <prvAddNewTaskToReadyList+0xd4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d903      	bls.n	8002c14 <prvAddNewTaskToReadyList+0x74>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <prvAddNewTaskToReadyList+0xd4>)
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <prvAddNewTaskToReadyList+0xd8>)
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7fe ffc5 	bl	8001bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c30:	f001 fac4 	bl	80041bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <prvAddNewTaskToReadyList+0xcc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <prvAddNewTaskToReadyList+0xc8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d207      	bcs.n	8002c5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <prvAddNewTaskToReadyList+0xdc>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000c5c 	.word	0x20000c5c
 8002c68:	20000788 	.word	0x20000788
 8002c6c:	20000c68 	.word	0x20000c68
 8002c70:	20000c78 	.word	0x20000c78
 8002c74:	20000c64 	.word	0x20000c64
 8002c78:	2000078c 	.word	0x2000078c
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d017      	beq.n	8002cc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <vTaskDelay+0x60>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <vTaskDelay+0x30>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	60bb      	str	r3, [r7, #8]
}
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cb0:	f000 f880 	bl	8002db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fdf6 	bl	80038a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cbc:	f000 f888 	bl	8002dd0 <xTaskResumeAll>
 8002cc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <vTaskDelay+0x64>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000c84 	.word	0x20000c84
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cf6:	463a      	mov	r2, r7
 8002cf8:	1d39      	adds	r1, r7, #4
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fefe 	bl	8001b00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	9202      	str	r2, [sp, #8]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	460a      	mov	r2, r1
 8002d16:	4921      	ldr	r1, [pc, #132]	; (8002d9c <vTaskStartScheduler+0xb4>)
 8002d18:	4821      	ldr	r0, [pc, #132]	; (8002da0 <vTaskStartScheduler+0xb8>)
 8002d1a:	f7ff fe19 	bl	8002950 <xTaskCreateStatic>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <vTaskStartScheduler+0xbc>)
 8002d22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <vTaskStartScheduler+0xbc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e001      	b.n	8002d36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d102      	bne.n	8002d42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d3c:	f000 fe08 	bl	8003950 <xTimerCreateTimerTask>
 8002d40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d116      	bne.n	8002d76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	613b      	str	r3, [r7, #16]
}
 8002d5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <vTaskStartScheduler+0xc0>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <vTaskStartScheduler+0xc4>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <vTaskStartScheduler+0xc8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d70:	f001 f982 	bl	8004078 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d74:	e00e      	b.n	8002d94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d10a      	bne.n	8002d94 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	60fb      	str	r3, [r7, #12]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <vTaskStartScheduler+0xaa>
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	080047d0 	.word	0x080047d0
 8002da0:	080033cd 	.word	0x080033cd
 8002da4:	20000c80 	.word	0x20000c80
 8002da8:	20000c7c 	.word	0x20000c7c
 8002dac:	20000c68 	.word	0x20000c68
 8002db0:	20000c60 	.word	0x20000c60

08002db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <vTaskSuspendAll+0x18>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <vTaskSuspendAll+0x18>)
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000c84 	.word	0x20000c84

08002dd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <xTaskResumeAll+0x118>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10a      	bne.n	8002dfc <xTaskResumeAll+0x2c>
	__asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	603b      	str	r3, [r7, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	e7fe      	b.n	8002dfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dfc:	f001 f9ae 	bl	800415c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <xTaskResumeAll+0x118>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4a38      	ldr	r2, [pc, #224]	; (8002ee8 <xTaskResumeAll+0x118>)
 8002e08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <xTaskResumeAll+0x118>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d162      	bne.n	8002ed8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e12:	4b36      	ldr	r3, [pc, #216]	; (8002eec <xTaskResumeAll+0x11c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d05e      	beq.n	8002ed8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e1a:	e02f      	b.n	8002e7c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <xTaskResumeAll+0x120>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3318      	adds	r3, #24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ff21 	bl	8001c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3304      	adds	r3, #4
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ff1c 	bl	8001c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <xTaskResumeAll+0x124>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d903      	bls.n	8002e4c <xTaskResumeAll+0x7c>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <xTaskResumeAll+0x124>)
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <xTaskResumeAll+0x128>)
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f7fe fea9 	bl	8001bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <xTaskResumeAll+0x12c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <xTaskResumeAll+0x130>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <xTaskResumeAll+0x120>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1cb      	bne.n	8002e1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e8a:	f000 fb55 	bl	8003538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <xTaskResumeAll+0x134>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e9a:	f000 f845 	bl	8002f28 <xTaskIncrementTick>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <xTaskResumeAll+0x130>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f1      	bne.n	8002e9a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <xTaskResumeAll+0x134>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <xTaskResumeAll+0x130>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <xTaskResumeAll+0x138>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ed8:	f001 f970 	bl	80041bc <vPortExitCritical>

	return xAlreadyYielded;
 8002edc:	68bb      	ldr	r3, [r7, #8]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000c84 	.word	0x20000c84
 8002eec:	20000c5c 	.word	0x20000c5c
 8002ef0:	20000c1c 	.word	0x20000c1c
 8002ef4:	20000c64 	.word	0x20000c64
 8002ef8:	2000078c 	.word	0x2000078c
 8002efc:	20000788 	.word	0x20000788
 8002f00:	20000c70 	.word	0x20000c70
 8002f04:	20000c6c 	.word	0x20000c6c
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <xTaskGetTickCount+0x18>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f18:	687b      	ldr	r3, [r7, #4]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	20000c60 	.word	0x20000c60

08002f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <xTaskIncrementTick+0x150>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 808e 	bne.w	8003058 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <xTaskIncrementTick+0x154>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f44:	4a4d      	ldr	r2, [pc, #308]	; (800307c <xTaskIncrementTick+0x154>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d120      	bne.n	8002f92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <xTaskIncrementTick+0x158>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <xTaskIncrementTick+0x48>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	603b      	str	r3, [r7, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xTaskIncrementTick+0x46>
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <xTaskIncrementTick+0x158>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b43      	ldr	r3, [pc, #268]	; (8003084 <xTaskIncrementTick+0x15c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a41      	ldr	r2, [pc, #260]	; (8003080 <xTaskIncrementTick+0x158>)
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4a41      	ldr	r2, [pc, #260]	; (8003084 <xTaskIncrementTick+0x15c>)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b40      	ldr	r3, [pc, #256]	; (8003088 <xTaskIncrementTick+0x160>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <xTaskIncrementTick+0x160>)
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	f000 fad3 	bl	8003538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f92:	4b3e      	ldr	r3, [pc, #248]	; (800308c <xTaskIncrementTick+0x164>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d34e      	bcc.n	800303a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f9c:	4b38      	ldr	r3, [pc, #224]	; (8003080 <xTaskIncrementTick+0x158>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <xTaskIncrementTick+0x82>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <xTaskIncrementTick+0x84>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <xTaskIncrementTick+0x164>)
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	601a      	str	r2, [r3, #0]
					break;
 8002fb8:	e03f      	b.n	800303a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fba:	4b31      	ldr	r3, [pc, #196]	; (8003080 <xTaskIncrementTick+0x158>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d203      	bcs.n	8002fda <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fd2:	4a2e      	ldr	r2, [pc, #184]	; (800308c <xTaskIncrementTick+0x164>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6013      	str	r3, [r2, #0]
						break;
 8002fd8:	e02f      	b.n	800303a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fe46 	bl	8001c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fe3d 	bl	8001c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <xTaskIncrementTick+0x168>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d903      	bls.n	800300a <xTaskIncrementTick+0xe2>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	4a22      	ldr	r2, [pc, #136]	; (8003090 <xTaskIncrementTick+0x168>)
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <xTaskIncrementTick+0x16c>)
 8003018:	441a      	add	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3304      	adds	r3, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7fe fdca 	bl	8001bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <xTaskIncrementTick+0x170>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	429a      	cmp	r2, r3
 8003032:	d3b3      	bcc.n	8002f9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003038:	e7b0      	b.n	8002f9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <xTaskIncrementTick+0x170>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	4914      	ldr	r1, [pc, #80]	; (8003094 <xTaskIncrementTick+0x16c>)
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d907      	bls.n	8003062 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003052:	2301      	movs	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e004      	b.n	8003062 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <xTaskIncrementTick+0x174>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <xTaskIncrementTick+0x174>)
 8003060:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <xTaskIncrementTick+0x178>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800306e:	697b      	ldr	r3, [r7, #20]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000c84 	.word	0x20000c84
 800307c:	20000c60 	.word	0x20000c60
 8003080:	20000c14 	.word	0x20000c14
 8003084:	20000c18 	.word	0x20000c18
 8003088:	20000c74 	.word	0x20000c74
 800308c:	20000c7c 	.word	0x20000c7c
 8003090:	20000c64 	.word	0x20000c64
 8003094:	2000078c 	.word	0x2000078c
 8003098:	20000788 	.word	0x20000788
 800309c:	20000c6c 	.word	0x20000c6c
 80030a0:	20000c70 	.word	0x20000c70

080030a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <vTaskSwitchContext+0xa4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <vTaskSwitchContext+0xa8>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030b8:	e041      	b.n	800313e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <vTaskSwitchContext+0xa8>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <vTaskSwitchContext+0xac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e010      	b.n	80030ea <vTaskSwitchContext+0x46>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	607b      	str	r3, [r7, #4]
}
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <vTaskSwitchContext+0x3e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	491a      	ldr	r1, [pc, #104]	; (8003154 <vTaskSwitchContext+0xb0>)
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0e4      	beq.n	80030c8 <vTaskSwitchContext+0x24>
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <vTaskSwitchContext+0xb0>)
 800310a:	4413      	add	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3308      	adds	r3, #8
 8003120:	429a      	cmp	r2, r3
 8003122:	d104      	bne.n	800312e <vTaskSwitchContext+0x8a>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a08      	ldr	r2, [pc, #32]	; (8003158 <vTaskSwitchContext+0xb4>)
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4a05      	ldr	r2, [pc, #20]	; (8003150 <vTaskSwitchContext+0xac>)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6013      	str	r3, [r2, #0]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	20000c84 	.word	0x20000c84
 800314c:	20000c70 	.word	0x20000c70
 8003150:	20000c64 	.word	0x20000c64
 8003154:	2000078c 	.word	0x2000078c
 8003158:	20000788 	.word	0x20000788

0800315c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	60fb      	str	r3, [r7, #12]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <vTaskPlaceOnEventList+0x44>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3318      	adds	r3, #24
 8003188:	4619      	mov	r1, r3
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fd38 	bl	8001c00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003190:	2101      	movs	r1, #1
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	f000 fb88 	bl	80038a8 <prvAddCurrentTaskToDelayedList>
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000788 	.word	0x20000788

080031a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	617b      	str	r3, [r7, #20]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3318      	adds	r3, #24
 80031d2:	4619      	mov	r1, r3
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7fe fcf0 	bl	8001bba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68b8      	ldr	r0, [r7, #8]
 80031ea:	f000 fb5d 	bl	80038a8 <prvAddCurrentTaskToDelayedList>
	}
 80031ee:	bf00      	nop
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000788 	.word	0x20000788

080031fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	60fb      	str	r3, [r7, #12]
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3318      	adds	r3, #24
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fd1f 	bl	8001c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <xTaskRemoveFromEventList+0xb0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11d      	bne.n	8003276 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3304      	adds	r3, #4
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fd16 	bl	8001c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <xTaskRemoveFromEventList+0xb4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d903      	bls.n	8003258 <xTaskRemoveFromEventList+0x5c>
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <xTaskRemoveFromEventList+0xb4>)
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <xTaskRemoveFromEventList+0xb8>)
 8003266:	441a      	add	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7fe fca3 	bl	8001bba <vListInsertEnd>
 8003274:	e005      	b.n	8003282 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3318      	adds	r3, #24
 800327a:	4619      	mov	r1, r3
 800327c:	480e      	ldr	r0, [pc, #56]	; (80032b8 <xTaskRemoveFromEventList+0xbc>)
 800327e:	f7fe fc9c 	bl	8001bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <xTaskRemoveFromEventList+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	d905      	bls.n	800329c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <xTaskRemoveFromEventList+0xc4>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e001      	b.n	80032a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80032a0:	697b      	ldr	r3, [r7, #20]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000c84 	.word	0x20000c84
 80032b0:	20000c64 	.word	0x20000c64
 80032b4:	2000078c 	.word	0x2000078c
 80032b8:	20000c1c 	.word	0x20000c1c
 80032bc:	20000788 	.word	0x20000788
 80032c0:	20000c70 	.word	0x20000c70

080032c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <vTaskInternalSetTimeOutState+0x24>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <vTaskInternalSetTimeOutState+0x28>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	605a      	str	r2, [r3, #4]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000c74 	.word	0x20000c74
 80032ec:	20000c60 	.word	0x20000c60

080032f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	613b      	str	r3, [r7, #16]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	60fb      	str	r3, [r7, #12]
}
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003332:	f000 ff13 	bl	800415c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <xTaskCheckForTimeOut+0xbc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d102      	bne.n	8003356 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e023      	b.n	800339e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <xTaskCheckForTimeOut+0xc0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d007      	beq.n	8003372 <xTaskCheckForTimeOut+0x82>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800336c:	2301      	movs	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e015      	b.n	800339e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	d20b      	bcs.n	8003394 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff9b 	bl	80032c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e004      	b.n	800339e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800339e:	f000 ff0d 	bl	80041bc <vPortExitCritical>

	return xReturn;
 80033a2:	69fb      	ldr	r3, [r7, #28]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000c60 	.word	0x20000c60
 80033b0:	20000c74 	.word	0x20000c74

080033b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <vTaskMissedYield+0x14>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000c70 	.word	0x20000c70

080033cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033d4:	f000 f852 	bl	800347c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <prvIdleTask+0x28>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d9f9      	bls.n	80033d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <prvIdleTask+0x2c>)
 80033e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033f0:	e7f0      	b.n	80033d4 <prvIdleTask+0x8>
 80033f2:	bf00      	nop
 80033f4:	2000078c 	.word	0x2000078c
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	e00c      	b.n	8003422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <prvInitialiseTaskLists+0x60>)
 8003414:	4413      	add	r3, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fba4 	bl	8001b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3301      	adds	r3, #1
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b37      	cmp	r3, #55	; 0x37
 8003426:	d9ef      	bls.n	8003408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <prvInitialiseTaskLists+0x64>)
 800342a:	f7fe fb9b 	bl	8001b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800342e:	480d      	ldr	r0, [pc, #52]	; (8003464 <prvInitialiseTaskLists+0x68>)
 8003430:	f7fe fb98 	bl	8001b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <prvInitialiseTaskLists+0x6c>)
 8003436:	f7fe fb95 	bl	8001b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800343a:	480c      	ldr	r0, [pc, #48]	; (800346c <prvInitialiseTaskLists+0x70>)
 800343c:	f7fe fb92 	bl	8001b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003440:	480b      	ldr	r0, [pc, #44]	; (8003470 <prvInitialiseTaskLists+0x74>)
 8003442:	f7fe fb8f 	bl	8001b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <prvInitialiseTaskLists+0x78>)
 8003448:	4a05      	ldr	r2, [pc, #20]	; (8003460 <prvInitialiseTaskLists+0x64>)
 800344a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <prvInitialiseTaskLists+0x7c>)
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <prvInitialiseTaskLists+0x68>)
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000078c 	.word	0x2000078c
 8003460:	20000bec 	.word	0x20000bec
 8003464:	20000c00 	.word	0x20000c00
 8003468:	20000c1c 	.word	0x20000c1c
 800346c:	20000c30 	.word	0x20000c30
 8003470:	20000c48 	.word	0x20000c48
 8003474:	20000c14 	.word	0x20000c14
 8003478:	20000c18 	.word	0x20000c18

0800347c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003482:	e019      	b.n	80034b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003484:	f000 fe6a 	bl	800415c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <prvCheckTasksWaitingTermination+0x50>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fbeb 	bl	8001c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <prvCheckTasksWaitingTermination+0x54>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3b01      	subs	r3, #1
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <prvCheckTasksWaitingTermination+0x54>)
 80034a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <prvCheckTasksWaitingTermination+0x58>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <prvCheckTasksWaitingTermination+0x58>)
 80034ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034ae:	f000 fe85 	bl	80041bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f810 	bl	80034d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <prvCheckTasksWaitingTermination+0x58>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e1      	bne.n	8003484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000c30 	.word	0x20000c30
 80034d0:	20000c5c 	.word	0x20000c5c
 80034d4:	20000c44 	.word	0x20000c44

080034d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fff8 	bl	80044e4 <vPortFree>
				vPortFree( pxTCB );
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fff5 	bl	80044e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034fa:	e018      	b.n	800352e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003502:	2b01      	cmp	r3, #1
 8003504:	d103      	bne.n	800350e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 ffec 	bl	80044e4 <vPortFree>
	}
 800350c:	e00f      	b.n	800352e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003514:	2b02      	cmp	r3, #2
 8003516:	d00a      	beq.n	800352e <prvDeleteTCB+0x56>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	60fb      	str	r3, [r7, #12]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <prvDeleteTCB+0x54>
	}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <prvResetNextTaskUnblockTime+0x40>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <prvResetNextTaskUnblockTime+0x14>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <prvResetNextTaskUnblockTime+0x16>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvResetNextTaskUnblockTime+0x44>)
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800355a:	e008      	b.n	800356e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvResetNextTaskUnblockTime+0x40>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <prvResetNextTaskUnblockTime+0x44>)
 800356c:	6013      	str	r3, [r2, #0]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000c14 	.word	0x20000c14
 800357c:	20000c7c 	.word	0x20000c7c

08003580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <xTaskGetSchedulerState+0x34>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800358e:	2301      	movs	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	e008      	b.n	80035a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <xTaskGetSchedulerState+0x38>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800359c:	2302      	movs	r3, #2
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	e001      	b.n	80035a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035a6:	687b      	ldr	r3, [r7, #4]
	}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000c68 	.word	0x20000c68
 80035b8:	20000c84 	.word	0x20000c84

080035bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d056      	beq.n	8003680 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <xTaskPriorityInherit+0xd0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d246      	bcs.n	800366e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db06      	blt.n	80035f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <xTaskPriorityInherit+0xd0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6959      	ldr	r1, [r3, #20]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4a22      	ldr	r2, [pc, #136]	; (8003690 <xTaskPriorityInherit+0xd4>)
 8003608:	4413      	add	r3, r2
 800360a:	4299      	cmp	r1, r3
 800360c:	d101      	bne.n	8003612 <xTaskPriorityInherit+0x56>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xTaskPriorityInherit+0x58>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d022      	beq.n	800365e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3304      	adds	r3, #4
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fb27 	bl	8001c70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <xTaskPriorityInherit+0xd0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <xTaskPriorityInherit+0xd8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d903      	bls.n	8003640 <xTaskPriorityInherit+0x84>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <xTaskPriorityInherit+0xd8>)
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4a10      	ldr	r2, [pc, #64]	; (8003690 <xTaskPriorityInherit+0xd4>)
 800364e:	441a      	add	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f7fe faaf 	bl	8001bba <vListInsertEnd>
 800365c:	e004      	b.n	8003668 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <xTaskPriorityInherit+0xd0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e008      	b.n	8003680 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <xTaskPriorityInherit+0xd0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	429a      	cmp	r2, r3
 800367a:	d201      	bcs.n	8003680 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003680:	68fb      	ldr	r3, [r7, #12]
	}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000788 	.word	0x20000788
 8003690:	2000078c 	.word	0x2000078c
 8003694:	20000c64 	.word	0x20000c64

08003698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d056      	beq.n	800375c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <xTaskPriorityDisinherit+0xd0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d00a      	beq.n	80036ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60fb      	str	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d02c      	beq.n	800375c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d128      	bne.n	800375c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	3304      	adds	r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe faae 	bl	8001c70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <xTaskPriorityDisinherit+0xd4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d903      	bls.n	800373c <xTaskPriorityDisinherit+0xa4>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <xTaskPriorityDisinherit+0xd4>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4a09      	ldr	r2, [pc, #36]	; (8003770 <xTaskPriorityDisinherit+0xd8>)
 800374a:	441a      	add	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f7fe fa31 	bl	8001bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800375c:	697b      	ldr	r3, [r7, #20]
	}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000788 	.word	0x20000788
 800376c:	20000c64 	.word	0x20000c64
 8003770:	2000078c 	.word	0x2000078c

08003774 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003782:	2301      	movs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d06f      	beq.n	800386c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	60fb      	str	r3, [r7, #12]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d902      	bls.n	80037ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	e002      	b.n	80037c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d050      	beq.n	800386c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d14b      	bne.n	800386c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10a      	bne.n	80037f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	60bb      	str	r3, [r7, #8]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db04      	blt.n	8003812 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6959      	ldr	r1, [r3, #20]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003822:	4413      	add	r3, r2
 8003824:	4299      	cmp	r1, r3
 8003826:	d101      	bne.n	800382c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01c      	beq.n	800386c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3304      	adds	r3, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fa1a 	bl	8001c70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d903      	bls.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	4a0b      	ldr	r2, [pc, #44]	; (800387c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4a06      	ldr	r2, [pc, #24]	; (8003878 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800385e:	441a      	add	r2, r3
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7fe f9a7 	bl	8001bba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000788 	.word	0x20000788
 8003878:	2000078c 	.word	0x2000078c
 800387c:	20000c64 	.word	0x20000c64

08003880 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003892:	3201      	adds	r2, #1
 8003894:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003896:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003898:	681b      	ldr	r3, [r3, #0]
	}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000788 	.word	0x20000788

080038a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <prvAddCurrentTaskToDelayedList+0x90>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe f9d6 	bl	8001c70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d10a      	bne.n	80038e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4819      	ldr	r0, [pc, #100]	; (8003940 <prvAddCurrentTaskToDelayedList+0x98>)
 80038dc:	f7fe f96d 	bl	8001bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038e0:	e026      	b.n	8003930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d209      	bcs.n	800390e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7fe f97a 	bl	8001c00 <vListInsert>
}
 800390c:	e010      	b.n	8003930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f7fe f970 	bl	8001c00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	d202      	bcs.n	8003930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <prvAddCurrentTaskToDelayedList+0xa4>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000c60 	.word	0x20000c60
 800393c:	20000788 	.word	0x20000788
 8003940:	20000c48 	.word	0x20000c48
 8003944:	20000c18 	.word	0x20000c18
 8003948:	20000c14 	.word	0x20000c14
 800394c:	20000c7c 	.word	0x20000c7c

08003950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800395a:	f000 facb 	bl	8003ef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <xTimerCreateTimerTask+0x80>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d021      	beq.n	80039aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800396e:	1d3a      	adds	r2, r7, #4
 8003970:	f107 0108 	add.w	r1, r7, #8
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe f8d9 	bl	8001b30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	9202      	str	r2, [sp, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	2302      	movs	r3, #2
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2300      	movs	r3, #0
 800398e:	460a      	mov	r2, r1
 8003990:	4910      	ldr	r1, [pc, #64]	; (80039d4 <xTimerCreateTimerTask+0x84>)
 8003992:	4811      	ldr	r0, [pc, #68]	; (80039d8 <xTimerCreateTimerTask+0x88>)
 8003994:	f7fe ffdc 	bl	8002950 <xTaskCreateStatic>
 8003998:	4603      	mov	r3, r0
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <xTimerCreateTimerTask+0x8c>)
 800399c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <xTimerCreateTimerTask+0x8c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039a6:	2301      	movs	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	613b      	str	r3, [r7, #16]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039c6:	697b      	ldr	r3, [r7, #20]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000cb8 	.word	0x20000cb8
 80039d4:	080047d8 	.word	0x080047d8
 80039d8:	08003afd 	.word	0x08003afd
 80039dc:	20000cbc 	.word	0x20000cbc

080039e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xTimerGenericCommand+0x2e>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	623b      	str	r3, [r7, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <xTimerGenericCommand+0x98>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02a      	beq.n	8003a6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	dc18      	bgt.n	8003a5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a28:	f7ff fdaa 	bl	8003580 <xTaskGetSchedulerState>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d109      	bne.n	8003a46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <xTimerGenericCommand+0x98>)
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	f107 0110 	add.w	r1, r7, #16
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3e:	f7fe fa81 	bl	8001f44 <xQueueGenericSend>
 8003a42:	6278      	str	r0, [r7, #36]	; 0x24
 8003a44:	e012      	b.n	8003a6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <xTimerGenericCommand+0x98>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f107 0110 	add.w	r1, r7, #16
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2200      	movs	r2, #0
 8003a52:	f7fe fa77 	bl	8001f44 <xQueueGenericSend>
 8003a56:	6278      	str	r0, [r7, #36]	; 0x24
 8003a58:	e008      	b.n	8003a6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <xTimerGenericCommand+0x98>)
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f107 0110 	add.w	r1, r7, #16
 8003a62:	2300      	movs	r3, #0
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	f7fe fb6b 	bl	8002140 <xQueueGenericSendFromISR>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000cb8 	.word	0x20000cb8

08003a7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <prvProcessExpiredTimer+0x7c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe f8eb 	bl	8001c70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d122      	bne.n	8003ae8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	18d1      	adds	r1, r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f000 f8c8 	bl	8003c44 <prvInsertTimerInActiveList>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f7ff ff8b 	bl	80039e0 <xTimerGenericCommand>
 8003aca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60fb      	str	r3, [r7, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	4798      	blx	r3
}
 8003af0:	bf00      	nop
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000cb0 	.word	0x20000cb0

08003afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b04:	f107 0308 	add.w	r3, r7, #8
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f857 	bl	8003bbc <prvGetNextExpireTime>
 8003b0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4619      	mov	r1, r3
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f803 	bl	8003b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b1a:	f000 f8d5 	bl	8003cc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b1e:	e7f1      	b.n	8003b04 <prvTimerTask+0x8>

08003b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b2a:	f7ff f943 	bl	8002db4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b2e:	f107 0308 	add.w	r3, r7, #8
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f866 	bl	8003c04 <prvSampleTimeNow>
 8003b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d130      	bne.n	8003ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <prvProcessTimerOrBlockTask+0x3c>
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d806      	bhi.n	8003b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b4e:	f7ff f93f 	bl	8002dd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff91 	bl	8003a7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b5a:	e024      	b.n	8003ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <prvProcessTimerOrBlockTask+0x90>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <prvProcessTimerOrBlockTask+0x94>)
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fe feb1 	bl	80028e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b86:	f7ff f923 	bl	8002dd0 <xTaskResumeAll>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <prvProcessTimerOrBlockTask+0x98>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
}
 8003ba0:	e001      	b.n	8003ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ba2:	f7ff f915 	bl	8002dd0 <xTaskResumeAll>
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000cb4 	.word	0x20000cb4
 8003bb4:	20000cb8 	.word	0x20000cb8
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <prvGetNextExpireTime+0x44>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <prvGetNextExpireTime+0x44>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e001      	b.n	8003bf2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000cb0 	.word	0x20000cb0

08003c04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c0c:	f7ff f97e 	bl	8002f0c <xTaskGetTickCount>
 8003c10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <prvSampleTimeNow+0x3c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d205      	bcs.n	8003c28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c1c:	f000 f908 	bl	8003e30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <prvSampleTimeNow+0x3c>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c34:	68fb      	ldr	r3, [r7, #12]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000cc0 	.word	0x20000cc0

08003c44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d812      	bhi.n	8003c90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e01b      	b.n	8003cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <prvInsertTimerInActiveList+0x7c>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7fd ffb9 	bl	8001c00 <vListInsert>
 8003c8e:	e012      	b.n	8003cb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d206      	bcs.n	8003ca6 <prvInsertTimerInActiveList+0x62>
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e007      	b.n	8003cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <prvInsertTimerInActiveList+0x80>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fd ffa5 	bl	8001c00 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cb6:	697b      	ldr	r3, [r7, #20]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000cb4 	.word	0x20000cb4
 8003cc4:	20000cb0 	.word	0x20000cb0

08003cc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08e      	sub	sp, #56	; 0x38
 8003ccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cce:	e09d      	b.n	8003e0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da18      	bge.n	8003d08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	3304      	adds	r3, #4
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	61fb      	str	r3, [r7, #28]
}
 8003cf4:	bf00      	nop
 8003cf6:	e7fe      	b.n	8003cf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfe:	6850      	ldr	r0, [r2, #4]
 8003d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d02:	6892      	ldr	r2, [r2, #8]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db7d      	blt.n	8003e0a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd ffa6 	bl	8001c70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d24:	463b      	mov	r3, r7
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ff6c 	bl	8003c04 <prvSampleTimeNow>
 8003d2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d86b      	bhi.n	8003e0c <prvProcessReceivedCommands+0x144>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <prvProcessReceivedCommands+0x74>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d65 	.word	0x08003d65
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d65 	.word	0x08003d65
 8003d48:	08003e0d 	.word	0x08003e0d
 8003d4c:	08003dc1 	.word	0x08003dc1
 8003d50:	08003df9 	.word	0x08003df9
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d65 	.word	0x08003d65
 8003d5c:	08003e0d 	.word	0x08003e0d
 8003d60:	08003dc1 	.word	0x08003dc1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	18d1      	adds	r1, r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d72:	f7ff ff67 	bl	8003c44 <prvInsertTimerInActiveList>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d047      	beq.n	8003e0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d13f      	bne.n	8003e0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	441a      	add	r2, r3
 8003d94:	2300      	movs	r3, #0
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9e:	f7ff fe1f 	bl	80039e0 <xTimerGenericCommand>
 8003da2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d130      	bne.n	8003e0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	61bb      	str	r3, [r7, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	617b      	str	r3, [r7, #20]
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	18d1      	adds	r1, r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df2:	f7ff ff27 	bl	8003c44 <prvInsertTimerInActiveList>
					break;
 8003df6:	e009      	b.n	8003e0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e04:	f000 fb6e 	bl	80044e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e08:	e000      	b.n	8003e0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <prvProcessReceivedCommands+0x164>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	1d39      	adds	r1, r7, #4
 8003e12:	2200      	movs	r2, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fa2b 	bl	8002270 <xQueueReceive>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f af57 	bne.w	8003cd0 <prvProcessReceivedCommands+0x8>
	}
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000cb8 	.word	0x20000cb8

08003e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e36:	e045      	b.n	8003ec4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <prvSwitchTimerLists+0xbc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <prvSwitchTimerLists+0xbc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fd ff0d 	bl	8001c70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d12e      	bne.n	8003ec4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d90e      	bls.n	8003e96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <prvSwitchTimerLists+0xbc>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fd feb6 	bl	8001c00 <vListInsert>
 8003e94:	e016      	b.n	8003ec4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e96:	2300      	movs	r3, #0
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fd9d 	bl	80039e0 <xTimerGenericCommand>
 8003ea6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	603b      	str	r3, [r7, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <prvSwitchTimerLists+0xbc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1b4      	bne.n	8003e38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <prvSwitchTimerLists+0xbc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <prvSwitchTimerLists+0xc0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <prvSwitchTimerLists+0xbc>)
 8003eda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <prvSwitchTimerLists+0xc0>)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6013      	str	r3, [r2, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000cb0 	.word	0x20000cb0
 8003ef0:	20000cb4 	.word	0x20000cb4

08003ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003efa:	f000 f92f 	bl	800415c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <prvCheckForValidListAndQueue+0x60>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d120      	bne.n	8003f48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f06:	4814      	ldr	r0, [pc, #80]	; (8003f58 <prvCheckForValidListAndQueue+0x64>)
 8003f08:	f7fd fe2c 	bl	8001b64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f0c:	4813      	ldr	r0, [pc, #76]	; (8003f5c <prvCheckForValidListAndQueue+0x68>)
 8003f0e:	f7fd fe29 	bl	8001b64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <prvCheckForValidListAndQueue+0x6c>)
 8003f14:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <prvCheckForValidListAndQueue+0x64>)
 8003f16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <prvCheckForValidListAndQueue+0x70>)
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <prvCheckForValidListAndQueue+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <prvCheckForValidListAndQueue+0x74>)
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <prvCheckForValidListAndQueue+0x78>)
 8003f26:	2110      	movs	r1, #16
 8003f28:	200a      	movs	r0, #10
 8003f2a:	f7fd ff33 	bl	8001d94 <xQueueGenericCreateStatic>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <prvCheckForValidListAndQueue+0x60>)
 8003f32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <prvCheckForValidListAndQueue+0x60>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <prvCheckForValidListAndQueue+0x60>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	490b      	ldr	r1, [pc, #44]	; (8003f70 <prvCheckForValidListAndQueue+0x7c>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fca8 	bl	8002898 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f48:	f000 f938 	bl	80041bc <vPortExitCritical>
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000cb8 	.word	0x20000cb8
 8003f58:	20000c88 	.word	0x20000c88
 8003f5c:	20000c9c 	.word	0x20000c9c
 8003f60:	20000cb0 	.word	0x20000cb0
 8003f64:	20000cb4 	.word	0x20000cb4
 8003f68:	20000d64 	.word	0x20000d64
 8003f6c:	20000cc4 	.word	0x20000cc4
 8003f70:	080047e0 	.word	0x080047e0

08003f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b04      	subs	r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b04      	subs	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fa4:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <pxPortInitialiseStack+0x54>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b14      	subs	r3, #20
 8003fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b20      	subs	r3, #32
 8003fba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	08003fcd 	.word	0x08003fcd

08003fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <prvTaskExitError+0x54>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d00a      	beq.n	8003ff6 <prvTaskExitError+0x2a>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <prvTaskExitError+0x28>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60bb      	str	r3, [r7, #8]
}
 8004008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800400a:	bf00      	nop
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0fc      	beq.n	800400c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c
	...

08004030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <pxCurrentTCBConst2>)
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	6808      	ldr	r0, [r1, #0]
 8004036:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800403a:	f380 8809 	msr	PSP, r0
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8811 	msr	BASEPRI, r0
 800404a:	f04e 0e0d 	orr.w	lr, lr, #13
 800404e:	4770      	bx	lr

08004050 <pxCurrentTCBConst2>:
 8004050:	20000788 	.word	0x20000788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004058:	4806      	ldr	r0, [pc, #24]	; (8004074 <prvPortStartFirstTask+0x1c>)
 800405a:	6800      	ldr	r0, [r0, #0]
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f380 8808 	msr	MSP, r0
 8004062:	b662      	cpsie	i
 8004064:	b661      	cpsie	f
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	df00      	svc	0
 8004070:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004072:	bf00      	nop
 8004074:	e000ed08 	.word	0xe000ed08

08004078 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800407e:	4b32      	ldr	r3, [pc, #200]	; (8004148 <xPortStartScheduler+0xd0>)
 8004080:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4b2a      	ldr	r3, [pc, #168]	; (800414c <xPortStartScheduler+0xd4>)
 80040a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <xPortStartScheduler+0xd8>)
 80040a8:	2207      	movs	r2, #7
 80040aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ac:	e009      	b.n	80040c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040ae:	4b28      	ldr	r3, [pc, #160]	; (8004150 <xPortStartScheduler+0xd8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4a26      	ldr	r2, [pc, #152]	; (8004150 <xPortStartScheduler+0xd8>)
 80040b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d0ef      	beq.n	80040ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <xPortStartScheduler+0xd8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d00a      	beq.n	80040f0 <xPortStartScheduler+0x78>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <xPortStartScheduler+0xd8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	4a16      	ldr	r2, [pc, #88]	; (8004150 <xPortStartScheduler+0xd8>)
 80040f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <xPortStartScheduler+0xd8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <xPortStartScheduler+0xd8>)
 8004104:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <xPortStartScheduler+0xdc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <xPortStartScheduler+0xdc>)
 8004114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <xPortStartScheduler+0xdc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <xPortStartScheduler+0xdc>)
 8004120:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004124:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004126:	f000 f8b9 	bl	800429c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <xPortStartScheduler+0xe0>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004130:	f7ff ff92 	bl	8004058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004134:	f7fe ffb6 	bl	80030a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004138:	f7ff ff48 	bl	8003fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e400 	.word	0xe000e400
 800414c:	20000db4 	.word	0x20000db4
 8004150:	20000db8 	.word	0x20000db8
 8004154:	e000ed20 	.word	0xe000ed20
 8004158:	2000000c 	.word	0x2000000c

0800415c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	607b      	str	r3, [r7, #4]
}
 8004174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <vPortEnterCritical+0x58>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <vPortEnterCritical+0x58>)
 800417e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <vPortEnterCritical+0x58>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10f      	bne.n	80041a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <vPortEnterCritical+0x5c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	603b      	str	r3, [r7, #0]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <vPortEnterCritical+0x4a>
	}
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <vPortExitCritical+0x4c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <vPortExitCritical+0x24>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	607b      	str	r3, [r7, #4]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <vPortExitCritical+0x4c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <vPortExitCritical+0x4c>)
 80041e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <vPortExitCritical+0x4c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <vPortExitCritical+0x42>
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f383 8811 	msr	BASEPRI, r3
}
 80041fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	2000000c 	.word	0x2000000c
 800420c:	00000000 	.word	0x00000000

08004210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004210:	f3ef 8009 	mrs	r0, PSP
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <pxCurrentTCBConst>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004220:	6010      	str	r0, [r2, #0]
 8004222:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004226:	f04f 0050 	mov.w	r0, #80	; 0x50
 800422a:	f380 8811 	msr	BASEPRI, r0
 800422e:	f7fe ff39 	bl	80030a4 <vTaskSwitchContext>
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	6808      	ldr	r0, [r1, #0]
 8004242:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004246:	f380 8809 	msr	PSP, r0
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	4770      	bx	lr

08004250 <pxCurrentTCBConst>:
 8004250:	20000788 	.word	0x20000788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	607b      	str	r3, [r7, #4]
}
 8004270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004272:	f7fe fe59 	bl	8002f28 <xTaskIncrementTick>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <SysTick_Handler+0x40>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f383 8811 	msr	BASEPRI, r3
}
 800428e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <vPortSetupTimerInterrupt+0x30>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <vPortSetupTimerInterrupt+0x38>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <vPortSetupTimerInterrupt+0x3c>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	4a08      	ldr	r2, [pc, #32]	; (80042dc <vPortSetupTimerInterrupt+0x40>)
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042be:	4b03      	ldr	r3, [pc, #12]	; (80042cc <vPortSetupTimerInterrupt+0x30>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	e000e010 	.word	0xe000e010
 80042d0:	e000e018 	.word	0xe000e018
 80042d4:	20000000 	.word	0x20000000
 80042d8:	10624dd3 	.word	0x10624dd3
 80042dc:	e000e014 	.word	0xe000e014

080042e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042e6:	f3ef 8305 	mrs	r3, IPSR
 80042ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d914      	bls.n	800431c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042f2:	4a16      	ldr	r2, [pc, #88]	; (800434c <vPortValidateInterruptPriority+0x6c>)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <vPortValidateInterruptPriority+0x70>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	7afa      	ldrb	r2, [r7, #11]
 8004302:	429a      	cmp	r2, r3
 8004304:	d20a      	bcs.n	800431c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	607b      	str	r3, [r7, #4]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <vPortValidateInterruptPriority+0x74>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <vPortValidateInterruptPriority+0x78>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d90a      	bls.n	8004342 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	603b      	str	r3, [r7, #0]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <vPortValidateInterruptPriority+0x60>
	}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	e000e3f0 	.word	0xe000e3f0
 8004350:	20000db4 	.word	0x20000db4
 8004354:	e000ed0c 	.word	0xe000ed0c
 8004358:	20000db8 	.word	0x20000db8

0800435c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004368:	f7fe fd24 	bl	8002db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800436c:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <pvPortMalloc+0x174>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004374:	f000 f910 	bl	8004598 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004378:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <pvPortMalloc+0x178>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 808e 	bne.w	80044a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01d      	beq.n	80043c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800438c:	2208      	movs	r2, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	2b00      	cmp	r3, #0
 800439c:	d014      	beq.n	80043c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f023 0307 	bic.w	r3, r3, #7
 80043a4:	3308      	adds	r3, #8
 80043a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <pvPortMalloc+0x6c>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	617b      	str	r3, [r7, #20]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d069      	beq.n	80044a2 <pvPortMalloc+0x146>
 80043ce:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <pvPortMalloc+0x17c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d864      	bhi.n	80044a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043d8:	4b40      	ldr	r3, [pc, #256]	; (80044dc <pvPortMalloc+0x180>)
 80043da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043dc:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <pvPortMalloc+0x180>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043e2:	e004      	b.n	80043ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d903      	bls.n	8004400 <pvPortMalloc+0xa4>
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f1      	bne.n	80043e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <pvPortMalloc+0x174>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	429a      	cmp	r2, r3
 8004408:	d04b      	beq.n	80044a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2208      	movs	r2, #8
 8004410:	4413      	add	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad2      	subs	r2, r2, r3
 8004424:	2308      	movs	r3, #8
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	429a      	cmp	r2, r3
 800442a:	d91f      	bls.n	800446c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <pvPortMalloc+0xf8>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	613b      	str	r3, [r7, #16]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1ad2      	subs	r2, r2, r3
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004466:	69b8      	ldr	r0, [r7, #24]
 8004468:	f000 f8f8 	bl	800465c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <pvPortMalloc+0x17c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <pvPortMalloc+0x17c>)
 8004478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800447a:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <pvPortMalloc+0x17c>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <pvPortMalloc+0x184>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d203      	bcs.n	800448e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <pvPortMalloc+0x17c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <pvPortMalloc+0x184>)
 800448c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <pvPortMalloc+0x178>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	431a      	orrs	r2, r3
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044a2:	f7fe fc95 	bl	8002dd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <pvPortMalloc+0x16a>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <pvPortMalloc+0x168>
	return pvReturn;
 80044c6:	69fb      	ldr	r3, [r7, #28]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200019c4 	.word	0x200019c4
 80044d4:	200019d0 	.word	0x200019d0
 80044d8:	200019c8 	.word	0x200019c8
 80044dc:	200019bc 	.word	0x200019bc
 80044e0:	200019cc 	.word	0x200019cc

080044e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d048      	beq.n	8004588 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044f6:	2308      	movs	r3, #8
 80044f8:	425b      	negs	r3, r3
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4413      	add	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b21      	ldr	r3, [pc, #132]	; (8004590 <vPortFree+0xac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <vPortFree+0x44>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <vPortFree+0x62>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60bb      	str	r3, [r7, #8]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <vPortFree+0xac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d019      	beq.n	8004588 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d115      	bne.n	8004588 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <vPortFree+0xac>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800456c:	f7fe fc22 	bl	8002db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <vPortFree+0xb0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4413      	add	r3, r2
 800457a:	4a06      	ldr	r2, [pc, #24]	; (8004594 <vPortFree+0xb0>)
 800457c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800457e:	6938      	ldr	r0, [r7, #16]
 8004580:	f000 f86c 	bl	800465c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004584:	f7fe fc24 	bl	8002dd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004588:	bf00      	nop
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200019d0 	.word	0x200019d0
 8004594:	200019c8 	.word	0x200019c8

08004598 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800459e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <prvHeapInit+0xac>)
 80045a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3307      	adds	r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <prvHeapInit+0xac>)
 80045c8:	4413      	add	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <prvHeapInit+0xb0>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045d6:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <prvHeapInit+0xb0>)
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4413      	add	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045e4:	2208      	movs	r2, #8
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a15      	ldr	r2, [pc, #84]	; (800464c <prvHeapInit+0xb4>)
 80045f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045fa:	4b14      	ldr	r3, [pc, #80]	; (800464c <prvHeapInit+0xb4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <prvHeapInit+0xb4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	1ad2      	subs	r2, r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <prvHeapInit+0xb4>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <prvHeapInit+0xb8>)
 8004626:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a09      	ldr	r2, [pc, #36]	; (8004654 <prvHeapInit+0xbc>)
 800462e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <prvHeapInit+0xc0>)
 8004632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000dbc 	.word	0x20000dbc
 8004648:	200019bc 	.word	0x200019bc
 800464c:	200019c4 	.word	0x200019c4
 8004650:	200019cc 	.word	0x200019cc
 8004654:	200019c8 	.word	0x200019c8
 8004658:	200019d0 	.word	0x200019d0

0800465c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <prvInsertBlockIntoFreeList+0xa8>)
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e002      	b.n	8004670 <prvInsertBlockIntoFreeList+0x14>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d8f7      	bhi.n	800466a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	4413      	add	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d108      	bne.n	800469e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	441a      	add	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d118      	bne.n	80046e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <prvInsertBlockIntoFreeList+0xac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d00d      	beq.n	80046da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e008      	b.n	80046ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <prvInsertBlockIntoFreeList+0xac>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e003      	b.n	80046ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d002      	beq.n	80046fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	200019bc 	.word	0x200019bc
 8004708:	200019c4 	.word	0x200019c4

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	2600      	movs	r6, #0
 8004710:	4d0c      	ldr	r5, [pc, #48]	; (8004744 <__libc_init_array+0x38>)
 8004712:	4c0d      	ldr	r4, [pc, #52]	; (8004748 <__libc_init_array+0x3c>)
 8004714:	1b64      	subs	r4, r4, r5
 8004716:	10a4      	asrs	r4, r4, #2
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	f000 f830 	bl	8004780 <_init>
 8004720:	2600      	movs	r6, #0
 8004722:	4d0a      	ldr	r5, [pc, #40]	; (800474c <__libc_init_array+0x40>)
 8004724:	4c0a      	ldr	r4, [pc, #40]	; (8004750 <__libc_init_array+0x44>)
 8004726:	1b64      	subs	r4, r4, r5
 8004728:	10a4      	asrs	r4, r4, #2
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f855 3b04 	ldr.w	r3, [r5], #4
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f855 3b04 	ldr.w	r3, [r5], #4
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	08004800 	.word	0x08004800
 8004748:	08004800 	.word	0x08004800
 800474c:	08004800 	.word	0x08004800
 8004750:	08004804 	.word	0x08004804

08004754 <memcpy>:
 8004754:	440a      	add	r2, r1
 8004756:	4291      	cmp	r1, r2
 8004758:	f100 33ff 	add.w	r3, r0, #4294967295
 800475c:	d100      	bne.n	8004760 <memcpy+0xc>
 800475e:	4770      	bx	lr
 8004760:	b510      	push	{r4, lr}
 8004762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004766:	4291      	cmp	r1, r2
 8004768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800476c:	d1f9      	bne.n	8004762 <memcpy+0xe>
 800476e:	bd10      	pop	{r4, pc}

08004770 <memset>:
 8004770:	4603      	mov	r3, r0
 8004772:	4402      	add	r2, r0
 8004774:	4293      	cmp	r3, r2
 8004776:	d100      	bne.n	800477a <memset+0xa>
 8004778:	4770      	bx	lr
 800477a:	f803 1b01 	strb.w	r1, [r3], #1
 800477e:	e7f9      	b.n	8004774 <memset+0x4>

08004780 <_init>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr

0800478c <_fini>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr
