
ledFreeRTOS_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800366c  0800366c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800366c  0800366c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  20000020  08003694  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  08003694  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dae0  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228c  00000000  00000000  0002db29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00030aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a8e  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3bf  00000000  00000000  000460fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000766fa  00000000  00000000  000504bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6bb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  000c6c34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08003604 	.word	0x08003604

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08003604 	.word	0x08003604

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000003c 	.word	0x2000003c
 800017c:	2000008c 	.word	0x2000008c

08000180 <main>:
//Cola para pasar el proximo tiempo
xSemaphoreHandle cola_tiempo;


int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	HAL_Init();
 8000186:	f000 faa5 	bl	80006d4 <HAL_Init>
	SystemClock_Config();
 800018a:	f000 f8ef 	bl	800036c <SystemClock_Config>
	MX_GPIO_Init();
 800018e:	f000 f933 	bl	80003f8 <MX_GPIO_Init>

	//Cola que avisa cuando termina una espera.
	if(!(cola_todo_piola = xQueueCreate(1,sizeof(uint8_t))))
 8000192:	2200      	movs	r2, #0
 8000194:	2101      	movs	r1, #1
 8000196:	2001      	movs	r0, #1
 8000198:	f001 fc80 	bl	8001a9c <xQueueGenericCreate>
 800019c:	4602      	mov	r2, r0
 800019e:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <main+0x98>)
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <main+0x98>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d101      	bne.n	80001ae <main+0x2e>
	{
		ChocarCalesita();
 80001aa:	f000 f8c7 	bl	800033c <ChocarCalesita>
	}

	//Cola que pasa el tiempo de espera.
	if(!(cola_tiempo = xQueueCreate(2,sizeof(uint16_t))))
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	2002      	movs	r0, #2
 80001b4:	f001 fc72 	bl	8001a9c <xQueueGenericCreate>
 80001b8:	4602      	mov	r2, r0
 80001ba:	4b18      	ldr	r3, [pc, #96]	; (800021c <main+0x9c>)
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	4b17      	ldr	r3, [pc, #92]	; (800021c <main+0x9c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d101      	bne.n	80001ca <main+0x4a>
	{
			ChocarCalesita();
 80001c6:	f000 f8b9 	bl	800033c <ChocarCalesita>
	}

	if(xTaskCreate(TareaLed,
 80001ca:	2300      	movs	r3, #0
 80001cc:	9301      	str	r3, [sp, #4]
 80001ce:	2301      	movs	r3, #1
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2300      	movs	r3, #0
 80001d4:	2280      	movs	r2, #128	; 0x80
 80001d6:	4912      	ldr	r1, [pc, #72]	; (8000220 <main+0xa0>)
 80001d8:	4812      	ldr	r0, [pc, #72]	; (8000224 <main+0xa4>)
 80001da:	f001 fffa 	bl	80021d2 <xTaskCreate>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d001      	beq.n	80001e8 <main+0x68>
		  	  "tarea_led",
			  128,
			  NULL,
			  1,
			  NULL)!= pdPASS) ChocarCalesita();
 80001e4:	f000 f8aa 	bl	800033c <ChocarCalesita>

	if(xTaskCreate(TareaTiempo,
 80001e8:	2300      	movs	r3, #0
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	2301      	movs	r3, #1
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	2280      	movs	r2, #128	; 0x80
 80001f4:	490c      	ldr	r1, [pc, #48]	; (8000228 <main+0xa8>)
 80001f6:	480d      	ldr	r0, [pc, #52]	; (800022c <main+0xac>)
 80001f8:	f001 ffeb 	bl	80021d2 <xTaskCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d001      	beq.n	8000206 <main+0x86>
		  	  "tarea_tiempo",
			  128,
			  NULL,
			  1,
			  NULL)!=pdPASS) ChocarCalesita();
 8000202:	f000 f89b 	bl	800033c <ChocarCalesita>

   vTaskStartScheduler();
 8000206:	f002 f945 	bl	8002494 <vTaskStartScheduler>
   ChocarCalesita();
 800020a:	f000 f897 	bl	800033c <ChocarCalesita>
   return 1;
 800020e:	2301      	movs	r3, #1
}
 8000210:	4618      	mov	r0, r3
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	200013d8 	.word	0x200013d8
 800021c:	200013dc 	.word	0x200013dc
 8000220:	0800361c 	.word	0x0800361c
 8000224:	08000231 	.word	0x08000231
 8000228:	08003628 	.word	0x08003628
 800022c:	08000281 	.word	0x08000281

08000230 <TareaLed>:

void TareaLed(void *p)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint16_t item;
	uint8_t ok = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	737b      	strb	r3, [r7, #13]
	while(1)
	{

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800023c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <TareaLed+0x44>)
 8000242:	f000 fccb 	bl	8000bdc <HAL_GPIO_TogglePin>
		xQueueReceive(cola_tiempo, &item, portMAX_DELAY);
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <TareaLed+0x48>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f107 010e 	add.w	r1, r7, #14
 800024e:	f04f 32ff 	mov.w	r2, #4294967295
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fd78 	bl	8001d48 <xQueueReceive>
		vTaskDelay(item);
 8000258:	89fb      	ldrh	r3, [r7, #14]
 800025a:	4618      	mov	r0, r3
 800025c:	f002 f8e6 	bl	800242c <vTaskDelay>
		xQueueSend(cola_todo_piola,&ok,portMAX_DELAY);
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <TareaLed+0x4c>)
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	f107 010d 	add.w	r1, r7, #13
 8000268:	2300      	movs	r3, #0
 800026a:	f04f 32ff 	mov.w	r2, #4294967295
 800026e:	f001 fc71 	bl	8001b54 <xQueueGenericSend>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000272:	e7e3      	b.n	800023c <TareaLed+0xc>
 8000274:	40011000 	.word	0x40011000
 8000278:	200013dc 	.word	0x200013dc
 800027c:	200013d8 	.word	0x200013d8

08000280 <TareaTiempo>:
	}
}

void TareaTiempo(void *p)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t r;
	uint16_t datoCola;
	while(1)
	{
		do{
			r = GenerarRandom();
 8000288:	f000 f826 	bl	80002d8 <GenerarRandom>
 800028c:	60f8      	str	r0, [r7, #12]
			r&=0x1FF;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000294:	60fb      	str	r3, [r7, #12]
		}while(r>=50 && r<=500);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2b31      	cmp	r3, #49	; 0x31
 800029a:	d903      	bls.n	80002a4 <TareaTiempo+0x24>
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002a2:	d9f1      	bls.n	8000288 <TareaTiempo+0x8>
		datoCola = (uint16_t)r;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	817b      	strh	r3, [r7, #10]
		xQueueSend(cola_tiempo,&datoCola,portMAX_DELAY);
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <TareaTiempo+0x50>)
 80002ac:	6818      	ldr	r0, [r3, #0]
 80002ae:	f107 010a 	add.w	r1, r7, #10
 80002b2:	2300      	movs	r3, #0
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	f001 fc4c 	bl	8001b54 <xQueueGenericSend>
		xQueueReceive(cola_todo_piola, &datoCola, portMAX_DELAY);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <TareaTiempo+0x54>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f107 010a 	add.w	r1, r7, #10
 80002c4:	f04f 32ff 	mov.w	r2, #4294967295
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fd3d 	bl	8001d48 <xQueueReceive>
	while(1)
 80002ce:	e7db      	b.n	8000288 <TareaTiempo+0x8>
 80002d0:	200013dc 	.word	0x200013dc
 80002d4:	200013d8 	.word	0x200013d8

080002d8 <GenerarRandom>:
	}
}

uint32_t GenerarRandom(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
	//https://www.jstatsoft.org/index.php/jss/article/view/v008i14/xorshift.pdf
	static uint32_t x = 0x11223344;
	static uint32_t y = 0x55667788;
	static uint32_t z = 0x99AABBCC;
	static uint32_t w = 0xDDEEFF00;
	uint32_t tmp=(x^(x<<15));
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <GenerarRandom+0x54>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	03da      	lsls	r2, r3, #15
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <GenerarRandom+0x54>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4053      	eors	r3, r2
 80002ea:	607b      	str	r3, [r7, #4]
	x=y;
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <GenerarRandom+0x58>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <GenerarRandom+0x54>)
 80002f2:	6013      	str	r3, [r2, #0]
	y=z;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <GenerarRandom+0x5c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <GenerarRandom+0x58>)
 80002fa:	6013      	str	r3, [r2, #0]
	z=w;
 80002fc:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <GenerarRandom+0x60>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <GenerarRandom+0x5c>)
 8000302:	6013      	str	r3, [r2, #0]
	return w=(w^(w>>21))^(tmp^(tmp>>4));
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <GenerarRandom+0x60>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	0d5a      	lsrs	r2, r3, #21
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <GenerarRandom+0x60>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	405a      	eors	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	0919      	lsrs	r1, r3, #4
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	404b      	eors	r3, r1
 8000318:	4053      	eors	r3, r2
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <GenerarRandom+0x60>)
 800031c:	6013      	str	r3, [r2, #0]
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <GenerarRandom+0x60>)
 8000320:	681b      	ldr	r3, [r3, #0]
}
 8000322:	4618      	mov	r0, r3
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000000 	.word	0x20000000
 8000330:	20000004 	.word	0x20000004
 8000334:	20000008 	.word	0x20000008
 8000338:	2000000c 	.word	0x2000000c

0800033c <ChocarCalesita>:

void ChocarCalesita(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
	volatile int32_t i;
	__disable_irq();
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000348:	4806      	ldr	r0, [pc, #24]	; (8000364 <ChocarCalesita+0x28>)
 800034a:	f000 fc47 	bl	8000bdc <HAL_GPIO_TogglePin>
		for(i=0;i<200000; i++);
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e002      	b.n	800035a <ChocarCalesita+0x1e>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a02      	ldr	r2, [pc, #8]	; (8000368 <ChocarCalesita+0x2c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	ddf8      	ble.n	8000354 <ChocarCalesita+0x18>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000362:	e7ef      	b.n	8000344 <ChocarCalesita+0x8>
 8000364:	40011000 	.word	0x40011000
 8000368:	00030d3f 	.word	0x00030d3f

0800036c <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	; 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f003 f939 	bl	80035f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038e:	2301      	movs	r3, #1
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fc29 	bl	8000c0c <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c0:	f000 f878 	bl	80004b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fe94 	bl	800110c <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ea:	f000 f863 	bl	80004b4 <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3740      	adds	r7, #64	; 0x40
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <MX_GPIO_Init+0x90>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <MX_GPIO_Init+0x90>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_GPIO_Init+0x90>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a11      	ldr	r2, [pc, #68]	; (8000488 <MX_GPIO_Init+0x90>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_GPIO_Init+0x90>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045a:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_GPIO_Init+0x94>)
 800045c:	f000 fba6 	bl	8000bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_GPIO_Init+0x94>)
 800047a:	f000 fa3d 	bl	80008f8 <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000

08000490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d101      	bne.n	80004a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004a2:	f000 f92d 	bl	8000700 <HAL_IncTick>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40012c00 	.word	0x40012c00

080004b4 <Error_Handler>:

void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <HAL_MspInit+0x68>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a17      	ldr	r2, [pc, #92]	; (8000528 <HAL_MspInit+0x68>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x68>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x68>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_MspInit+0x68>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x68>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	210f      	movs	r1, #15
 80004fa:	f06f 0001 	mvn.w	r0, #1
 80004fe:	f000 f9d0 	bl	80008a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x6c>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x6c>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	2019      	movs	r0, #25
 8000546:	f000 f9ac 	bl	80008a2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800054a:	2019      	movs	r0, #25
 800054c:	f000 f9c5 	bl	80008da <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <HAL_InitTick+0x9c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <HAL_InitTick+0x9c>)
 8000556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <HAL_InitTick+0x9c>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000568:	f107 0210 	add.w	r2, r7, #16
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f000 ff34 	bl	80013e0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000578:	f000 ff1e 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 800057c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <HAL_InitTick+0xa0>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	0c9b      	lsrs	r3, r3, #18
 8000588:	3b01      	subs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_InitTick+0xa4>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <HAL_InitTick+0xa8>)
 8000590:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HAL_InitTick+0xa4>)
 8000594:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000598:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_InitTick+0xa4>)
 800059c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_InitTick+0xa4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_InitTick+0xa4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <HAL_InitTick+0xa4>)
 80005ae:	f000 ff65 	bl	800147c <HAL_TIM_Base_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d104      	bne.n	80005c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <HAL_InitTick+0xa4>)
 80005ba:	f000 ff93 	bl	80014e4 <HAL_TIM_Base_Start_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	e000      	b.n	80005c4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3730      	adds	r7, #48	; 0x30
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	431bde83 	.word	0x431bde83
 80005d4:	200013e0 	.word	0x200013e0
 80005d8:	40012c00 	.word	0x40012c00

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <HardFault_Handler+0x4>

080005ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <BusFault_Handler+0x4>

080005fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <UsageFault_Handler+0x4>

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <TIM1_UP_IRQHandler+0x10>)
 8000612:	f000 ff8a 	bl	800152a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200013e0 	.word	0x200013e0

08000620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <SystemInit+0x5c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <SystemInit+0x5c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <SystemInit+0x5c>)
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	4911      	ldr	r1, [pc, #68]	; (800067c <SystemInit+0x5c>)
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <SystemInit+0x60>)
 8000638:	4013      	ands	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <SystemInit+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <SystemInit+0x5c>)
 8000642:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <SystemInit+0x5c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <SystemInit+0x5c>)
 8000652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000656:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SystemInit+0x5c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SystemInit+0x5c>)
 800065e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000662:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <SystemInit+0x5c>)
 8000666:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800066a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SystemInit+0x64>)
 800066e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000672:	609a      	str	r2, [r3, #8]
#endif 
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	f8ff0000 	.word	0xf8ff0000
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000688:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ae:	f7ff ffb7 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f002 ff6f 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fd63 	bl	8000180 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r3, =_sidata
 80006bc:	08003674 	.word	0x08003674
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c4:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80006c8:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80006cc:	20001424 	.word	0x20001424

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_Init+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_Init+0x28>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f8d1 	bl	800088c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ff20 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f0:	f7ff fee6 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_IncTick+0x20>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000018 	.word	0x20000018
 8000720:	20001420 	.word	0x20001420

08000724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20001420 	.word	0x20001420

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0b      	blt.n	80007c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <__NVIC_EnableIRQ+0x34>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff4f 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff64 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ffb2 	bl	8000828 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff81 	bl	80007d4 <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff57 	bl	800079c <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e127      	b.n	8000b5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800090c:	2201      	movs	r2, #1
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	429a      	cmp	r2, r3
 8000926:	f040 8116 	bne.w	8000b56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d034      	beq.n	800099c <HAL_GPIO_Init+0xa4>
 8000932:	2b12      	cmp	r3, #18
 8000934:	d80d      	bhi.n	8000952 <HAL_GPIO_Init+0x5a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d02b      	beq.n	8000992 <HAL_GPIO_Init+0x9a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d804      	bhi.n	8000948 <HAL_GPIO_Init+0x50>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d031      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d01c      	beq.n	8000980 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e048      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000948:	2b03      	cmp	r3, #3
 800094a:	d043      	beq.n	80009d4 <HAL_GPIO_Init+0xdc>
 800094c:	2b11      	cmp	r3, #17
 800094e:	d01b      	beq.n	8000988 <HAL_GPIO_Init+0x90>
          break;
 8000950:	e043      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000952:	4a89      	ldr	r2, [pc, #548]	; (8000b78 <HAL_GPIO_Init+0x280>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d026      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000958:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x280>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d806      	bhi.n	800096c <HAL_GPIO_Init+0x74>
 800095e:	4a87      	ldr	r2, [pc, #540]	; (8000b7c <HAL_GPIO_Init+0x284>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d020      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000964:	4a86      	ldr	r2, [pc, #536]	; (8000b80 <HAL_GPIO_Init+0x288>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01d      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
          break;
 800096a:	e036      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800096c:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x28c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000972:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <HAL_GPIO_Init+0x290>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d016      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000978:	4a84      	ldr	r2, [pc, #528]	; (8000b8c <HAL_GPIO_Init+0x294>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d013      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
          break;
 800097e:	e02c      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e028      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	3304      	adds	r3, #4
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e023      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	3308      	adds	r3, #8
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e01e      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	330c      	adds	r3, #12
 80009a2:	623b      	str	r3, [r7, #32]
          break;
 80009a4:	e019      	b.n	80009da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ae:	2304      	movs	r3, #4
 80009b0:	623b      	str	r3, [r7, #32]
          break;
 80009b2:	e012      	b.n	80009da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d105      	bne.n	80009c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009bc:	2308      	movs	r3, #8
 80009be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	611a      	str	r2, [r3, #16]
          break;
 80009c6:	e008      	b.n	80009da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c8:	2308      	movs	r3, #8
 80009ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	615a      	str	r2, [r3, #20]
          break;
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d801      	bhi.n	80009e4 <HAL_GPIO_Init+0xec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	e001      	b.n	80009e8 <HAL_GPIO_Init+0xf0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3304      	adds	r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d802      	bhi.n	80009f6 <HAL_GPIO_Init+0xfe>
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	e002      	b.n	80009fc <HAL_GPIO_Init+0x104>
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3b08      	subs	r3, #8
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	210f      	movs	r1, #15
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	6a39      	ldr	r1, [r7, #32]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	431a      	orrs	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 8096 	beq.w	8000b56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2a:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a42:	4a54      	ldr	r2, [pc, #336]	; (8000b94 <HAL_GPIO_Init+0x29c>)
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4b      	ldr	r2, [pc, #300]	; (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x19e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4a      	ldr	r2, [pc, #296]	; (8000b9c <HAL_GPIO_Init+0x2a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x19a>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <HAL_GPIO_Init+0x2a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x196>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <HAL_GPIO_Init+0x2ac>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x192>
 8000a86:	2303      	movs	r3, #3
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a96:	2300      	movs	r3, #0
 8000a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa8:	493a      	ldr	r1, [pc, #232]	; (8000b94 <HAL_GPIO_Init+0x29c>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4938      	ldr	r1, [pc, #224]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4933      	ldr	r1, [pc, #204]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	492e      	ldr	r1, [pc, #184]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4929      	ldr	r1, [pc, #164]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	4924      	ldr	r1, [pc, #144]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	608b      	str	r3, [r1, #8]
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60cb      	str	r3, [r1, #12]
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f aed0 	bne.w	800090c <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	372c      	adds	r7, #44	; 0x2c
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	10210000 	.word	0x10210000
 8000b7c:	10110000 	.word	0x10110000
 8000b80:	10120000 	.word	0x10120000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10320000 	.word	0x10320000
 8000b8c:	10220000 	.word	0x10220000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40011400 	.word	0x40011400
 8000ba8:	40010400 	.word	0x40010400

08000bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bbc:	787b      	ldrb	r3, [r7, #1]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc8:	e003      	b.n	8000bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	041a      	lsls	r2, r3, #16
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	611a      	str	r2, [r3, #16]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf4:	887a      	ldrh	r2, [r7, #2]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bfc:	887a      	ldrh	r2, [r7, #2]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	611a      	str	r2, [r3, #16]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e26c      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8087 	beq.w	8000d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c2c:	4b92      	ldr	r3, [pc, #584]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 030c 	and.w	r3, r3, #12
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	d00c      	beq.n	8000c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c38:	4b8f      	ldr	r3, [pc, #572]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d112      	bne.n	8000c6a <HAL_RCC_OscConfig+0x5e>
 8000c44:	4b8c      	ldr	r3, [pc, #560]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c50:	d10b      	bne.n	8000c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c52:	4b89      	ldr	r3, [pc, #548]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d06c      	beq.n	8000d38 <HAL_RCC_OscConfig+0x12c>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d168      	bne.n	8000d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e246      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c72:	d106      	bne.n	8000c82 <HAL_RCC_OscConfig+0x76>
 8000c74:	4b80      	ldr	r3, [pc, #512]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a7f      	ldr	r2, [pc, #508]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e02e      	b.n	8000ce0 <HAL_RCC_OscConfig+0xd4>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10c      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x98>
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a7a      	ldr	r2, [pc, #488]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a77      	ldr	r2, [pc, #476]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e01d      	b.n	8000ce0 <HAL_RCC_OscConfig+0xd4>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0xbc>
 8000cae:	4b72      	ldr	r3, [pc, #456]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a71      	ldr	r2, [pc, #452]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b6f      	ldr	r3, [pc, #444]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a6e      	ldr	r2, [pc, #440]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_RCC_OscConfig+0xd4>
 8000cc8:	4b6b      	ldr	r3, [pc, #428]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a6a      	ldr	r2, [pc, #424]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b68      	ldr	r3, [pc, #416]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a67      	ldr	r2, [pc, #412]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d013      	beq.n	8000d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fd1c 	bl	8000724 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fd18 	bl	8000724 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e1fa      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d02:	4b5d      	ldr	r3, [pc, #372]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f0      	beq.n	8000cf0 <HAL_RCC_OscConfig+0xe4>
 8000d0e:	e014      	b.n	8000d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fd08 	bl	8000724 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fd04 	bl	8000724 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b64      	cmp	r3, #100	; 0x64
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e1e6      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2a:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x10c>
 8000d36:	e000      	b.n	8000d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d063      	beq.n	8000e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d46:	4b4c      	ldr	r3, [pc, #304]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00b      	beq.n	8000d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d52:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d11c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x18c>
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d116      	bne.n	8000d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <HAL_RCC_OscConfig+0x176>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d001      	beq.n	8000d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e1ba      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4939      	ldr	r1, [pc, #228]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	e03a      	b.n	8000e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d020      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <HAL_RCC_OscConfig+0x270>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fcbd 	bl	8000724 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dae:	f7ff fcb9 	bl	8000724 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e19b      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4927      	ldr	r1, [pc, #156]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
 8000de0:	e015      	b.n	8000e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_RCC_OscConfig+0x270>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fc9c 	bl	8000724 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df0:	f7ff fc98 	bl	8000724 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e17a      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d03a      	beq.n	8000e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d019      	beq.n	8000e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_RCC_OscConfig+0x274>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e28:	f7ff fc7c 	bl	8000724 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc78 	bl	8000724 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e15a      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f000 faf6 	bl	8001440 <RCC_Delay>
 8000e54:	e01c      	b.n	8000e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_RCC_OscConfig+0x274>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc62 	bl	8000724 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e62:	e00f      	b.n	8000e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc5e 	bl	8000724 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d908      	bls.n	8000e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e140      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	42420000 	.word	0x42420000
 8000e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e84:	4b9e      	ldr	r3, [pc, #632]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e9      	bne.n	8000e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a6 	beq.w	8000fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea2:	4b97      	ldr	r3, [pc, #604]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10d      	bne.n	8000eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b94      	ldr	r3, [pc, #592]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a93      	ldr	r2, [pc, #588]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b91      	ldr	r3, [pc, #580]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eca:	4b8e      	ldr	r3, [pc, #568]	; (8001104 <HAL_RCC_OscConfig+0x4f8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d118      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed6:	4b8b      	ldr	r3, [pc, #556]	; (8001104 <HAL_RCC_OscConfig+0x4f8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a8a      	ldr	r2, [pc, #552]	; (8001104 <HAL_RCC_OscConfig+0x4f8>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fc1f 	bl	8000724 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eea:	f7ff fc1b 	bl	8000724 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b64      	cmp	r3, #100	; 0x64
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e0fd      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efc:	4b81      	ldr	r3, [pc, #516]	; (8001104 <HAL_RCC_OscConfig+0x4f8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d106      	bne.n	8000f1e <HAL_RCC_OscConfig+0x312>
 8000f10:	4b7b      	ldr	r3, [pc, #492]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a7a      	ldr	r2, [pc, #488]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6213      	str	r3, [r2, #32]
 8000f1c:	e02d      	b.n	8000f7a <HAL_RCC_OscConfig+0x36e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x334>
 8000f26:	4b76      	ldr	r3, [pc, #472]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a75      	ldr	r2, [pc, #468]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6213      	str	r3, [r2, #32]
 8000f32:	4b73      	ldr	r3, [pc, #460]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a72      	ldr	r2, [pc, #456]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	6213      	str	r3, [r2, #32]
 8000f3e:	e01c      	b.n	8000f7a <HAL_RCC_OscConfig+0x36e>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x356>
 8000f48:	4b6d      	ldr	r3, [pc, #436]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4a6c      	ldr	r2, [pc, #432]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6213      	str	r3, [r2, #32]
 8000f54:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4a69      	ldr	r2, [pc, #420]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6213      	str	r3, [r2, #32]
 8000f60:	e00b      	b.n	8000f7a <HAL_RCC_OscConfig+0x36e>
 8000f62:	4b67      	ldr	r3, [pc, #412]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a66      	ldr	r2, [pc, #408]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	4b64      	ldr	r3, [pc, #400]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a63      	ldr	r2, [pc, #396]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d015      	beq.n	8000fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fbcf 	bl	8000724 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fbcb 	bl	8000724 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e0ab      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	4b57      	ldr	r3, [pc, #348]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0ee      	beq.n	8000f8a <HAL_RCC_OscConfig+0x37e>
 8000fac:	e014      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fbb9 	bl	8000724 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fbb5 	bl	8000724 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e095      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ee      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d105      	bne.n	8000fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8081 	beq.w	80010f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d061      	beq.n	80010c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d146      	bne.n	8001096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_RCC_OscConfig+0x4fc>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb89 	bl	8000724 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fb85 	bl	8000724 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e067      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103c:	d108      	bne.n	8001050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	492d      	ldr	r1, [pc, #180]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a19      	ldr	r1, [r3, #32]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	430b      	orrs	r3, r1
 8001062:	4927      	ldr	r1, [pc, #156]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <HAL_RCC_OscConfig+0x4fc>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fb59 	bl	8000724 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fb55 	bl	8000724 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e037      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x46a>
 8001094:	e02f      	b.n	80010f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_RCC_OscConfig+0x4fc>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fb42 	bl	8000724 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fb3e 	bl	8000724 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e020      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x498>
 80010c2:	e018      	b.n	80010f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e013      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40007000 	.word	0x40007000
 8001108:	42420060 	.word	0x42420060

0800110c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0d0      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d910      	bls.n	8001150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 0207 	bic.w	r2, r3, #7
 8001136:	4965      	ldr	r1, [pc, #404]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0b8      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800118a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	494d      	ldr	r1, [pc, #308]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d040      	beq.n	800122c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d115      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e073      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e06b      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f023 0203 	bic.w	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4936      	ldr	r1, [pc, #216]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fa92 	bl	8000724 <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	e00a      	b.n	800121a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f7ff fa8e 	bl	8000724 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e053      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 020c 	and.w	r2, r3, #12
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	429a      	cmp	r2, r3
 800122a:	d1eb      	bne.n	8001204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d210      	bcs.n	800125c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0207 	bic.w	r2, r3, #7
 8001242:	4922      	ldr	r1, [pc, #136]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e032      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800129a:	f000 f821 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 800129e:	4601      	mov	r1, r0
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_RCC_ClockConfig+0x1c8>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	fa21 f303 	lsr.w	r3, r1, r3
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1cc>)
 80012b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1d0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f938 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	08003654 	.word	0x08003654
 80012d8:	20000010 	.word	0x20000010
 80012dc:	20000014 	.word	0x20000014

080012e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	b490      	push	{r4, r7}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012e8:	1d3c      	adds	r4, r7, #4
 80012ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d002      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x40>
 800131a:	2b08      	cmp	r3, #8
 800131c:	d003      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x46>
 800131e:	e02d      	b.n	800137c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001322:	623b      	str	r3, [r7, #32]
      break;
 8001324:	e02d      	b.n	8001382 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001332:	4413      	add	r3, r2
 8001334:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001338:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0c5b      	lsrs	r3, r3, #17
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001352:	4413      	add	r3, r2
 8001354:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001358:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_RCC_GetSysClockFreq+0xbc>)
 800135e:	fb02 f203 	mul.w	r2, r2, r3
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	e004      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	623b      	str	r3, [r7, #32]
      break;
 800137a:	e002      	b.n	8001382 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_RCC_GetSysClockFreq+0xbc>)
 800137e:	623b      	str	r3, [r7, #32]
      break;
 8001380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001382:	6a3b      	ldr	r3, [r7, #32]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bc90      	pop	{r4, r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	08003638 	.word	0x08003638
 8001394:	08003648 	.word	0x08003648
 8001398:	40021000 	.word	0x40021000
 800139c:	007a1200 	.word	0x007a1200
 80013a0:	003d0900 	.word	0x003d0900

080013a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000010 	.word	0x20000010

080013b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013bc:	f7ff fff2 	bl	80013a4 <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	0adb      	lsrs	r3, r3, #11
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	08003664 	.word	0x08003664

080013e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	220f      	movs	r2, #15
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_RCC_GetClockConfig+0x58>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_RCC_GetClockConfig+0x58>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RCC_GetClockConfig+0x58>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_RCC_GetClockConfig+0x58>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_RCC_GetClockConfig+0x5c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0207 	and.w	r2, r3, #7
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40022000 	.word	0x40022000

08001440 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <RCC_Delay+0x34>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <RCC_Delay+0x38>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0a5b      	lsrs	r3, r3, #9
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800145c:	bf00      	nop
  }
  while (Delay --);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	60fa      	str	r2, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <RCC_Delay+0x1c>
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000010 	.word	0x20000010
 8001478:	10624dd3 	.word	0x10624dd3

0800147c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e01d      	b.n	80014ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f815 	bl	80014d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3304      	adds	r3, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f000 f962 	bl	8001784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b06      	cmp	r3, #6
 800150c:	d007      	beq.n	800151e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b02      	cmp	r3, #2
 800153e:	d122      	bne.n	8001586 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b02      	cmp	r3, #2
 800154c:	d11b      	bne.n	8001586 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 0202 	mvn.w	r2, #2
 8001556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f8ed 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8001572:	e005      	b.n	8001580 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f8e0 	bl	800173a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f8ef 	bl	800175e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b04      	cmp	r3, #4
 8001592:	d122      	bne.n	80015da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d11b      	bne.n	80015da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0204 	mvn.w	r2, #4
 80015aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8c3 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 80015c6:	e005      	b.n	80015d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8b6 	bl	800173a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8c5 	bl	800175e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d122      	bne.n	800162e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11b      	bne.n	800162e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0208 	mvn.w	r2, #8
 80015fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2204      	movs	r2, #4
 8001604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f899 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 800161a:	e005      	b.n	8001628 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f88c 	bl	800173a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f89b 	bl	800175e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b10      	cmp	r3, #16
 800163a:	d122      	bne.n	8001682 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b10      	cmp	r3, #16
 8001648:	d11b      	bne.n	8001682 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f06f 0210 	mvn.w	r2, #16
 8001652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2208      	movs	r2, #8
 8001658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f86f 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 800166e:	e005      	b.n	800167c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f862 	bl	800173a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f871 	bl	800175e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d10e      	bne.n	80016ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f06f 0201 	mvn.w	r2, #1
 80016a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7fe fef1 	bl	8000490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	2b80      	cmp	r3, #128	; 0x80
 80016ba:	d10e      	bne.n	80016da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	2b80      	cmp	r3, #128	; 0x80
 80016c8:	d107      	bne.n	80016da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8c0 	bl	800185a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b40      	cmp	r3, #64	; 0x40
 80016e6:	d10e      	bne.n	8001706 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	2b40      	cmp	r3, #64	; 0x40
 80016f4:	d107      	bne.n	8001706 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f835 	bl	8001770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b20      	cmp	r3, #32
 8001712:	d10e      	bne.n	8001732 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	2b20      	cmp	r3, #32
 8001720:	d107      	bne.n	8001732 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f06f 0220 	mvn.w	r2, #32
 800172a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f88b 	bl	8001848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a29      	ldr	r2, [pc, #164]	; (800183c <TIM_Base_SetConfig+0xb8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00b      	beq.n	80017b4 <TIM_Base_SetConfig+0x30>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a2:	d007      	beq.n	80017b4 <TIM_Base_SetConfig+0x30>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <TIM_Base_SetConfig+0xbc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d003      	beq.n	80017b4 <TIM_Base_SetConfig+0x30>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <TIM_Base_SetConfig+0xc0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d108      	bne.n	80017c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1c      	ldr	r2, [pc, #112]	; (800183c <TIM_Base_SetConfig+0xb8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00b      	beq.n	80017e6 <TIM_Base_SetConfig+0x62>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d007      	beq.n	80017e6 <TIM_Base_SetConfig+0x62>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <TIM_Base_SetConfig+0xbc>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d003      	beq.n	80017e6 <TIM_Base_SetConfig+0x62>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <TIM_Base_SetConfig+0xc0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d108      	bne.n	80017f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <TIM_Base_SetConfig+0xb8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d103      	bne.n	800182c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	615a      	str	r2, [r3, #20]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40000400 	.word	0x40000400
 8001844:	40000800 	.word	0x40000800

08001848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f103 0208 	add.w	r2, r3, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f103 0208 	add.w	r2, r3, #8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 0208 	add.w	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d103      	bne.n	8001928 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e00c      	b.n	8001942 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3308      	adds	r3, #8
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e002      	b.n	8001936 <vListInsert+0x2e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d2f6      	bcs.n	8001930 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6892      	ldr	r2, [r2, #8]
 800198e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6852      	ldr	r2, [r2, #4]
 8001998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d103      	bne.n	80019ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e4:	f383 8811 	msr	BASEPRI, r3
 80019e8:	f3bf 8f6f 	isb	sy
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	e7fe      	b.n	80019f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80019f4:	f001 fb40 	bl	8003078 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	441a      	add	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	3b01      	subs	r3, #1
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	441a      	add	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d114      	bne.n	8001a74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01a      	beq.n	8001a88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3310      	adds	r3, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 ff5e 	bl	8002918 <xTaskRemoveFromEventList>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d012      	beq.n	8001a88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <xQueueGenericReset+0xcc>)
 8001a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	e009      	b.n	8001a88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3310      	adds	r3, #16
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fef7 	bl	800186c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3324      	adds	r3, #36	; 0x24
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fef2 	bl	800186c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a88:	f001 fb24 	bl	80030d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000ed04 	.word	0xe000ed04

08001a9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <xQueueGenericCreate+0x28>
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e7fe      	b.n	8001ac2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	e004      	b.n	8001ada <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3348      	adds	r3, #72	; 0x48
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 fb84 	bl	80031ec <pvPortMalloc>
 8001ae4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	3348      	adds	r3, #72	; 0x48
 8001af0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f805 	bl	8001b16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e002      	b.n	8001b38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b44:	2101      	movs	r1, #1
 8001b46:	69b8      	ldr	r0, [r7, #24]
 8001b48:	f7ff ff40 	bl	80019cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08e      	sub	sp, #56	; 0x38
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <xQueueGenericSend+0x30>
 8001b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b82:	e7fe      	b.n	8001b82 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <xQueueGenericSend+0x3e>
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <xQueueGenericSend+0x42>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <xQueueGenericSend+0x44>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <xQueueGenericSend+0x5c>
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	e7fe      	b.n	8001bae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <xQueueGenericSend+0x6a>
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <xQueueGenericSend+0x6e>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <xQueueGenericSend+0x70>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <xQueueGenericSend+0x88>
 8001bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	f3bf 8f6f 	isb	sy
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	e7fe      	b.n	8001bda <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bdc:	f001 f856 	bl	8002c8c <xTaskGetSchedulerState>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <xQueueGenericSend+0x98>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <xQueueGenericSend+0x9c>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <xQueueGenericSend+0x9e>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <xQueueGenericSend+0xb6>
 8001bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f3bf 8f6f 	isb	sy
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	e7fe      	b.n	8001c08 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c0a:	f001 fa35 	bl	8003078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d302      	bcc.n	8001c20 <xQueueGenericSend+0xcc>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d129      	bne.n	8001c74 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c26:	f000 f96b 	bl	8001f00 <prvCopyDataToQueue>
 8001c2a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	3324      	adds	r3, #36	; 0x24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fe6d 	bl	8002918 <xTaskRemoveFromEventList>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c44:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <xQueueGenericSend+0x1f0>)
 8001c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	e00a      	b.n	8001c6c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <xQueueGenericSend+0x1f0>)
 8001c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001c6c:	f001 fa32 	bl	80030d4 <vPortExitCritical>
				return pdPASS;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e063      	b.n	8001d3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c7a:	f001 fa2b 	bl	80030d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e05c      	b.n	8001d3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fea5 	bl	80029dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c96:	f001 fa1d 	bl	80030d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c9a:	f000 fc59 	bl	8002550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c9e:	f001 f9eb 	bl	8003078 <vPortEnterCritical>
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cae:	d103      	bne.n	8001cb8 <xQueueGenericSend+0x164>
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d103      	bne.n	8001cce <xQueueGenericSend+0x17a>
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cce:	f001 fa01 	bl	80030d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cd2:	1d3a      	adds	r2, r7, #4
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fe94 	bl	8002a08 <xTaskCheckForTimeOut>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d124      	bne.n	8001d30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ce8:	f000 fa02 	bl	80020f0 <prvIsQueueFull>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d018      	beq.n	8001d24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fde8 	bl	80028d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d02:	f000 f98d 	bl	8002020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d06:	f000 fc31 	bl	800256c <xTaskResumeAll>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af7c 	bne.w	8001c0a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <xQueueGenericSend+0x1f0>)
 8001d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	e772      	b.n	8001c0a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d26:	f000 f97b 	bl	8002020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d2a:	f000 fc1f 	bl	800256c <xTaskResumeAll>
 8001d2e:	e76c      	b.n	8001c0a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d32:	f000 f975 	bl	8002020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d36:	f000 fc19 	bl	800256c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001d3a:	2300      	movs	r3, #0
		}
	}
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3738      	adds	r7, #56	; 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	e000ed04 	.word	0xe000ed04

08001d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <xQueueReceive+0x2e>
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	e7fe      	b.n	8001d74 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <xQueueReceive+0x3c>
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <xQueueReceive+0x40>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <xQueueReceive+0x42>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <xQueueReceive+0x5a>
 8001d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e7fe      	b.n	8001da0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001da2:	f000 ff73 	bl	8002c8c <xTaskGetSchedulerState>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <xQueueReceive+0x6a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <xQueueReceive+0x6e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <xQueueReceive+0x70>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <xQueueReceive+0x88>
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	e7fe      	b.n	8001dce <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dd0:	f001 f952 	bl	8003078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de4:	f000 f8f6 	bl	8001fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00f      	beq.n	8001e18 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	3310      	adds	r3, #16
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fd8b 	bl	8002918 <xTaskRemoveFromEventList>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <xQueueReceive+0x1b4>)
 8001e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e18:	f001 f95c 	bl	80030d4 <vPortExitCritical>
				return pdPASS;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e069      	b.n	8001ef4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e26:	f001 f955 	bl	80030d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e062      	b.n	8001ef4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fdcf 	bl	80029dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e42:	f001 f947 	bl	80030d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e46:	f000 fb83 	bl	8002550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e4a:	f001 f915 	bl	8003078 <vPortEnterCritical>
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d103      	bne.n	8001e64 <xQueueReceive+0x11c>
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d103      	bne.n	8001e7a <xQueueReceive+0x132>
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7a:	f001 f92b 	bl	80030d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e7e:	1d3a      	adds	r2, r7, #4
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fdbe 	bl	8002a08 <xTaskCheckForTimeOut>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d123      	bne.n	8001eda <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e94:	f000 f916 	bl	80020c4 <prvIsQueueEmpty>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	3324      	adds	r3, #36	; 0x24
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fd12 	bl	80028d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eae:	f000 f8b7 	bl	8002020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001eb2:	f000 fb5b 	bl	800256c <xTaskResumeAll>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d189      	bne.n	8001dd0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <xQueueReceive+0x1b4>)
 8001ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	e780      	b.n	8001dd0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ed0:	f000 f8a6 	bl	8002020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ed4:	f000 fb4a 	bl	800256c <xTaskResumeAll>
 8001ed8:	e77a      	b.n	8001dd0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001edc:	f000 f8a0 	bl	8002020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ee0:	f000 fb44 	bl	800256c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee6:	f000 f8ed 	bl	80020c4 <prvIsQueueEmpty>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f43f af6f 	beq.w	8001dd0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3730      	adds	r7, #48	; 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	e000ed04 	.word	0xe000ed04

08001f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d14d      	bne.n	8001fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fecc 	bl	8002cc8 <xTaskPriorityDisinherit>
 8001f30:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	e043      	b.n	8001fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d119      	bne.n	8001f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	f001 fb46 	bl	80035dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	441a      	add	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d32b      	bcc.n	8001fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	e026      	b.n	8001fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68d8      	ldr	r0, [r3, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	f001 fb2c 	bl	80035dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	425b      	negs	r3, r3
 8001f8e:	441a      	add	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	425b      	negs	r3, r3
 8001faa:	441a      	add	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d105      	bne.n	8001fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001fca:	697b      	ldr	r3, [r7, #20]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d018      	beq.n	8002018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	441a      	add	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d303      	bcc.n	8002008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68d9      	ldr	r1, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	461a      	mov	r2, r3
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f001 fae2 	bl	80035dc <memcpy>
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002028:	f001 f826 	bl	8003078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002034:	e011      	b.n	800205a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3324      	adds	r3, #36	; 0x24
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fc68 	bl	8002918 <xTaskRemoveFromEventList>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800204e:	f000 fd3b 	bl	8002ac8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dce9      	bgt.n	8002036 <prvUnlockQueue+0x16>
 8002062:	e000      	b.n	8002066 <prvUnlockQueue+0x46>
					break;
 8002064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	22ff      	movs	r2, #255	; 0xff
 800206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800206e:	f001 f831 	bl	80030d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002072:	f001 f801 	bl	8003078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800207c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800207e:	e011      	b.n	80020a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3310      	adds	r3, #16
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fc43 	bl	8002918 <xTaskRemoveFromEventList>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002098:	f000 fd16 	bl	8002ac8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dce9      	bgt.n	8002080 <prvUnlockQueue+0x60>
 80020ac:	e000      	b.n	80020b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80020ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80020b8:	f001 f80c 	bl	80030d4 <vPortExitCritical>
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020cc:	f000 ffd4 	bl	8003078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80020d8:	2301      	movs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e001      	b.n	80020e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020e2:	f000 fff7 	bl	80030d4 <vPortExitCritical>

	return xReturn;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020f8:	f000 ffbe 	bl	8003078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	429a      	cmp	r2, r3
 8002106:	d102      	bne.n	800210e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002108:	2301      	movs	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e001      	b.n	8002112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002112:	f000 ffdf 	bl	80030d4 <vPortExitCritical>

	return xReturn;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af04      	add	r7, sp, #16
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <xTaskCreateStatic+0x28>
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	e7fe      	b.n	8002146 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <xTaskCreateStatic+0x42>
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	e7fe      	b.n	8002160 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002162:	2350      	movs	r3, #80	; 0x50
 8002164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b50      	cmp	r3, #80	; 0x50
 800216a:	d009      	beq.n	8002180 <xTaskCreateStatic+0x60>
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e7fe      	b.n	800217e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01e      	beq.n	80021c4 <xTaskCreateStatic+0xa4>
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2202      	movs	r2, #2
 800219a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800219e:	2300      	movs	r3, #0
 80021a0:	9303      	str	r3, [sp, #12]
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f850 	bl	800225c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021be:	f000 f8cb 	bl	8002358 <prvAddNewTaskToReadyList>
 80021c2:	e001      	b.n	80021c8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80021c8:	697b      	ldr	r3, [r7, #20]
	}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b08c      	sub	sp, #48	; 0x30
 80021d6:	af04      	add	r7, sp, #16
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 f800 	bl	80031ec <pvPortMalloc>
 80021ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021f4:	2050      	movs	r0, #80	; 0x50
 80021f6:	f000 fff9 	bl	80031ec <pvPortMalloc>
 80021fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
 8002208:	e005      	b.n	8002216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f001 f8b0 	bl	8003370 <vPortFree>
 8002210:	e001      	b.n	8002216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	2300      	movs	r3, #0
 8002228:	9303      	str	r3, [sp, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	9302      	str	r3, [sp, #8]
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f80e 	bl	800225c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002240:	69f8      	ldr	r0, [r7, #28]
 8002242:	f000 f889 	bl	8002358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	e002      	b.n	8002252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002252:	69bb      	ldr	r3, [r7, #24]
	}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002274:	3b01      	subs	r3, #1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f023 0307 	bic.w	r3, r3, #7
 8002282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <prvInitialiseNewTask+0x46>
 800228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e7fe      	b.n	80022a0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e012      	b.n	80022ce <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	7819      	ldrb	r1, [r3, #0]
 80022b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	3334      	adds	r3, #52	; 0x34
 80022b8:	460a      	mov	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2b0b      	cmp	r3, #11
 80022d2:	d9e9      	bls.n	80022a8 <prvInitialiseNewTask+0x4c>
 80022d4:	e000      	b.n	80022d8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80022d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d901      	bls.n	80022ea <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022e6:	2306      	movs	r3, #6
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	3304      	adds	r3, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fad2 	bl	80018aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	3318      	adds	r3, #24
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff facd 	bl	80018aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002314:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	f1c3 0207 	rsb	r2, r3, #7
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2200      	movs	r2, #0
 800232a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	2200      	movs	r2, #0
 8002330:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	69b8      	ldr	r0, [r7, #24]
 800233a:	f000 fdaf 	bl	8002e9c <pxPortInitialiseStack>
 800233e:	4602      	mov	r2, r0
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002360:	f000 fe8a 	bl	8003078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <prvAddNewTaskToReadyList+0xb8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <prvAddNewTaskToReadyList+0xb8>)
 800236c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002376:	4a27      	ldr	r2, [pc, #156]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <prvAddNewTaskToReadyList+0xb8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d110      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002384:	f000 fbc4 	bl	8002b10 <prvInitialiseTaskLists>
 8002388:	e00d      	b.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <prvAddNewTaskToReadyList+0xc0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	429a      	cmp	r2, r3
 800239e:	d802      	bhi.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <prvAddNewTaskToReadyList+0xc4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <prvAddNewTaskToReadyList+0xc4>)
 80023ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	2201      	movs	r2, #1
 80023b6:	409a      	lsls	r2, r3
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <prvAddNewTaskToReadyList+0xc8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <prvAddNewTaskToReadyList+0xc8>)
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <prvAddNewTaskToReadyList+0xcc>)
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff fa72 	bl	80018c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023de:	f000 fe79 	bl	80030d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <prvAddNewTaskToReadyList+0xc0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <prvAddNewTaskToReadyList+0xd0>)
 80023fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000038c 	.word	0x2000038c
 8002414:	2000028c 	.word	0x2000028c
 8002418:	20000398 	.word	0x20000398
 800241c:	200003a8 	.word	0x200003a8
 8002420:	20000394 	.word	0x20000394
 8002424:	20000290 	.word	0x20000290
 8002428:	e000ed04 	.word	0xe000ed04

0800242c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d016      	beq.n	800246c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <vTaskDelay+0x60>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <vTaskDelay+0x2e>
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	e7fe      	b.n	8002458 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800245a:	f000 f879 	bl	8002550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800245e:	2100      	movs	r1, #0
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fcb5 	bl	8002dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002466:	f000 f881 	bl	800256c <xTaskResumeAll>
 800246a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <vTaskDelay+0x64>)
 8002474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200003b4 	.word	0x200003b4
 8002490:	e000ed04 	.word	0xe000ed04

08002494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80024a2:	463a      	mov	r2, r7
 80024a4:	1d39      	adds	r1, r7, #4
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe50 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	9202      	str	r2, [sp, #8]
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2300      	movs	r3, #0
 80024c0:	460a      	mov	r2, r1
 80024c2:	491d      	ldr	r1, [pc, #116]	; (8002538 <vTaskStartScheduler+0xa4>)
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <vTaskStartScheduler+0xa8>)
 80024c6:	f7ff fe2b 	bl	8002120 <xTaskCreateStatic>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <vTaskStartScheduler+0xac>)
 80024ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <vTaskStartScheduler+0xac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e001      	b.n	80024e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d115      	bne.n	8002514 <vTaskStartScheduler+0x80>
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <vTaskStartScheduler+0xb0>)
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <vTaskStartScheduler+0xb4>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <vTaskStartScheduler+0xb8>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800250e:	f000 fd43 	bl	8002f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002512:	e00d      	b.n	8002530 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d109      	bne.n	8002530 <vTaskStartScheduler+0x9c>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e7fe      	b.n	800252e <vTaskStartScheduler+0x9a>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	0800364c 	.word	0x0800364c
 800253c:	08002ae1 	.word	0x08002ae1
 8002540:	200003b0 	.word	0x200003b0
 8002544:	200003ac 	.word	0x200003ac
 8002548:	20000398 	.word	0x20000398
 800254c:	20000390 	.word	0x20000390

08002550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <vTaskSuspendAll+0x18>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	4a03      	ldr	r2, [pc, #12]	; (8002568 <vTaskSuspendAll+0x18>)
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	200003b4 	.word	0x200003b4

0800256c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <xTaskResumeAll+0x114>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <xTaskResumeAll+0x2a>
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	e7fe      	b.n	8002594 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002596:	f000 fd6f 	bl	8003078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <xTaskResumeAll+0x114>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	4a37      	ldr	r2, [pc, #220]	; (8002680 <xTaskResumeAll+0x114>)
 80025a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <xTaskResumeAll+0x114>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d161      	bne.n	8002670 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <xTaskResumeAll+0x118>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05d      	beq.n	8002670 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025b4:	e02e      	b.n	8002614 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <xTaskResumeAll+0x11c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3318      	adds	r3, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f9d8 	bl	8001978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f9d3 	bl	8001978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <xTaskResumeAll+0x120>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <xTaskResumeAll+0x120>)
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4a27      	ldr	r2, [pc, #156]	; (8002690 <xTaskResumeAll+0x124>)
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3304      	adds	r3, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f7ff f961 	bl	80018c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <xTaskResumeAll+0x128>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <xTaskResumeAll+0x12c>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002614:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <xTaskResumeAll+0x11c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1cc      	bne.n	80025b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002622:	f000 fb0f 	bl	8002c44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <xTaskResumeAll+0x130>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002632:	f000 f837 	bl	80026a4 <xTaskIncrementTick>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <xTaskResumeAll+0x12c>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3b01      	subs	r3, #1
 8002646:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f1      	bne.n	8002632 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <xTaskResumeAll+0x130>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <xTaskResumeAll+0x12c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <xTaskResumeAll+0x134>)
 8002662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002670:	f000 fd30 	bl	80030d4 <vPortExitCritical>

	return xAlreadyYielded;
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200003b4 	.word	0x200003b4
 8002684:	2000038c 	.word	0x2000038c
 8002688:	2000034c 	.word	0x2000034c
 800268c:	20000394 	.word	0x20000394
 8002690:	20000290 	.word	0x20000290
 8002694:	2000028c 	.word	0x2000028c
 8002698:	200003a0 	.word	0x200003a0
 800269c:	2000039c 	.word	0x2000039c
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ae:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <xTaskIncrementTick+0x14c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 808c 	bne.w	80027d0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <xTaskIncrementTick+0x150>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026c0:	4a4c      	ldr	r2, [pc, #304]	; (80027f4 <xTaskIncrementTick+0x150>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11f      	bne.n	800270c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80026cc:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <xTaskIncrementTick+0x46>
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	e7fe      	b.n	80026e8 <xTaskIncrementTick+0x44>
 80026ea:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	4b42      	ldr	r3, [pc, #264]	; (80027fc <xTaskIncrementTick+0x158>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4a40      	ldr	r2, [pc, #256]	; (80027fc <xTaskIncrementTick+0x158>)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <xTaskIncrementTick+0x15c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a3e      	ldr	r2, [pc, #248]	; (8002800 <xTaskIncrementTick+0x15c>)
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	f000 fa9c 	bl	8002c44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800270c:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <xTaskIncrementTick+0x160>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	429a      	cmp	r2, r3
 8002714:	d34d      	bcc.n	80027b2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <xTaskIncrementTick+0x154>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <xTaskIncrementTick+0x80>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <xTaskIncrementTick+0x82>
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <xTaskIncrementTick+0x160>)
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	601a      	str	r2, [r3, #0]
					break;
 8002732:	e03e      	b.n	80027b2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002734:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <xTaskIncrementTick+0x154>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d203      	bcs.n	8002754 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800274c:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <xTaskIncrementTick+0x160>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
						break;
 8002752:	e02e      	b.n	80027b2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f90d 	bl	8001978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3318      	adds	r3, #24
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f904 	bl	8001978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	2201      	movs	r2, #1
 8002776:	409a      	lsls	r2, r3
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <xTaskIncrementTick+0x164>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <xTaskIncrementTick+0x164>)
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <xTaskIncrementTick+0x168>)
 8002790:	441a      	add	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3304      	adds	r3, #4
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f7ff f892 	bl	80018c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <xTaskIncrementTick+0x16c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d3b4      	bcc.n	8002716 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027b0:	e7b1      	b.n	8002716 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <xTaskIncrementTick+0x16c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	4914      	ldr	r1, [pc, #80]	; (800280c <xTaskIncrementTick+0x168>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d907      	bls.n	80027da <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80027ca:	2301      	movs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e004      	b.n	80027da <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <xTaskIncrementTick+0x170>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <xTaskIncrementTick+0x170>)
 80027d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <xTaskIncrementTick+0x174>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80027e6:	697b      	ldr	r3, [r7, #20]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200003b4 	.word	0x200003b4
 80027f4:	20000390 	.word	0x20000390
 80027f8:	20000344 	.word	0x20000344
 80027fc:	20000348 	.word	0x20000348
 8002800:	200003a4 	.word	0x200003a4
 8002804:	200003ac 	.word	0x200003ac
 8002808:	20000394 	.word	0x20000394
 800280c:	20000290 	.word	0x20000290
 8002810:	2000028c 	.word	0x2000028c
 8002814:	2000039c 	.word	0x2000039c
 8002818:	200003a0 	.word	0x200003a0

0800281c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <vTaskSwitchContext+0xa0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800282a:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <vTaskSwitchContext+0xa4>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002830:	e03e      	b.n	80028b0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <vTaskSwitchContext+0xa4>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <vTaskSwitchContext+0xa8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	f1c3 031f 	rsb	r3, r3, #31
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	491e      	ldr	r1, [pc, #120]	; (80028c8 <vTaskSwitchContext+0xac>)
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e7fe      	b.n	8002874 <vTaskSwitchContext+0x58>
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <vTaskSwitchContext+0xac>)
 8002882:	4413      	add	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3308      	adds	r3, #8
 8002898:	429a      	cmp	r2, r3
 800289a:	d104      	bne.n	80028a6 <vTaskSwitchContext+0x8a>
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <vTaskSwitchContext+0xb0>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	200003b4 	.word	0x200003b4
 80028c0:	200003a0 	.word	0x200003a0
 80028c4:	20000394 	.word	0x20000394
 80028c8:	20000290 	.word	0x20000290
 80028cc:	2000028c 	.word	0x2000028c

080028d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <vTaskPlaceOnEventList+0x24>
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e7fe      	b.n	80028f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <vTaskPlaceOnEventList+0x44>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3318      	adds	r3, #24
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff f803 	bl	8001908 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002902:	2101      	movs	r1, #1
 8002904:	6838      	ldr	r0, [r7, #0]
 8002906:	f000 fa63 	bl	8002dd0 <prvAddCurrentTaskToDelayedList>
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2000028c 	.word	0x2000028c

08002918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <xTaskRemoveFromEventList+0x2a>
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e7fe      	b.n	8002940 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	3318      	adds	r3, #24
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f816 	bl	8001978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <xTaskRemoveFromEventList+0xac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11c      	bne.n	800298e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	3304      	adds	r3, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f80d 	bl	8001978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <xTaskRemoveFromEventList+0xb0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <xTaskRemoveFromEventList+0xb0>)
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <xTaskRemoveFromEventList+0xb4>)
 800297e:	441a      	add	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	3304      	adds	r3, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f7fe ff9b 	bl	80018c2 <vListInsertEnd>
 800298c:	e005      	b.n	800299a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	3318      	adds	r3, #24
 8002992:	4619      	mov	r1, r3
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <xTaskRemoveFromEventList+0xb8>)
 8002996:	f7fe ff94 	bl	80018c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <xTaskRemoveFromEventList+0xbc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d905      	bls.n	80029b4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <xTaskRemoveFromEventList+0xc0>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e001      	b.n	80029b8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80029b8:	697b      	ldr	r3, [r7, #20]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200003b4 	.word	0x200003b4
 80029c8:	20000394 	.word	0x20000394
 80029cc:	20000290 	.word	0x20000290
 80029d0:	2000034c 	.word	0x2000034c
 80029d4:	2000028c 	.word	0x2000028c
 80029d8:	200003a0 	.word	0x200003a0

080029dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <vTaskInternalSetTimeOutState+0x24>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <vTaskInternalSetTimeOutState+0x28>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200003a4 	.word	0x200003a4
 8002a04:	20000390 	.word	0x20000390

08002a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <xTaskCheckForTimeOut+0x24>
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e7fe      	b.n	8002a2a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <xTaskCheckForTimeOut+0x3e>
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e7fe      	b.n	8002a44 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002a46:	f000 fb17 	bl	8003078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <xTaskCheckForTimeOut+0xb8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d102      	bne.n	8002a6a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e023      	b.n	8002ab2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <xTaskCheckForTimeOut+0xbc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d007      	beq.n	8002a86 <xTaskCheckForTimeOut+0x7e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d302      	bcc.n	8002a86 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	e015      	b.n	8002ab2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d20b      	bcs.n	8002aa8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff9d 	bl	80029dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e004      	b.n	8002ab2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ab2:	f000 fb0f 	bl	80030d4 <vPortExitCritical>

	return xReturn;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000390 	.word	0x20000390
 8002ac4:	200003a4 	.word	0x200003a4

08002ac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <vTaskMissedYield+0x14>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	200003a0 	.word	0x200003a0

08002ae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ae8:	f000 f852 	bl	8002b90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <prvIdleTask+0x28>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d9f9      	bls.n	8002ae8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <prvIdleTask+0x2c>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b04:	e7f0      	b.n	8002ae8 <prvIdleTask+0x8>
 8002b06:	bf00      	nop
 8002b08:	20000290 	.word	0x20000290
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	e00c      	b.n	8002b36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <prvInitialiseTaskLists+0x60>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fe9e 	bl	800186c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3301      	adds	r3, #1
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d9ef      	bls.n	8002b1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b3c:	480d      	ldr	r0, [pc, #52]	; (8002b74 <prvInitialiseTaskLists+0x64>)
 8002b3e:	f7fe fe95 	bl	800186c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <prvInitialiseTaskLists+0x68>)
 8002b44:	f7fe fe92 	bl	800186c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b48:	480c      	ldr	r0, [pc, #48]	; (8002b7c <prvInitialiseTaskLists+0x6c>)
 8002b4a:	f7fe fe8f 	bl	800186c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b4e:	480c      	ldr	r0, [pc, #48]	; (8002b80 <prvInitialiseTaskLists+0x70>)
 8002b50:	f7fe fe8c 	bl	800186c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <prvInitialiseTaskLists+0x74>)
 8002b56:	f7fe fe89 	bl	800186c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <prvInitialiseTaskLists+0x78>)
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <prvInitialiseTaskLists+0x64>)
 8002b5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <prvInitialiseTaskLists+0x7c>)
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <prvInitialiseTaskLists+0x68>)
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000290 	.word	0x20000290
 8002b74:	2000031c 	.word	0x2000031c
 8002b78:	20000330 	.word	0x20000330
 8002b7c:	2000034c 	.word	0x2000034c
 8002b80:	20000360 	.word	0x20000360
 8002b84:	20000378 	.word	0x20000378
 8002b88:	20000344 	.word	0x20000344
 8002b8c:	20000348 	.word	0x20000348

08002b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b96:	e019      	b.n	8002bcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b98:	f000 fa6e 	bl	8003078 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <prvCheckTasksWaitingTermination+0x4c>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe fee5 	bl	8001978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <prvCheckTasksWaitingTermination+0x50>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <prvCheckTasksWaitingTermination+0x50>)
 8002bb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <prvCheckTasksWaitingTermination+0x54>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <prvCheckTasksWaitingTermination+0x54>)
 8002bc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002bc2:	f000 fa87 	bl	80030d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f80e 	bl	8002be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <prvCheckTasksWaitingTermination+0x54>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e1      	bne.n	8002b98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000360 	.word	0x20000360
 8002be0:	2000038c 	.word	0x2000038c
 8002be4:	20000374 	.word	0x20000374

08002be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fbb6 	bl	8003370 <vPortFree>
				vPortFree( pxTCB );
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fbb3 	bl	8003370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c0a:	e017      	b.n	8002c3c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d103      	bne.n	8002c1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fbaa 	bl	8003370 <vPortFree>
	}
 8002c1c:	e00e      	b.n	8002c3c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d009      	beq.n	8002c3c <prvDeleteTCB+0x54>
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e7fe      	b.n	8002c3a <prvDeleteTCB+0x52>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <prvResetNextTaskUnblockTime+0x40>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <prvResetNextTaskUnblockTime+0x14>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <prvResetNextTaskUnblockTime+0x16>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <prvResetNextTaskUnblockTime+0x44>)
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c66:	e008      	b.n	8002c7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <prvResetNextTaskUnblockTime+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <prvResetNextTaskUnblockTime+0x44>)
 8002c78:	6013      	str	r3, [r2, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	20000344 	.word	0x20000344
 8002c88:	200003ac 	.word	0x200003ac

08002c8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <xTaskGetSchedulerState+0x34>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	e008      	b.n	8002cb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <xTaskGetSchedulerState+0x38>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	e001      	b.n	8002cb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002cb2:	687b      	ldr	r3, [r7, #4]
	}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000398 	.word	0x20000398
 8002cc4:	200003b4 	.word	0x200003b4

08002cc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06c      	beq.n	8002db8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <xTaskPriorityDisinherit+0xfc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d009      	beq.n	8002cfc <xTaskPriorityDisinherit+0x34>
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e7fe      	b.n	8002cfa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <xTaskPriorityDisinherit+0x50>
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	e7fe      	b.n	8002d16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	1e5a      	subs	r2, r3, #1
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d044      	beq.n	8002db8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d140      	bne.n	8002db8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fe1c 	bl	8001978 <uxListRemove>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d115      	bne.n	8002d72 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4a:	491f      	ldr	r1, [pc, #124]	; (8002dc8 <xTaskPriorityDisinherit+0x100>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <xTaskPriorityDisinherit+0xaa>
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	2201      	movs	r2, #1
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <xTaskPriorityDisinherit+0x104>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <xTaskPriorityDisinherit+0x104>)
 8002d70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f1c3 0207 	rsb	r2, r3, #7
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <xTaskPriorityDisinherit+0x104>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <xTaskPriorityDisinherit+0x104>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <xTaskPriorityDisinherit+0x100>)
 8002da6:	441a      	add	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe fd87 	bl	80018c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002db8:	697b      	ldr	r3, [r7, #20]
	}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000028c 	.word	0x2000028c
 8002dc8:	20000290 	.word	0x20000290
 8002dcc:	20000394 	.word	0x20000394

08002dd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fdc6 	bl	8001978 <uxListRemove>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2201      	movs	r2, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4013      	ands	r3, r2
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d10a      	bne.n	8002e28 <prvAddCurrentTaskToDelayedList+0x58>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	4619      	mov	r1, r3
 8002e20:	481a      	ldr	r0, [pc, #104]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e22:	f7fe fd4e 	bl	80018c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e26:	e026      	b.n	8002e76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d209      	bcs.n	8002e54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f7fe fd5b 	bl	8001908 <vListInsert>
}
 8002e52:	e010      	b.n	8002e76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f7fe fd51 	bl	8001908 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d202      	bcs.n	8002e76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e70:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6013      	str	r3, [r2, #0]
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000390 	.word	0x20000390
 8002e84:	2000028c 	.word	0x2000028c
 8002e88:	20000394 	.word	0x20000394
 8002e8c:	20000378 	.word	0x20000378
 8002e90:	20000348 	.word	0x20000348
 8002e94:	20000344 	.word	0x20000344
 8002e98:	200003ac 	.word	0x200003ac

08002e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3b04      	subs	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f023 0201 	bic.w	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3b04      	subs	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ecc:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <pxPortInitialiseStack+0x54>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3b14      	subs	r3, #20
 8002ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3b20      	subs	r3, #32
 8002ee2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	08002ef5 	.word	0x08002ef5

08002ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <prvTaskExitError+0x4c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d009      	beq.n	8002f1c <prvTaskExitError+0x28>
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e7fe      	b.n	8002f1a <prvTaskExitError+0x26>
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f2e:	bf00      	nop
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0fc      	beq.n	8002f30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	2000001c 	.word	0x2000001c
	...

08002f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <pxCurrentTCBConst2>)
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	6808      	ldr	r0, [r1, #0]
 8002f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f5a:	f380 8809 	msr	PSP, r0
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f380 8811 	msr	BASEPRI, r0
 8002f6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002f6e:	4770      	bx	lr

08002f70 <pxCurrentTCBConst2>:
 8002f70:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop

08002f78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002f78:	4806      	ldr	r0, [pc, #24]	; (8002f94 <prvPortStartFirstTask+0x1c>)
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	f380 8808 	msr	MSP, r0
 8002f82:	b662      	cpsie	i
 8002f84:	b661      	cpsie	f
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	df00      	svc	0
 8002f90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f92:	bf00      	nop
 8002f94:	e000ed08 	.word	0xe000ed08

08002f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <xPortStartScheduler+0xcc>)
 8002fa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	22ff      	movs	r2, #255	; 0xff
 8002fae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <xPortStartScheduler+0xd0>)
 8002fc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <xPortStartScheduler+0xd4>)
 8002fc8:	2207      	movs	r2, #7
 8002fca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fcc:	e009      	b.n	8002fe2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <xPortStartScheduler+0xd4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <xPortStartScheduler+0xd4>)
 8002fd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d0ef      	beq.n	8002fce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <xPortStartScheduler+0xd4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d009      	beq.n	800300e <xPortStartScheduler+0x76>
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	e7fe      	b.n	800300c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <xPortStartScheduler+0xd4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <xPortStartScheduler+0xd4>)
 8003016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <xPortStartScheduler+0xd4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <xPortStartScheduler+0xd4>)
 8003022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <xPortStartScheduler+0xd8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <xPortStartScheduler+0xd8>)
 8003032:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <xPortStartScheduler+0xd8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <xPortStartScheduler+0xd8>)
 800303e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003044:	f000 f8b0 	bl	80031a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <xPortStartScheduler+0xdc>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800304e:	f7ff ff93 	bl	8002f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003052:	f7ff fbe3 	bl	800281c <vTaskSwitchContext>
	prvTaskExitError();
 8003056:	f7ff ff4d 	bl	8002ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	e000e400 	.word	0xe000e400
 8003068:	200003b8 	.word	0x200003b8
 800306c:	200003bc 	.word	0x200003bc
 8003070:	e000ed20 	.word	0xe000ed20
 8003074:	2000001c 	.word	0x2000001c

08003078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <vPortEnterCritical+0x54>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <vPortEnterCritical+0x54>)
 8003098:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <vPortEnterCritical+0x54>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10e      	bne.n	80030c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <vPortEnterCritical+0x58>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <vPortEnterCritical+0x48>
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	e7fe      	b.n	80030be <vPortEnterCritical+0x46>
	}
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	2000001c 	.word	0x2000001c
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <vPortExitCritical+0x48>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <vPortExitCritical+0x22>
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	e7fe      	b.n	80030f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <vPortExitCritical+0x48>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <vPortExitCritical+0x48>)
 80030fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <vPortExitCritical+0x48>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <vPortExitCritical+0x3e>
 8003108:	2300      	movs	r3, #0
 800310a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	2000001c 	.word	0x2000001c

08003120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003120:	f3ef 8009 	mrs	r0, PSP
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <pxCurrentTCBConst>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003130:	6010      	str	r0, [r2, #0]
 8003132:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003136:	f04f 0050 	mov.w	r0, #80	; 0x50
 800313a:	f380 8811 	msr	BASEPRI, r0
 800313e:	f7ff fb6d 	bl	800281c <vTaskSwitchContext>
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8811 	msr	BASEPRI, r0
 800314a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	6808      	ldr	r0, [r1, #0]
 8003152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003156:	f380 8809 	msr	PSP, r0
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	4770      	bx	lr

08003160 <pxCurrentTCBConst>:
 8003160:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003180:	f7ff fa90 	bl	80026a4 <xTaskIncrementTick>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <SysTick_Handler+0x3c>)
 800318c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	2300      	movs	r3, #0
 8003194:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <vPortSetupTimerInterrupt+0x30>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <vPortSetupTimerInterrupt+0x34>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <vPortSetupTimerInterrupt+0x38>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <vPortSetupTimerInterrupt+0x3c>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <vPortSetupTimerInterrupt+0x40>)
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031ca:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <vPortSetupTimerInterrupt+0x30>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	e000e010 	.word	0xe000e010
 80031dc:	e000e018 	.word	0xe000e018
 80031e0:	20000010 	.word	0x20000010
 80031e4:	10624dd3 	.word	0x10624dd3
 80031e8:	e000e014 	.word	0xe000e014

080031ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80031f8:	f7ff f9aa 	bl	8002550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80031fc:	4b57      	ldr	r3, [pc, #348]	; (800335c <pvPortMalloc+0x170>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003204:	f000 f90c 	bl	8003420 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <pvPortMalloc+0x174>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 808c 	bne.w	800332e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01c      	beq.n	8003256 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800321c:	2208      	movs	r2, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f023 0307 	bic.w	r3, r3, #7
 8003234:	3308      	adds	r3, #8
 8003236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <pvPortMalloc+0x6a>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e7fe      	b.n	8003254 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d068      	beq.n	800332e <pvPortMalloc+0x142>
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <pvPortMalloc+0x178>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d863      	bhi.n	800332e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <pvPortMalloc+0x17c>)
 8003268:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800326a:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <pvPortMalloc+0x17c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003270:	e004      	b.n	800327c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d903      	bls.n	800328e <pvPortMalloc+0xa2>
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f1      	bne.n	8003272 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800328e:	4b33      	ldr	r3, [pc, #204]	; (800335c <pvPortMalloc+0x170>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	429a      	cmp	r2, r3
 8003296:	d04a      	beq.n	800332e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	4413      	add	r3, r2
 80032a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	2308      	movs	r3, #8
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d91e      	bls.n	80032f8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <pvPortMalloc+0xf4>
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	e7fe      	b.n	80032de <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1ad2      	subs	r2, r2, r3
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032f2:	69b8      	ldr	r0, [r7, #24]
 80032f4:	f000 f8f6 	bl	80034e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <pvPortMalloc+0x178>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <pvPortMalloc+0x178>)
 8003304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <pvPortMalloc+0x178>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <pvPortMalloc+0x180>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d203      	bcs.n	800331a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <pvPortMalloc+0x178>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a15      	ldr	r2, [pc, #84]	; (800336c <pvPortMalloc+0x180>)
 8003318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <pvPortMalloc+0x174>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	431a      	orrs	r2, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800332e:	f7ff f91d 	bl	800256c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <pvPortMalloc+0x164>
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e7fe      	b.n	800334e <pvPortMalloc+0x162>
	return pvReturn;
 8003350:	69fb      	ldr	r3, [r7, #28]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3728      	adds	r7, #40	; 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200013c8 	.word	0x200013c8
 8003360:	200013d4 	.word	0x200013d4
 8003364:	200013cc 	.word	0x200013cc
 8003368:	200013c0 	.word	0x200013c0
 800336c:	200013d0 	.word	0x200013d0

08003370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d046      	beq.n	8003410 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003382:	2308      	movs	r3, #8
 8003384:	425b      	negs	r3, r3
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4413      	add	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <vPortFree+0xa8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <vPortFree+0x42>
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e7fe      	b.n	80033b0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <vPortFree+0x5e>
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	e7fe      	b.n	80033cc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <vPortFree+0xa8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d019      	beq.n	8003410 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d115      	bne.n	8003410 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <vPortFree+0xa8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80033f4:	f7ff f8ac 	bl	8002550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <vPortFree+0xac>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4413      	add	r3, r2
 8003402:	4a06      	ldr	r2, [pc, #24]	; (800341c <vPortFree+0xac>)
 8003404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003406:	6938      	ldr	r0, [r7, #16]
 8003408:	f000 f86c 	bl	80034e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800340c:	f7ff f8ae 	bl	800256c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200013d4 	.word	0x200013d4
 800341c:	200013cc 	.word	0x200013cc

08003420 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <prvHeapInit+0xac>)
 800342e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3307      	adds	r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <prvHeapInit+0xac>)
 8003450:	4413      	add	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003458:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <prvHeapInit+0xb0>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <prvHeapInit+0xb0>)
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800346c:	2208      	movs	r2, #8
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <prvHeapInit+0xb4>)
 8003480:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <prvHeapInit+0xb4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <prvHeapInit+0xb4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <prvHeapInit+0xb4>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <prvHeapInit+0xb8>)
 80034ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <prvHeapInit+0xbc>)
 80034b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <prvHeapInit+0xc0>)
 80034ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	200003c0 	.word	0x200003c0
 80034d0:	200013c0 	.word	0x200013c0
 80034d4:	200013c8 	.word	0x200013c8
 80034d8:	200013d0 	.word	0x200013d0
 80034dc:	200013cc 	.word	0x200013cc
 80034e0:	200013d4 	.word	0x200013d4

080034e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <prvInsertBlockIntoFreeList+0xa8>)
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <prvInsertBlockIntoFreeList+0x14>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d8f7      	bhi.n	80034f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d108      	bne.n	8003526 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d118      	bne.n	800356c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <prvInsertBlockIntoFreeList+0xac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d00d      	beq.n	8003562 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e008      	b.n	8003574 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <prvInsertBlockIntoFreeList+0xac>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e003      	b.n	8003574 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d002      	beq.n	8003582 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	200013c0 	.word	0x200013c0
 8003590:	200013c8 	.word	0x200013c8

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	2500      	movs	r5, #0
 8003598:	4e0c      	ldr	r6, [pc, #48]	; (80035cc <__libc_init_array+0x38>)
 800359a:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359c:	1ba4      	subs	r4, r4, r6
 800359e:	10a4      	asrs	r4, r4, #2
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	f000 f82e 	bl	8003604 <_init>
 80035a8:	2500      	movs	r5, #0
 80035aa:	4e0a      	ldr	r6, [pc, #40]	; (80035d4 <__libc_init_array+0x40>)
 80035ac:	4c0a      	ldr	r4, [pc, #40]	; (80035d8 <__libc_init_array+0x44>)
 80035ae:	1ba4      	subs	r4, r4, r6
 80035b0:	10a4      	asrs	r4, r4, #2
 80035b2:	42a5      	cmp	r5, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035bc:	4798      	blx	r3
 80035be:	3501      	adds	r5, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035c6:	4798      	blx	r3
 80035c8:	3501      	adds	r5, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	0800366c 	.word	0x0800366c
 80035d0:	0800366c 	.word	0x0800366c
 80035d4:	0800366c 	.word	0x0800366c
 80035d8:	08003670 	.word	0x08003670

080035dc <memcpy>:
 80035dc:	b510      	push	{r4, lr}
 80035de:	1e43      	subs	r3, r0, #1
 80035e0:	440a      	add	r2, r1
 80035e2:	4291      	cmp	r1, r2
 80035e4:	d100      	bne.n	80035e8 <memcpy+0xc>
 80035e6:	bd10      	pop	{r4, pc}
 80035e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035f0:	e7f7      	b.n	80035e2 <memcpy+0x6>

080035f2 <memset>:
 80035f2:	4603      	mov	r3, r0
 80035f4:	4402      	add	r2, r0
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d100      	bne.n	80035fc <memset+0xa>
 80035fa:	4770      	bx	lr
 80035fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003600:	e7f9      	b.n	80035f6 <memset+0x4>
	...

08003604 <_init>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr

08003610 <_fini>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr
