
ledFreeRTOS_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003988  08003988  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003988  08003988  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003988  08003988  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000142c  20000010  080039a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000143c  080039a0  0002143c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db09  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002283  00000000  00000000  0002db42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00030ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a8e  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3c8  00000000  00000000  0004610e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007670b  00000000  00000000  000504d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  000c6c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003914 	.word	0x08003914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003914 	.word	0x08003914

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	2000007c 	.word	0x2000007c

08000180 <main>:
//Variable global para compartir (prolijamente)
int comparte = 0;
pTareaMutex par[3];

int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af02      	add	r7, sp, #8
	int i;

	HAL_Init();
 8000186:	f000 faa7 	bl	80006d8 <HAL_Init>
	SystemClock_Config();
 800018a:	f000 f8f1 	bl	8000370 <SystemClock_Config>
	MX_GPIO_Init();
 800018e:	f000 f935 	bl	80003fc <MX_GPIO_Init>

	//Creo el sem√°foro y si no puedo falla el sistema
	if(!(semToggleLed = xSemaphoreCreateBinary()))
 8000192:	2203      	movs	r2, #3
 8000194:	2100      	movs	r1, #0
 8000196:	2001      	movs	r0, #1
 8000198:	f001 fc82 	bl	8001aa0 <xQueueGenericCreate>
 800019c:	4602      	mov	r2, r0
 800019e:	4b37      	ldr	r3, [pc, #220]	; (800027c <main+0xfc>)
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	4b36      	ldr	r3, [pc, #216]	; (800027c <main+0xfc>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d101      	bne.n	80001ae <main+0x2e>
	{
		ChocarCalesita();
 80001aa:	f000 f8c9 	bl	8000340 <ChocarCalesita>
	}

	//Creo un mutex.
	if(!(semMutexVariables = xSemaphoreCreateMutex()))
 80001ae:	2001      	movs	r0, #1
 80001b0:	f001 fcec 	bl	8001b8c <xQueueCreateMutex>
 80001b4:	4602      	mov	r2, r0
 80001b6:	4b32      	ldr	r3, [pc, #200]	; (8000280 <main+0x100>)
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	4b31      	ldr	r3, [pc, #196]	; (8000280 <main+0x100>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d101      	bne.n	80001c6 <main+0x46>
	{
		ChocarCalesita();
 80001c2:	f000 f8bd 	bl	8000340 <ChocarCalesita>
	}

	xTaskCreate(TareaLed,
 80001c6:	2300      	movs	r3, #0
 80001c8:	9301      	str	r3, [sp, #4]
 80001ca:	2301      	movs	r3, #1
 80001cc:	9300      	str	r3, [sp, #0]
 80001ce:	2300      	movs	r3, #0
 80001d0:	2280      	movs	r2, #128	; 0x80
 80001d2:	492c      	ldr	r1, [pc, #176]	; (8000284 <main+0x104>)
 80001d4:	482c      	ldr	r0, [pc, #176]	; (8000288 <main+0x108>)
 80001d6:	f002 f84d 	bl	8002274 <xTaskCreate>
			  128,
			  NULL,
			  1,
			  NULL);

	xTaskCreate(TareaTiempo,
 80001da:	2300      	movs	r3, #0
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	2301      	movs	r3, #1
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2280      	movs	r2, #128	; 0x80
 80001e6:	4929      	ldr	r1, [pc, #164]	; (800028c <main+0x10c>)
 80001e8:	4829      	ldr	r0, [pc, #164]	; (8000290 <main+0x110>)
 80001ea:	f002 f843 	bl	8002274 <xTaskCreate>
			  128,
			  NULL,
			  1,
			  NULL);

	par[0].var = &comparte;
 80001ee:	4b29      	ldr	r3, [pc, #164]	; (8000294 <main+0x114>)
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <main+0x118>)
 80001f2:	601a      	str	r2, [r3, #0]
	par[0].mutex = semMutexVariables;
 80001f4:	4b22      	ldr	r3, [pc, #136]	; (8000280 <main+0x100>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a26      	ldr	r2, [pc, #152]	; (8000294 <main+0x114>)
 80001fa:	6093      	str	r3, [r2, #8]
	par[0].comportamiento = 1;
 80001fc:	4b25      	ldr	r3, [pc, #148]	; (8000294 <main+0x114>)
 80001fe:	2201      	movs	r2, #1
 8000200:	605a      	str	r2, [r3, #4]
	par[1].var = &comparte;
 8000202:	4b24      	ldr	r3, [pc, #144]	; (8000294 <main+0x114>)
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <main+0x118>)
 8000206:	60da      	str	r2, [r3, #12]
	par[1].mutex = semMutexVariables;
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <main+0x100>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a21      	ldr	r2, [pc, #132]	; (8000294 <main+0x114>)
 800020e:	6153      	str	r3, [r2, #20]
	par[1].comportamiento = -1;
 8000210:	4b20      	ldr	r3, [pc, #128]	; (8000294 <main+0x114>)
 8000212:	f04f 32ff 	mov.w	r2, #4294967295
 8000216:	611a      	str	r2, [r3, #16]
	par[2].var = &comparte;
 8000218:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <main+0x114>)
 800021a:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <main+0x118>)
 800021c:	619a      	str	r2, [r3, #24]
	par[2].mutex = semMutexVariables;
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <main+0x100>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <main+0x114>)
 8000224:	6213      	str	r3, [r2, #32]
	par[2].comportamiento = 2;
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <main+0x114>)
 8000228:	2202      	movs	r2, #2
 800022a:	61da      	str	r2, [r3, #28]


	for(i=0;i<3;i++)
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e018      	b.n	8000264 <main+0xe4>
	{
		if(xTaskCreate(TareaMutex,
				  	  "tarea_mutex",
					  128,
					  &par[i],
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4613      	mov	r3, r2
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	4413      	add	r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4a15      	ldr	r2, [pc, #84]	; (8000294 <main+0x114>)
 800023e:	441a      	add	r2, r3
		if(xTaskCreate(TareaMutex,
 8000240:	2300      	movs	r3, #0
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	2301      	movs	r3, #1
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	4613      	mov	r3, r2
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	4913      	ldr	r1, [pc, #76]	; (800029c <main+0x11c>)
 800024e:	4814      	ldr	r0, [pc, #80]	; (80002a0 <main+0x120>)
 8000250:	f002 f810 	bl	8002274 <xTaskCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	2b01      	cmp	r3, #1
 8000258:	d001      	beq.n	800025e <main+0xde>
					  1,
					  NULL) != pdPASS)
		{
			ChocarCalesita();
 800025a:	f000 f871 	bl	8000340 <ChocarCalesita>
	for(i=0;i<3;i++)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	3301      	adds	r3, #1
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b02      	cmp	r3, #2
 8000268:	dde3      	ble.n	8000232 <main+0xb2>
		}
	}


   vTaskStartScheduler();
 800026a:	f002 f965 	bl	8002538 <vTaskStartScheduler>
   ChocarCalesita();
 800026e:	f000 f867 	bl	8000340 <ChocarCalesita>
   return 1;
 8000272:	2301      	movs	r3, #1
}
 8000274:	4618      	mov	r0, r3
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200013cc 	.word	0x200013cc
 8000280:	200013f4 	.word	0x200013f4
 8000284:	0800392c 	.word	0x0800392c
 8000288:	080002a5 	.word	0x080002a5
 800028c:	08003938 	.word	0x08003938
 8000290:	080002d9 	.word	0x080002d9
 8000294:	200013d0 	.word	0x200013d0
 8000298:	2000027c 	.word	0x2000027c
 800029c:	08003948 	.word	0x08003948
 80002a0:	080002fd 	.word	0x080002fd

080002a4 <TareaLed>:

void TareaLed(void *p)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b0:	4807      	ldr	r0, [pc, #28]	; (80002d0 <TareaLed+0x2c>)
 80002b2:	f000 fc95 	bl	8000be0 <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(semToggleLed,portMAX_DELAY)!=pdTRUE)
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <TareaLed+0x30>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f04f 31ff 	mov.w	r1, #4294967295
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fd76 	bl	8001db0 <xQueueSemaphoreTake>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d0f0      	beq.n	80002ac <TareaLed+0x8>
		{
			//Sal√≠ por timeout o por error.
			//me la doy en la pera.
			ChocarCalesita();
 80002ca:	f000 f839 	bl	8000340 <ChocarCalesita>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002ce:	e7ed      	b.n	80002ac <TareaLed+0x8>
 80002d0:	40011000 	.word	0x40011000
 80002d4:	200013cc 	.word	0x200013cc

080002d8 <TareaTiempo>:
		}
	}
}

void TareaTiempo(void *p)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(250);
 80002e0:	20fa      	movs	r0, #250	; 0xfa
 80002e2:	f002 f8f5 	bl	80024d0 <vTaskDelay>
		xSemaphoreGive(semToggleLed);
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <TareaTiempo+0x20>)
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	2200      	movs	r2, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	f001 fc64 	bl	8001bbc <xQueueGenericSend>
		vTaskDelay(250);
 80002f4:	e7f4      	b.n	80002e0 <TareaTiempo+0x8>
 80002f6:	bf00      	nop
 80002f8:	200013cc 	.word	0x200013cc

080002fc <TareaMutex>:
	}
}

void TareaMutex(void *p)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	pTareaMutex *par = (pTareaMutex*)p;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		xSemaphoreTake(par->mutex,portMAX_DELAY);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	f04f 31ff 	mov.w	r1, #4294967295
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fd4d 	bl	8001db0 <xQueueSemaphoreTake>
			//Zona de mutua exclusi√≥n.
			*(par->var) += par->comportamiento;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	440a      	add	r2, r1
 8000326:	601a      	str	r2, [r3, #0]
		xSemaphoreGive(par->mutex);
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6898      	ldr	r0, [r3, #8]
 800032c:	2300      	movs	r3, #0
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	f001 fc43 	bl	8001bbc <xQueueGenericSend>
		vTaskDelay(2);
 8000336:	2002      	movs	r0, #2
 8000338:	f002 f8ca 	bl	80024d0 <vTaskDelay>
		xSemaphoreTake(par->mutex,portMAX_DELAY);
 800033c:	e7e4      	b.n	8000308 <TareaMutex+0xc>
	...

08000340 <ChocarCalesita>:
	}
}


void ChocarCalesita(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000346:	b672      	cpsid	i
	volatile int32_t i;
	__disable_irq();
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034c:	4806      	ldr	r0, [pc, #24]	; (8000368 <ChocarCalesita+0x28>)
 800034e:	f000 fc47 	bl	8000be0 <HAL_GPIO_TogglePin>
		for(i=0;i<200000; i++);
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e002      	b.n	800035e <ChocarCalesita+0x1e>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <ChocarCalesita+0x2c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	ddf8      	ble.n	8000358 <ChocarCalesita+0x18>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000366:	e7ef      	b.n	8000348 <ChocarCalesita+0x8>
 8000368:	40011000 	.word	0x40011000
 800036c:	00030d3f 	.word	0x00030d3f

08000370 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b090      	sub	sp, #64	; 0x40
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fabf 	bl	8003902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000392:	2301      	movs	r3, #1
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	2301      	movs	r3, #1
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	2302      	movs	r3, #2
 80003a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fc29 	bl	8000c10 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c4:	f000 f878 	bl	80004b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fe94 	bl	8001110 <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ee:	f000 f863 	bl	80004b8 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3740      	adds	r7, #64	; 0x40
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_GPIO_Init+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <MX_GPIO_Init+0x90>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_GPIO_Init+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0310 	and.w	r3, r3, #16
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a17      	ldr	r2, [pc, #92]	; (800048c <MX_GPIO_Init+0x90>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a11      	ldr	r2, [pc, #68]	; (800048c <MX_GPIO_Init+0x90>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045e:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_GPIO_Init+0x94>)
 8000460:	f000 fba6 	bl	8000bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2302      	movs	r3, #2
 8000474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_GPIO_Init+0x94>)
 800047e:	f000 fa3d 	bl	80008fc <HAL_GPIO_Init>

}
 8000482:	bf00      	nop
 8000484:	3720      	adds	r7, #32
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40011000 	.word	0x40011000

08000494 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d101      	bne.n	80004aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004a6:	f000 f92d 	bl	8000704 <HAL_IncTick>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40012c00 	.word	0x40012c00

080004b8 <Error_Handler>:

void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <HAL_MspInit+0x68>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a17      	ldr	r2, [pc, #92]	; (800052c <HAL_MspInit+0x68>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_MspInit+0x68>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_MspInit+0x68>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <HAL_MspInit+0x68>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_MspInit+0x68>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	210f      	movs	r1, #15
 80004fe:	f06f 0001 	mvn.w	r0, #1
 8000502:	f000 f9d0 	bl	80008a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_MspInit+0x6c>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_MspInit+0x6c>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	40010000 	.word	0x40010000

08000534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08c      	sub	sp, #48	; 0x30
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000544:	2200      	movs	r2, #0
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	2019      	movs	r0, #25
 800054a:	f000 f9ac 	bl	80008a6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800054e:	2019      	movs	r0, #25
 8000550:	f000 f9c5 	bl	80008de <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <HAL_InitTick+0x9c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <HAL_InitTick+0x9c>)
 800055a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <HAL_InitTick+0x9c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800056c:	f107 0210 	add.w	r2, r7, #16
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f000 ff34 	bl	80013e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800057c:	f000 ff1e 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8000580:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <HAL_InitTick+0xa0>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	0c9b      	lsrs	r3, r3, #18
 800058c:	3b01      	subs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <HAL_InitTick+0xa4>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <HAL_InitTick+0xa8>)
 8000594:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_InitTick+0xa4>)
 8000598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800059c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_InitTick+0xa4>)
 80005a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_InitTick+0xa4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_InitTick+0xa4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <HAL_InitTick+0xa4>)
 80005b2:	f000 ff65 	bl	8001480 <HAL_TIM_Base_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d104      	bne.n	80005c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <HAL_InitTick+0xa4>)
 80005be:	f000 ff93 	bl	80014e8 <HAL_TIM_Base_Start_IT>
 80005c2:	4603      	mov	r3, r0
 80005c4:	e000      	b.n	80005c8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3730      	adds	r7, #48	; 0x30
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	431bde83 	.word	0x431bde83
 80005d8:	200013f8 	.word	0x200013f8
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <HardFault_Handler+0x4>

080005f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <MemManage_Handler+0x4>

080005f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <BusFault_Handler+0x4>

080005fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <UsageFault_Handler+0x4>

08000604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <TIM1_UP_IRQHandler+0x10>)
 8000616:	f000 ff8a 	bl	800152e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200013f8 	.word	0x200013f8

08000624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <SystemInit+0x5c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <SystemInit+0x5c>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <SystemInit+0x5c>)
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	4911      	ldr	r1, [pc, #68]	; (8000680 <SystemInit+0x5c>)
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <SystemInit+0x60>)
 800063c:	4013      	ands	r3, r2
 800063e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <SystemInit+0x5c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <SystemInit+0x5c>)
 8000646:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800064a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SystemInit+0x5c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <SystemInit+0x5c>)
 8000656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <SystemInit+0x5c>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <SystemInit+0x5c>)
 8000662:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000666:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SystemInit+0x5c>)
 800066a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800066e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SystemInit+0x64>)
 8000672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000676:	609a      	str	r2, [r3, #8]
#endif 
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	f8ff0000 	.word	0xf8ff0000
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800068c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800068e:	e003      	b.n	8000698 <LoopCopyDataInit>

08000690 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000692:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000694:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000696:	3104      	adds	r1, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800069c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800069e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a0:	d3f6      	bcc.n	8000690 <CopyDataInit>
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a4:	e002      	b.n	80006ac <LoopFillZerobss>

080006a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a8:	f842 3b04 	str.w	r3, [r2], #4

080006ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b0:	d3f9      	bcc.n	80006a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff ffb7 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f003 f8f5 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fd61 	bl	8000180 <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r3, =_sidata
 80006c0:	08003990 	.word	0x08003990
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80006cc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80006d0:	2000143c 	.word	0x2000143c

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_Init+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_Init+0x28>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f8d1 	bl	8000890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff20 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f4:	f7ff fee6 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a03      	ldr	r2, [pc, #12]	; (8000724 <HAL_IncTick+0x20>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000008 	.word	0x20000008
 8000724:	20001438 	.word	0x20001438

08000728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20001438 	.word	0x20001438

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <__NVIC_EnableIRQ+0x34>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff4f 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b8:	f7ff ff64 	bl	8000784 <__NVIC_GetPriorityGrouping>
 80008bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f7ff ffb2 	bl	800082c <NVIC_EncodePriority>
 80008c8:	4602      	mov	r2, r0
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff81 	bl	80007d8 <__NVIC_SetPriority>
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff57 	bl	80007a0 <__NVIC_EnableIRQ>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e127      	b.n	8000b60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8116 	bne.w	8000b5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b12      	cmp	r3, #18
 8000934:	d034      	beq.n	80009a0 <HAL_GPIO_Init+0xa4>
 8000936:	2b12      	cmp	r3, #18
 8000938:	d80d      	bhi.n	8000956 <HAL_GPIO_Init+0x5a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d02b      	beq.n	8000996 <HAL_GPIO_Init+0x9a>
 800093e:	2b02      	cmp	r3, #2
 8000940:	d804      	bhi.n	800094c <HAL_GPIO_Init+0x50>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d01c      	beq.n	8000984 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800094a:	e048      	b.n	80009de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094c:	2b03      	cmp	r3, #3
 800094e:	d043      	beq.n	80009d8 <HAL_GPIO_Init+0xdc>
 8000950:	2b11      	cmp	r3, #17
 8000952:	d01b      	beq.n	800098c <HAL_GPIO_Init+0x90>
          break;
 8000954:	e043      	b.n	80009de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000956:	4a89      	ldr	r2, [pc, #548]	; (8000b7c <HAL_GPIO_Init+0x280>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d026      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 800095c:	4a87      	ldr	r2, [pc, #540]	; (8000b7c <HAL_GPIO_Init+0x280>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d806      	bhi.n	8000970 <HAL_GPIO_Init+0x74>
 8000962:	4a87      	ldr	r2, [pc, #540]	; (8000b80 <HAL_GPIO_Init+0x284>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d020      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 8000968:	4a86      	ldr	r2, [pc, #536]	; (8000b84 <HAL_GPIO_Init+0x288>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d01d      	beq.n	80009aa <HAL_GPIO_Init+0xae>
          break;
 800096e:	e036      	b.n	80009de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000970:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <HAL_GPIO_Init+0x28c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d019      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 8000976:	4a85      	ldr	r2, [pc, #532]	; (8000b8c <HAL_GPIO_Init+0x290>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d016      	beq.n	80009aa <HAL_GPIO_Init+0xae>
 800097c:	4a84      	ldr	r2, [pc, #528]	; (8000b90 <HAL_GPIO_Init+0x294>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0xae>
          break;
 8000982:	e02c      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e028      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e023      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	3308      	adds	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e01e      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	330c      	adds	r3, #12
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e019      	b.n	80009de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009b2:	2304      	movs	r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e012      	b.n	80009de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	611a      	str	r2, [r3, #16]
          break;
 80009ca:	e008      	b.n	80009de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	615a      	str	r2, [r3, #20]
          break;
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	d801      	bhi.n	80009e8 <HAL_GPIO_Init+0xec>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	e001      	b.n	80009ec <HAL_GPIO_Init+0xf0>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2bff      	cmp	r3, #255	; 0xff
 80009f2:	d802      	bhi.n	80009fa <HAL_GPIO_Init+0xfe>
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x104>
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	3b08      	subs	r3, #8
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	210f      	movs	r1, #15
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	401a      	ands	r2, r3
 8000a12:	6a39      	ldr	r1, [r7, #32]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 8096 	beq.w	8000b5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <HAL_GPIO_Init+0x298>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a58      	ldr	r2, [pc, #352]	; (8000b94 <HAL_GPIO_Init+0x298>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <HAL_GPIO_Init+0x298>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a46:	4a54      	ldr	r2, [pc, #336]	; (8000b98 <HAL_GPIO_Init+0x29c>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <HAL_GPIO_Init+0x2a0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x19e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4a      	ldr	r2, [pc, #296]	; (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x19a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a49      	ldr	r2, [pc, #292]	; (8000ba4 <HAL_GPIO_Init+0x2a8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x196>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <HAL_GPIO_Init+0x2ac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x192>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x1a0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aac:	493a      	ldr	r1, [pc, #232]	; (8000b98 <HAL_GPIO_Init+0x29c>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4938      	ldr	r1, [pc, #224]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4933      	ldr	r1, [pc, #204]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	492e      	ldr	r1, [pc, #184]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	604b      	str	r3, [r1, #4]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4929      	ldr	r1, [pc, #164]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	4924      	ldr	r1, [pc, #144]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	608b      	str	r3, [r1, #8]
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	491f      	ldr	r1, [pc, #124]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	491a      	ldr	r1, [pc, #104]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60cb      	str	r3, [r1, #12]
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4915      	ldr	r1, [pc, #84]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	fa22 f303 	lsr.w	r3, r2, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f47f aed0 	bne.w	8000910 <HAL_GPIO_Init+0x14>
  }
}
 8000b70:	bf00      	nop
 8000b72:	372c      	adds	r7, #44	; 0x2c
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	10210000 	.word	0x10210000
 8000b80:	10110000 	.word	0x10110000
 8000b84:	10120000 	.word	0x10120000
 8000b88:	10310000 	.word	0x10310000
 8000b8c:	10320000 	.word	0x10320000
 8000b90:	10220000 	.word	0x10220000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40011400 	.word	0x40011400
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bcc:	e003      	b.n	8000bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	041a      	lsls	r2, r3, #16
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	611a      	str	r2, [r3, #16]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	887b      	ldrh	r3, [r7, #2]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e26c      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 8087 	beq.w	8000d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c30:	4b92      	ldr	r3, [pc, #584]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d00c      	beq.n	8000c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c3c:	4b8f      	ldr	r3, [pc, #572]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 030c 	and.w	r3, r3, #12
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	d112      	bne.n	8000c6e <HAL_RCC_OscConfig+0x5e>
 8000c48:	4b8c      	ldr	r3, [pc, #560]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c54:	d10b      	bne.n	8000c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c56:	4b89      	ldr	r3, [pc, #548]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d06c      	beq.n	8000d3c <HAL_RCC_OscConfig+0x12c>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d168      	bne.n	8000d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e246      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c76:	d106      	bne.n	8000c86 <HAL_RCC_OscConfig+0x76>
 8000c78:	4b80      	ldr	r3, [pc, #512]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a7f      	ldr	r2, [pc, #508]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e02e      	b.n	8000ce4 <HAL_RCC_OscConfig+0xd4>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10c      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x98>
 8000c8e:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a7a      	ldr	r2, [pc, #488]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b78      	ldr	r3, [pc, #480]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a77      	ldr	r2, [pc, #476]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e01d      	b.n	8000ce4 <HAL_RCC_OscConfig+0xd4>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb0:	d10c      	bne.n	8000ccc <HAL_RCC_OscConfig+0xbc>
 8000cb2:	4b72      	ldr	r3, [pc, #456]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a71      	ldr	r2, [pc, #452]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a6e      	ldr	r2, [pc, #440]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e00b      	b.n	8000ce4 <HAL_RCC_OscConfig+0xd4>
 8000ccc:	4b6b      	ldr	r3, [pc, #428]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a6a      	ldr	r2, [pc, #424]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b68      	ldr	r3, [pc, #416]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a67      	ldr	r2, [pc, #412]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cec:	f7ff fd1c 	bl	8000728 <HAL_GetTick>
 8000cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf4:	f7ff fd18 	bl	8000728 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	; 0x64
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e1fa      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d06:	4b5d      	ldr	r3, [pc, #372]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f0      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xe4>
 8000d12:	e014      	b.n	8000d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fd08 	bl	8000728 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fd04 	bl	8000728 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e1e6      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2e:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x10c>
 8000d3a:	e000      	b.n	8000d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d063      	beq.n	8000e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4a:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00b      	beq.n	8000d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d56:	4b49      	ldr	r3, [pc, #292]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d11c      	bne.n	8000d9c <HAL_RCC_OscConfig+0x18c>
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d116      	bne.n	8000d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d005      	beq.n	8000d86 <HAL_RCC_OscConfig+0x176>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d001      	beq.n	8000d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e1ba      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	4939      	ldr	r1, [pc, #228]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9a:	e03a      	b.n	8000e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d020      	beq.n	8000de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000daa:	f7ff fcbd 	bl	8000728 <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db2:	f7ff fcb9 	bl	8000728 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e19b      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f0      	beq.n	8000db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4927      	ldr	r1, [pc, #156]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e015      	b.n	8000e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc9c 	bl	8000728 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df4:	f7ff fc98 	bl	8000728 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e17a      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d03a      	beq.n	8000e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d019      	beq.n	8000e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_RCC_OscConfig+0x274>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fc7c 	bl	8000728 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fc78 	bl	8000728 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e15a      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 faf6 	bl	8001444 <RCC_Delay>
 8000e58:	e01c      	b.n	8000e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_RCC_OscConfig+0x274>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e60:	f7ff fc62 	bl	8000728 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e66:	e00f      	b.n	8000e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc5e 	bl	8000728 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d908      	bls.n	8000e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e140      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	42420000 	.word	0x42420000
 8000e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e88:	4b9e      	ldr	r3, [pc, #632]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1e9      	bne.n	8000e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80a6 	beq.w	8000fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea6:	4b97      	ldr	r3, [pc, #604]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10d      	bne.n	8000ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b94      	ldr	r3, [pc, #592]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a93      	ldr	r2, [pc, #588]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b91      	ldr	r3, [pc, #580]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ece:	4b8e      	ldr	r3, [pc, #568]	; (8001108 <HAL_RCC_OscConfig+0x4f8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d118      	bne.n	8000f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eda:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <HAL_RCC_OscConfig+0x4f8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a8a      	ldr	r2, [pc, #552]	; (8001108 <HAL_RCC_OscConfig+0x4f8>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fc1f 	bl	8000728 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eee:	f7ff fc1b 	bl	8000728 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b64      	cmp	r3, #100	; 0x64
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e0fd      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f00:	4b81      	ldr	r3, [pc, #516]	; (8001108 <HAL_RCC_OscConfig+0x4f8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0x312>
 8000f14:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a7a      	ldr	r2, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6213      	str	r3, [r2, #32]
 8000f20:	e02d      	b.n	8000f7e <HAL_RCC_OscConfig+0x36e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x334>
 8000f2a:	4b76      	ldr	r3, [pc, #472]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a75      	ldr	r2, [pc, #468]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	4b73      	ldr	r3, [pc, #460]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a72      	ldr	r2, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	f023 0304 	bic.w	r3, r3, #4
 8000f40:	6213      	str	r3, [r2, #32]
 8000f42:	e01c      	b.n	8000f7e <HAL_RCC_OscConfig+0x36e>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d10c      	bne.n	8000f66 <HAL_RCC_OscConfig+0x356>
 8000f4c:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a6c      	ldr	r2, [pc, #432]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	4b6a      	ldr	r3, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4a69      	ldr	r2, [pc, #420]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6213      	str	r3, [r2, #32]
 8000f64:	e00b      	b.n	8000f7e <HAL_RCC_OscConfig+0x36e>
 8000f66:	4b67      	ldr	r3, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a66      	ldr	r2, [pc, #408]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	6213      	str	r3, [r2, #32]
 8000f72:	4b64      	ldr	r3, [pc, #400]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4a63      	ldr	r2, [pc, #396]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d015      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fbcf 	bl	8000728 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fbcb 	bl	8000728 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e0ab      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa4:	4b57      	ldr	r3, [pc, #348]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0ee      	beq.n	8000f8e <HAL_RCC_OscConfig+0x37e>
 8000fb0:	e014      	b.n	8000fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fbb9 	bl	8000728 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fba:	f7ff fbb5 	bl	8000728 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e095      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd0:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1ee      	bne.n	8000fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d105      	bne.n	8000fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe2:	4b48      	ldr	r3, [pc, #288]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a47      	ldr	r2, [pc, #284]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8081 	beq.w	80010fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b08      	cmp	r3, #8
 8001002:	d061      	beq.n	80010c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d146      	bne.n	800109a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100c:	4b3f      	ldr	r3, [pc, #252]	; (800110c <HAL_RCC_OscConfig+0x4fc>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fb89 	bl	8000728 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fb85 	bl	8000728 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e067      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d108      	bne.n	8001054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	492d      	ldr	r1, [pc, #180]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001054:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a19      	ldr	r1, [r3, #32]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	430b      	orrs	r3, r1
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <HAL_RCC_OscConfig+0x4fc>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fb59 	bl	8000728 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107a:	f7ff fb55 	bl	8000728 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e037      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x46a>
 8001098:	e02f      	b.n	80010fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_RCC_OscConfig+0x4fc>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fb42 	bl	8000728 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff fb3e 	bl	8000728 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e020      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x498>
 80010c6:	e018      	b.n	80010fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e013      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	40007000 	.word	0x40007000
 800110c:	42420060 	.word	0x42420060

08001110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0d0      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001124:	4b6a      	ldr	r3, [pc, #424]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d910      	bls.n	8001154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0207 	bic.w	r2, r3, #7
 800113a:	4965      	ldr	r1, [pc, #404]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0b8      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a58      	ldr	r2, [pc, #352]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001176:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800118e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001190:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	494d      	ldr	r1, [pc, #308]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d040      	beq.n	8001230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d115      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e07f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e073      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06b      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f023 0203 	bic.w	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4936      	ldr	r1, [pc, #216]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001200:	f7ff fa92 	bl	8000728 <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001206:	e00a      	b.n	800121e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001208:	f7ff fa8e 	bl	8000728 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f241 3288 	movw	r2, #5000	; 0x1388
 8001216:	4293      	cmp	r3, r2
 8001218:	d901      	bls.n	800121e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e053      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 020c 	and.w	r2, r3, #12
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	429a      	cmp	r2, r3
 800122e:	d1eb      	bne.n	8001208 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d210      	bcs.n	8001260 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0207 	bic.w	r2, r3, #7
 8001246:	4922      	ldr	r1, [pc, #136]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e032      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4916      	ldr	r1, [pc, #88]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800129e:	f000 f821 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 80012a2:	4601      	mov	r1, r0
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_RCC_ClockConfig+0x1c8>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	fa21 f303 	lsr.w	r3, r1, r3
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1cc>)
 80012b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_RCC_ClockConfig+0x1d0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f938 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	08003970 	.word	0x08003970
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e4:	b490      	push	{r4, r7}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012ec:	1d3c      	adds	r4, r7, #4
 80012ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b04      	cmp	r3, #4
 800131c:	d002      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x40>
 800131e:	2b08      	cmp	r3, #8
 8001320:	d003      	beq.n	800132a <HAL_RCC_GetSysClockFreq+0x46>
 8001322:	e02d      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001326:	623b      	str	r3, [r7, #32]
      break;
 8001328:	e02d      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	0c9b      	lsrs	r3, r3, #18
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001336:	4413      	add	r3, r2
 8001338:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800133c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_RCC_GetSysClockFreq+0xb8>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	0c5b      	lsrs	r3, r3, #17
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001356:	4413      	add	r3, r2
 8001358:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800135c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001362:	fb02 f203 	mul.w	r2, r2, r3
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	fbb2 f3f3 	udiv	r3, r2, r3
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
 800136e:	e004      	b.n	800137a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	623b      	str	r3, [r7, #32]
      break;
 800137e:	e002      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001382:	623b      	str	r3, [r7, #32]
      break;
 8001384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001386:	6a3b      	ldr	r3, [r7, #32]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bc90      	pop	{r4, r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	08003954 	.word	0x08003954
 8001398:	08003964 	.word	0x08003964
 800139c:	40021000 	.word	0x40021000
 80013a0:	007a1200 	.word	0x007a1200
 80013a4:	003d0900 	.word	0x003d0900

080013a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013c0:	f7ff fff2 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013c4:	4601      	mov	r1, r0
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	0adb      	lsrs	r3, r3, #11
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	08003980 	.word	0x08003980

080013e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	220f      	movs	r2, #15
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_GetClockConfig+0x58>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_RCC_GetClockConfig+0x58>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_RCC_GetClockConfig+0x58>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_RCC_GetClockConfig+0x58>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RCC_GetClockConfig+0x5c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0207 	and.w	r2, r3, #7
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000
 8001440:	40022000 	.word	0x40022000

08001444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <RCC_Delay+0x34>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <RCC_Delay+0x38>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0a5b      	lsrs	r3, r3, #9
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001460:	bf00      	nop
  }
  while (Delay --);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f9      	bne.n	8001460 <RCC_Delay+0x1c>
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000000 	.word	0x20000000
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e01d      	b.n	80014ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f815 	bl	80014d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f000 f962 	bl	8001788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d007      	beq.n	8001522 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b02      	cmp	r3, #2
 8001542:	d122      	bne.n	800158a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d11b      	bne.n	800158a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 0202 	mvn.w	r2, #2
 800155a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8ed 	bl	8001750 <HAL_TIM_IC_CaptureCallback>
 8001576:	e005      	b.n	8001584 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f8e0 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f8ef 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b04      	cmp	r3, #4
 8001596:	d122      	bne.n	80015de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d11b      	bne.n	80015de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f06f 0204 	mvn.w	r2, #4
 80015ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8c3 	bl	8001750 <HAL_TIM_IC_CaptureCallback>
 80015ca:	e005      	b.n	80015d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f8b6 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f8c5 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d122      	bne.n	8001632 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11b      	bne.n	8001632 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f06f 0208 	mvn.w	r2, #8
 8001602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2204      	movs	r2, #4
 8001608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f899 	bl	8001750 <HAL_TIM_IC_CaptureCallback>
 800161e:	e005      	b.n	800162c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f88c 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f89b 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b10      	cmp	r3, #16
 800163e:	d122      	bne.n	8001686 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b10      	cmp	r3, #16
 800164c:	d11b      	bne.n	8001686 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f06f 0210 	mvn.w	r2, #16
 8001656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2208      	movs	r2, #8
 800165c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f86f 	bl	8001750 <HAL_TIM_IC_CaptureCallback>
 8001672:	e005      	b.n	8001680 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f862 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f871 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10e      	bne.n	80016b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0201 	mvn.w	r2, #1
 80016aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7fe fef1 	bl	8000494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016bc:	2b80      	cmp	r3, #128	; 0x80
 80016be:	d10e      	bne.n	80016de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	2b80      	cmp	r3, #128	; 0x80
 80016cc:	d107      	bne.n	80016de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8c0 	bl	800185e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e8:	2b40      	cmp	r3, #64	; 0x40
 80016ea:	d10e      	bne.n	800170a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f6:	2b40      	cmp	r3, #64	; 0x40
 80016f8:	d107      	bne.n	800170a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f835 	bl	8001774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b20      	cmp	r3, #32
 8001716:	d10e      	bne.n	8001736 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b20      	cmp	r3, #32
 8001724:	d107      	bne.n	8001736 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0220 	mvn.w	r2, #32
 800172e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f88b 	bl	800184c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
	...

08001788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <TIM_Base_SetConfig+0xb8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00b      	beq.n	80017b8 <TIM_Base_SetConfig+0x30>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a6:	d007      	beq.n	80017b8 <TIM_Base_SetConfig+0x30>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <TIM_Base_SetConfig+0xbc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d003      	beq.n	80017b8 <TIM_Base_SetConfig+0x30>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a25      	ldr	r2, [pc, #148]	; (8001848 <TIM_Base_SetConfig+0xc0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d108      	bne.n	80017ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <TIM_Base_SetConfig+0xb8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00b      	beq.n	80017ea <TIM_Base_SetConfig+0x62>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d007      	beq.n	80017ea <TIM_Base_SetConfig+0x62>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <TIM_Base_SetConfig+0xbc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d003      	beq.n	80017ea <TIM_Base_SetConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <TIM_Base_SetConfig+0xc0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d108      	bne.n	80017fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <TIM_Base_SetConfig+0xb8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d103      	bne.n	8001830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	615a      	str	r2, [r3, #20]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40000400 	.word	0x40000400
 8001848:	40000800 	.word	0x40000800

0800184c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f103 0208 	add.w	r2, r3, #8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f103 0208 	add.w	r2, r3, #8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f103 0208 	add.w	r2, r3, #8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d103      	bne.n	800192c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e00c      	b.n	8001946 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3308      	adds	r3, #8
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e002      	b.n	800193a <vListInsert+0x2e>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d2f6      	bcs.n	8001934 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6892      	ldr	r2, [r2, #8]
 8001992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6852      	ldr	r2, [r2, #4]
 800199c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d103      	bne.n	80019b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
	...

080019d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e8:	f383 8811 	msr	BASEPRI, r3
 80019ec:	f3bf 8f6f 	isb	sy
 80019f0:	f3bf 8f4f 	dsb	sy
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	e7fe      	b.n	80019f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80019f8:	f001 fcc6 	bl	8003388 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	441a      	add	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	441a      	add	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d114      	bne.n	8001a78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01a      	beq.n	8001a8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3310      	adds	r3, #16
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 ffae 	bl	80029bc <xTaskRemoveFromEventList>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <xQueueGenericReset+0xcc>)
 8001a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	e009      	b.n	8001a8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fef7 	bl	8001870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3324      	adds	r3, #36	; 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fef2 	bl	8001870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a8c:	f001 fcaa 	bl	80033e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000ed04 	.word	0xe000ed04

08001aa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <xQueueGenericCreate+0x28>
 8001ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab8:	f383 8811 	msr	BASEPRI, r3
 8001abc:	f3bf 8f6f 	isb	sy
 8001ac0:	f3bf 8f4f 	dsb	sy
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e7fe      	b.n	8001ac6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e004      	b.n	8001ade <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3348      	adds	r3, #72	; 0x48
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fd0a 	bl	80034fc <pvPortMalloc>
 8001ae8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00f      	beq.n	8001b10 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	3348      	adds	r3, #72	; 0x48
 8001af4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f805 	bl	8001b1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001b10:	69bb      	ldr	r3, [r7, #24]
	}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e002      	b.n	8001b3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b48:	2101      	movs	r1, #1
 8001b4a:	69b8      	ldr	r0, [r7, #24]
 8001b4c:	f7ff ff40 	bl	80019d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00e      	beq.n	8001b84 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001b78:	2300      	movs	r3, #0
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f81c 	bl	8001bbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	f7ff ff7b 	bl	8001aa0 <xQueueGenericCreate>
 8001baa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7ff ffd3 	bl	8001b58 <prvInitialiseMutex>

		return pxNewQueue;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
	}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <xQueueGenericSend+0x30>
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bea:	e7fe      	b.n	8001bea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <xQueueGenericSend+0x3e>
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <xQueueGenericSend+0x42>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <xQueueGenericSend+0x44>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <xQueueGenericSend+0x5c>
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
 8001c16:	e7fe      	b.n	8001c16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d103      	bne.n	8001c26 <xQueueGenericSend+0x6a>
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <xQueueGenericSend+0x6e>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <xQueueGenericSend+0x70>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <xQueueGenericSend+0x88>
 8001c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	623b      	str	r3, [r7, #32]
 8001c42:	e7fe      	b.n	8001c42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c44:	f001 f874 	bl	8002d30 <xTaskGetSchedulerState>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <xQueueGenericSend+0x98>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <xQueueGenericSend+0x9c>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <xQueueGenericSend+0x9e>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <xQueueGenericSend+0xb6>
 8001c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	e7fe      	b.n	8001c70 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c72:	f001 fb89 	bl	8003388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <xQueueGenericSend+0xcc>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d129      	bne.n	8001cdc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c8e:	f000 f9ae 	bl	8001fee <prvCopyDataToQueue>
 8001c92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	3324      	adds	r3, #36	; 0x24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fe8b 	bl	80029bc <xTaskRemoveFromEventList>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cac:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <xQueueGenericSend+0x1f0>)
 8001cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	e00a      	b.n	8001cd4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <xQueueGenericSend+0x1f0>)
 8001cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cd4:	f001 fb86 	bl	80033e4 <vPortExitCritical>
				return pdPASS;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e063      	b.n	8001da4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ce2:	f001 fb7f 	bl	80033e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e05c      	b.n	8001da4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fec3 	bl	8002a80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cfe:	f001 fb71 	bl	80033e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d02:	f000 fc77 	bl	80025f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d06:	f001 fb3f 	bl	8003388 <vPortEnterCritical>
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d16:	d103      	bne.n	8001d20 <xQueueGenericSend+0x164>
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d103      	bne.n	8001d36 <xQueueGenericSend+0x17a>
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d36:	f001 fb55 	bl	80033e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d3a:	1d3a      	adds	r2, r7, #4
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 feb2 	bl	8002aac <xTaskCheckForTimeOut>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d124      	bne.n	8001d98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d50:	f000 fa1f 	bl	8002192 <prvIsQueueFull>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d018      	beq.n	8001d8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fe06 	bl	8002974 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d6a:	f000 f9aa 	bl	80020c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d6e:	f000 fc4f 	bl	8002610 <xTaskResumeAll>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f af7c 	bne.w	8001c72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <xQueueGenericSend+0x1f0>)
 8001d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	e772      	b.n	8001c72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d8e:	f000 f998 	bl	80020c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d92:	f000 fc3d 	bl	8002610 <xTaskResumeAll>
 8001d96:	e76c      	b.n	8001c72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d9a:	f000 f992 	bl	80020c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d9e:	f000 fc37 	bl	8002610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001da2:	2300      	movs	r3, #0
		}
	}
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3738      	adds	r7, #56	; 0x38
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	e000ed04 	.word	0xe000ed04

08001db0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	; 0x38
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <xQueueSemaphoreTake+0x30>
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	623b      	str	r3, [r7, #32]
 8001dde:	e7fe      	b.n	8001dde <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <xQueueSemaphoreTake+0x4c>
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e7fe      	b.n	8001dfa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dfc:	f000 ff98 	bl	8002d30 <xTaskGetSchedulerState>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <xQueueSemaphoreTake+0x5c>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <xQueueSemaphoreTake+0x60>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <xQueueSemaphoreTake+0x62>
 8001e10:	2300      	movs	r3, #0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <xQueueSemaphoreTake+0x7a>
 8001e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e7fe      	b.n	8001e28 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e2a:	f001 faad 	bl	8003388 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d024      	beq.n	8001e84 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001e4a:	f001 f937 	bl	80030bc <pvTaskIncrementMutexHeldCount>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00f      	beq.n	8001e7c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	3310      	adds	r3, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fdab 	bl	80029bc <xTaskRemoveFromEventList>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <xQueueSemaphoreTake+0x20c>)
 8001e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e7c:	f001 fab2 	bl	80033e4 <vPortExitCritical>
				return pdPASS;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e096      	b.n	8001fb2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d110      	bne.n	8001eac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <xQueueSemaphoreTake+0xf4>
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e7fe      	b.n	8001ea2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001ea4:	f001 fa9e 	bl	80033e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e082      	b.n	8001fb2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fde2 	bl	8002a80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ec0:	f001 fa90 	bl	80033e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ec4:	f000 fb96 	bl	80025f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ec8:	f001 fa5e 	bl	8003388 <vPortEnterCritical>
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d103      	bne.n	8001ee2 <xQueueSemaphoreTake+0x132>
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d103      	bne.n	8001ef8 <xQueueSemaphoreTake+0x148>
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ef8:	f001 fa74 	bl	80033e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001efc:	463a      	mov	r2, r7
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fdd1 	bl	8002aac <xTaskCheckForTimeOut>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d132      	bne.n	8001f76 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f12:	f000 f928 	bl	8002166 <prvIsQueueEmpty>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d026      	beq.n	8001f6a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8001f24:	f001 fa30 	bl	8003388 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 ff1d 	bl	8002d6c <xTaskPriorityInherit>
 8001f32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001f34:	f001 fa56 	bl	80033e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	3324      	adds	r3, #36	; 0x24
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fd17 	bl	8002974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f48:	f000 f8bb 	bl	80020c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f4c:	f000 fb60 	bl	8002610 <xTaskResumeAll>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f af69 	bne.w	8001e2a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <xQueueSemaphoreTake+0x20c>)
 8001f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	e75f      	b.n	8001e2a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6c:	f000 f8a9 	bl	80020c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f70:	f000 fb4e 	bl	8002610 <xTaskResumeAll>
 8001f74:	e759      	b.n	8001e2a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f78:	f000 f8a3 	bl	80020c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f7c:	f000 fb48 	bl	8002610 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f82:	f000 f8f0 	bl	8002166 <prvIsQueueEmpty>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f43f af4e 	beq.w	8001e2a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001f94:	f001 f9f8 	bl	8003388 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001f98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f9a:	f000 f811 	bl	8001fc0 <prvGetDisinheritPriorityAfterTimeout>
 8001f9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 ffea 	bl	8002f80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001fac:	f001 fa1a 	bl	80033e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001fb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3738      	adds	r7, #56	; 0x38
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000ed04 	.word	0xe000ed04

08001fc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e001      	b.n	8001fe2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
	}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d14d      	bne.n	80020b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 ff2d 	bl	8002e78 <xTaskPriorityDisinherit>
 800201e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	e043      	b.n	80020b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d119      	bne.n	8002062 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6898      	ldr	r0, [r3, #8]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	461a      	mov	r2, r3
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	f001 fc57 	bl	80038ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	441a      	add	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d32b      	bcc.n	80020b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e026      	b.n	80020b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	68d8      	ldr	r0, [r3, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	461a      	mov	r2, r3
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	f001 fc3d 	bl	80038ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	425b      	negs	r3, r3
 800207c:	441a      	add	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d207      	bcs.n	800209e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	425b      	negs	r3, r3
 8002098:	441a      	add	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d105      	bne.n	80020b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80020b8:	697b      	ldr	r3, [r7, #20]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80020ca:	f001 f95d 	bl	8003388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020d6:	e011      	b.n	80020fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3324      	adds	r3, #36	; 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fc69 	bl	80029bc <xTaskRemoveFromEventList>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80020f0:	f000 fd3c 	bl	8002b6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	dce9      	bgt.n	80020d8 <prvUnlockQueue+0x16>
 8002104:	e000      	b.n	8002108 <prvUnlockQueue+0x46>
					break;
 8002106:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002110:	f001 f968 	bl	80033e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002114:	f001 f938 	bl	8003388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800211e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002120:	e011      	b.n	8002146 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3310      	adds	r3, #16
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fc44 	bl	80029bc <xTaskRemoveFromEventList>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800213a:	f000 fd17 	bl	8002b6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800213e:	7bbb      	ldrb	r3, [r7, #14]
 8002140:	3b01      	subs	r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800214a:	2b00      	cmp	r3, #0
 800214c:	dce9      	bgt.n	8002122 <prvUnlockQueue+0x60>
 800214e:	e000      	b.n	8002152 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002150:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800215a:	f001 f943 	bl	80033e4 <vPortExitCritical>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800216e:	f001 f90b 	bl	8003388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800217a:	2301      	movs	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e001      	b.n	8002184 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002184:	f001 f92e 	bl	80033e4 <vPortExitCritical>

	return xReturn;
 8002188:	68fb      	ldr	r3, [r7, #12]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800219a:	f001 f8f5 	bl	8003388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d102      	bne.n	80021b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e001      	b.n	80021b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021b4:	f001 f916 	bl	80033e4 <vPortExitCritical>

	return xReturn;
 80021b8:	68fb      	ldr	r3, [r7, #12]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08e      	sub	sp, #56	; 0x38
 80021c6:	af04      	add	r7, sp, #16
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <xTaskCreateStatic+0x28>
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	e7fe      	b.n	80021e8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <xTaskCreateStatic+0x42>
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e7fe      	b.n	8002202 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002204:	2350      	movs	r3, #80	; 0x50
 8002206:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b50      	cmp	r3, #80	; 0x50
 800220c:	d009      	beq.n	8002222 <xTaskCreateStatic+0x60>
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e7fe      	b.n	8002220 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01e      	beq.n	8002266 <xTaskCreateStatic+0xa4>
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01b      	beq.n	8002266 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002236:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	2202      	movs	r2, #2
 800223c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002240:	2300      	movs	r3, #0
 8002242:	9303      	str	r3, [sp, #12]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f850 	bl	80022fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800225e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002260:	f000 f8cc 	bl	80023fc <prvAddNewTaskToReadyList>
 8002264:	e001      	b.n	800226a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800226a:	697b      	ldr	r3, [r7, #20]
	}
 800226c:	4618      	mov	r0, r3
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af04      	add	r7, sp, #16
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f001 f937 	bl	80034fc <pvPortMalloc>
 800228e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00e      	beq.n	80022b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002296:	2050      	movs	r0, #80	; 0x50
 8002298:	f001 f930 	bl	80034fc <pvPortMalloc>
 800229c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
 80022aa:	e005      	b.n	80022b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022ac:	6978      	ldr	r0, [r7, #20]
 80022ae:	f001 f9e7 	bl	8003680 <vPortFree>
 80022b2:	e001      	b.n	80022b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d017      	beq.n	80022ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	2300      	movs	r3, #0
 80022ca:	9303      	str	r3, [sp, #12]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	9302      	str	r3, [sp, #8]
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f80e 	bl	80022fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022e2:	69f8      	ldr	r0, [r7, #28]
 80022e4:	f000 f88a 	bl	80023fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022e8:	2301      	movs	r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e002      	b.n	80022f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022f4:	69bb      	ldr	r3, [r7, #24]
	}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002316:	3b01      	subs	r3, #1
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f023 0307 	bic.w	r3, r3, #7
 8002324:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <prvInitialiseNewTask+0x46>
 8002330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e7fe      	b.n	8002342 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	e012      	b.n	8002370 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	7819      	ldrb	r1, [r3, #0]
 8002352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	3334      	adds	r3, #52	; 0x34
 800235a:	460a      	mov	r2, r1
 800235c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0b      	cmp	r3, #11
 8002374:	d9e9      	bls.n	800234a <prvInitialiseNewTask+0x4c>
 8002376:	e000      	b.n	800237a <prvInitialiseNewTask+0x7c>
		{
			break;
 8002378:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	2b06      	cmp	r3, #6
 8002386:	d901      	bls.n	800238c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002388:	2306      	movs	r3, #6
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	3304      	adds	r3, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fa83 	bl	80018ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	3318      	adds	r3, #24
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fa7e 	bl	80018ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	f1c3 0207 	rsb	r2, r3, #7
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	2200      	movs	r2, #0
 80023cc:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	69b8      	ldr	r0, [r7, #24]
 80023dc:	f000 fee8 	bl	80031b0 <pxPortInitialiseStack>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023f2:	bf00      	nop
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002404:	f000 ffc0 	bl	8003388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <prvAddNewTaskToReadyList+0xb8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <prvAddNewTaskToReadyList+0xb8>)
 8002410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <prvAddNewTaskToReadyList+0xbc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800241a:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <prvAddNewTaskToReadyList+0xbc>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <prvAddNewTaskToReadyList+0xb8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d110      	bne.n	800244a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002428:	f000 fbc4 	bl	8002bb4 <prvInitialiseTaskLists>
 800242c:	e00d      	b.n	800244a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <prvAddNewTaskToReadyList+0xc0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <prvAddNewTaskToReadyList+0xbc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	429a      	cmp	r2, r3
 8002442:	d802      	bhi.n	800244a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002444:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <prvAddNewTaskToReadyList+0xbc>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <prvAddNewTaskToReadyList+0xc4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <prvAddNewTaskToReadyList+0xc4>)
 8002452:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	2201      	movs	r2, #1
 800245a:	409a      	lsls	r2, r3
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <prvAddNewTaskToReadyList+0xc8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4313      	orrs	r3, r2
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <prvAddNewTaskToReadyList+0xc8>)
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <prvAddNewTaskToReadyList+0xcc>)
 8002474:	441a      	add	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7ff fa22 	bl	80018c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002482:	f000 ffaf 	bl	80033e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <prvAddNewTaskToReadyList+0xc0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <prvAddNewTaskToReadyList+0xbc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <prvAddNewTaskToReadyList+0xd0>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000380 	.word	0x20000380
 80024b8:	20000280 	.word	0x20000280
 80024bc:	2000038c 	.word	0x2000038c
 80024c0:	2000039c 	.word	0x2000039c
 80024c4:	20000388 	.word	0x20000388
 80024c8:	20000284 	.word	0x20000284
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <vTaskDelay+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <vTaskDelay+0x2e>
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e7fe      	b.n	80024fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80024fe:	f000 f879 	bl	80025f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002502:	2100      	movs	r1, #0
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fded 	bl	80030e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800250a:	f000 f881 	bl	8002610 <xTaskResumeAll>
 800250e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <vTaskDelay+0x64>)
 8002518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200003a8 	.word	0x200003a8
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002546:	463a      	mov	r2, r7
 8002548:	1d39      	adds	r1, r7, #4
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd fdfe 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	9202      	str	r2, [sp, #8]
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	460a      	mov	r2, r1
 8002566:	491d      	ldr	r1, [pc, #116]	; (80025dc <vTaskStartScheduler+0xa4>)
 8002568:	481d      	ldr	r0, [pc, #116]	; (80025e0 <vTaskStartScheduler+0xa8>)
 800256a:	f7ff fe2a 	bl	80021c2 <xTaskCreateStatic>
 800256e:	4602      	mov	r2, r0
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <vTaskStartScheduler+0xac>)
 8002572:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <vTaskStartScheduler+0xac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e001      	b.n	8002586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d115      	bne.n	80025b8 <vTaskStartScheduler+0x80>
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <vTaskStartScheduler+0xb0>)
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <vTaskStartScheduler+0xb4>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <vTaskStartScheduler+0xb8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025b2:	f000 fe79 	bl	80032a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025b6:	e00d      	b.n	80025d4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d109      	bne.n	80025d4 <vTaskStartScheduler+0x9c>
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e7fe      	b.n	80025d2 <vTaskStartScheduler+0x9a>
}
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	08003968 	.word	0x08003968
 80025e0:	08002b85 	.word	0x08002b85
 80025e4:	200003a4 	.word	0x200003a4
 80025e8:	200003a0 	.word	0x200003a0
 80025ec:	2000038c 	.word	0x2000038c
 80025f0:	20000384 	.word	0x20000384

080025f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <vTaskSuspendAll+0x18>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	4a03      	ldr	r2, [pc, #12]	; (800260c <vTaskSuspendAll+0x18>)
 8002600:	6013      	str	r3, [r2, #0]
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200003a8 	.word	0x200003a8

08002610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <xTaskResumeAll+0x114>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <xTaskResumeAll+0x2a>
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	e7fe      	b.n	8002638 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800263a:	f000 fea5 	bl	8003388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <xTaskResumeAll+0x114>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a37      	ldr	r2, [pc, #220]	; (8002724 <xTaskResumeAll+0x114>)
 8002646:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <xTaskResumeAll+0x114>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d161      	bne.n	8002714 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <xTaskResumeAll+0x118>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05d      	beq.n	8002714 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002658:	e02e      	b.n	80026b8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <xTaskResumeAll+0x11c>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3318      	adds	r3, #24
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f988 	bl	800197c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3304      	adds	r3, #4
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f983 	bl	800197c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	2201      	movs	r2, #1
 800267c:	409a      	lsls	r2, r3
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <xTaskResumeAll+0x120>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <xTaskResumeAll+0x120>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4a27      	ldr	r2, [pc, #156]	; (8002734 <xTaskResumeAll+0x124>)
 8002696:	441a      	add	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3304      	adds	r3, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7ff f911 	bl	80018c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <xTaskResumeAll+0x128>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <xTaskResumeAll+0x12c>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <xTaskResumeAll+0x11c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1cc      	bne.n	800265a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026c6:	f000 fb0f 	bl	8002ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <xTaskResumeAll+0x130>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026d6:	f000 f837 	bl	8002748 <xTaskIncrementTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <xTaskResumeAll+0x12c>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f1      	bne.n	80026d6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <xTaskResumeAll+0x130>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <xTaskResumeAll+0x12c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <xTaskResumeAll+0x134>)
 8002706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002714:	f000 fe66 	bl	80033e4 <vPortExitCritical>

	return xAlreadyYielded;
 8002718:	68bb      	ldr	r3, [r7, #8]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200003a8 	.word	0x200003a8
 8002728:	20000380 	.word	0x20000380
 800272c:	20000340 	.word	0x20000340
 8002730:	20000388 	.word	0x20000388
 8002734:	20000284 	.word	0x20000284
 8002738:	20000280 	.word	0x20000280
 800273c:	20000394 	.word	0x20000394
 8002740:	20000390 	.word	0x20000390
 8002744:	e000ed04 	.word	0xe000ed04

08002748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002752:	4b50      	ldr	r3, [pc, #320]	; (8002894 <xTaskIncrementTick+0x14c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 808c 	bne.w	8002874 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800275c:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <xTaskIncrementTick+0x150>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <xTaskIncrementTick+0x150>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11f      	bne.n	80027b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002770:	4b4a      	ldr	r3, [pc, #296]	; (800289c <xTaskIncrementTick+0x154>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <xTaskIncrementTick+0x46>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	e7fe      	b.n	800278c <xTaskIncrementTick+0x44>
 800278e:	4b43      	ldr	r3, [pc, #268]	; (800289c <xTaskIncrementTick+0x154>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <xTaskIncrementTick+0x158>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a40      	ldr	r2, [pc, #256]	; (800289c <xTaskIncrementTick+0x154>)
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <xTaskIncrementTick+0x158>)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <xTaskIncrementTick+0x15c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <xTaskIncrementTick+0x15c>)
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	f000 fa9c 	bl	8002ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <xTaskIncrementTick+0x160>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d34d      	bcc.n	8002856 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <xTaskIncrementTick+0x154>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <xTaskIncrementTick+0x80>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <xTaskIncrementTick+0x82>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <xTaskIncrementTick+0x160>)
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	601a      	str	r2, [r3, #0]
					break;
 80027d6:	e03e      	b.n	8002856 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027d8:	4b30      	ldr	r3, [pc, #192]	; (800289c <xTaskIncrementTick+0x154>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d203      	bcs.n	80027f8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80027f0:	4a2d      	ldr	r2, [pc, #180]	; (80028a8 <xTaskIncrementTick+0x160>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
						break;
 80027f6:	e02e      	b.n	8002856 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3304      	adds	r3, #4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f8bd 	bl	800197c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3318      	adds	r3, #24
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f8b4 	bl	800197c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2201      	movs	r2, #1
 800281a:	409a      	lsls	r2, r3
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <xTaskIncrementTick+0x164>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	4a22      	ldr	r2, [pc, #136]	; (80028ac <xTaskIncrementTick+0x164>)
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <xTaskIncrementTick+0x168>)
 8002834:	441a      	add	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3304      	adds	r3, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f7ff f842 	bl	80018c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <xTaskIncrementTick+0x16c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d3b4      	bcc.n	80027ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002850:	2301      	movs	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002854:	e7b1      	b.n	80027ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <xTaskIncrementTick+0x16c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285c:	4914      	ldr	r1, [pc, #80]	; (80028b0 <xTaskIncrementTick+0x168>)
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d907      	bls.n	800287e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800286e:	2301      	movs	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e004      	b.n	800287e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <xTaskIncrementTick+0x170>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <xTaskIncrementTick+0x170>)
 800287c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <xTaskIncrementTick+0x174>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002886:	2301      	movs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800288a:	697b      	ldr	r3, [r7, #20]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200003a8 	.word	0x200003a8
 8002898:	20000384 	.word	0x20000384
 800289c:	20000338 	.word	0x20000338
 80028a0:	2000033c 	.word	0x2000033c
 80028a4:	20000398 	.word	0x20000398
 80028a8:	200003a0 	.word	0x200003a0
 80028ac:	20000388 	.word	0x20000388
 80028b0:	20000284 	.word	0x20000284
 80028b4:	20000280 	.word	0x20000280
 80028b8:	20000390 	.word	0x20000390
 80028bc:	20000394 	.word	0x20000394

080028c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <vTaskSwitchContext+0xa0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <vTaskSwitchContext+0xa4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028d4:	e03e      	b.n	8002954 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <vTaskSwitchContext+0xa4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <vTaskSwitchContext+0xa8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f1c3 031f 	rsb	r3, r3, #31
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	491e      	ldr	r1, [pc, #120]	; (800296c <vTaskSwitchContext+0xac>)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e7fe      	b.n	8002918 <vTaskSwitchContext+0x58>
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4a11      	ldr	r2, [pc, #68]	; (800296c <vTaskSwitchContext+0xac>)
 8002926:	4413      	add	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3308      	adds	r3, #8
 800293c:	429a      	cmp	r2, r3
 800293e:	d104      	bne.n	800294a <vTaskSwitchContext+0x8a>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a07      	ldr	r2, [pc, #28]	; (8002970 <vTaskSwitchContext+0xb0>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	200003a8 	.word	0x200003a8
 8002964:	20000394 	.word	0x20000394
 8002968:	20000388 	.word	0x20000388
 800296c:	20000284 	.word	0x20000284
 8002970:	20000280 	.word	0x20000280

08002974 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <vTaskPlaceOnEventList+0x24>
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e7fe      	b.n	8002996 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <vTaskPlaceOnEventList+0x44>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3318      	adds	r3, #24
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe ffb3 	bl	800190c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029a6:	2101      	movs	r1, #1
 80029a8:	6838      	ldr	r0, [r7, #0]
 80029aa:	f000 fb9b 	bl	80030e4 <prvAddCurrentTaskToDelayedList>
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000280 	.word	0x20000280

080029bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <xTaskRemoveFromEventList+0x2a>
 80029d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e7fe      	b.n	80029e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3318      	adds	r3, #24
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe ffc6 	bl	800197c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <xTaskRemoveFromEventList+0xac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11c      	bne.n	8002a32 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	3304      	adds	r3, #4
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe ffbd 	bl	800197c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	2201      	movs	r2, #1
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <xTaskRemoveFromEventList+0xb0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <xTaskRemoveFromEventList+0xb0>)
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <xTaskRemoveFromEventList+0xb4>)
 8002a22:	441a      	add	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f7fe ff4b 	bl	80018c6 <vListInsertEnd>
 8002a30:	e005      	b.n	8002a3e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3318      	adds	r3, #24
 8002a36:	4619      	mov	r1, r3
 8002a38:	480e      	ldr	r0, [pc, #56]	; (8002a74 <xTaskRemoveFromEventList+0xb8>)
 8002a3a:	f7fe ff44 	bl	80018c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <xTaskRemoveFromEventList+0xbc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d905      	bls.n	8002a58 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <xTaskRemoveFromEventList+0xc0>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e001      	b.n	8002a5c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002a5c:	697b      	ldr	r3, [r7, #20]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200003a8 	.word	0x200003a8
 8002a6c:	20000388 	.word	0x20000388
 8002a70:	20000284 	.word	0x20000284
 8002a74:	20000340 	.word	0x20000340
 8002a78:	20000280 	.word	0x20000280
 8002a7c:	20000394 	.word	0x20000394

08002a80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <vTaskInternalSetTimeOutState+0x24>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <vTaskInternalSetTimeOutState+0x28>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	605a      	str	r2, [r3, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000398 	.word	0x20000398
 8002aa8:	20000384 	.word	0x20000384

08002aac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <xTaskCheckForTimeOut+0x24>
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e7fe      	b.n	8002ace <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <xTaskCheckForTimeOut+0x3e>
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e7fe      	b.n	8002ae8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002aea:	f000 fc4d 	bl	8003388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <xTaskCheckForTimeOut+0xb8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d102      	bne.n	8002b0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e023      	b.n	8002b56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <xTaskCheckForTimeOut+0xbc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d007      	beq.n	8002b2a <xTaskCheckForTimeOut+0x7e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d302      	bcc.n	8002b2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	e015      	b.n	8002b56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d20b      	bcs.n	8002b4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff9d 	bl	8002a80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e004      	b.n	8002b56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002b56:	f000 fc45 	bl	80033e4 <vPortExitCritical>

	return xReturn;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000384 	.word	0x20000384
 8002b68:	20000398 	.word	0x20000398

08002b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <vTaskMissedYield+0x14>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000394 	.word	0x20000394

08002b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b8c:	f000 f852 	bl	8002c34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <prvIdleTask+0x28>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d9f9      	bls.n	8002b8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <prvIdleTask+0x2c>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ba8:	e7f0      	b.n	8002b8c <prvIdleTask+0x8>
 8002baa:	bf00      	nop
 8002bac:	20000284 	.word	0x20000284
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	e00c      	b.n	8002bda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <prvInitialiseTaskLists+0x60>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fe4e 	bl	8001870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d9ef      	bls.n	8002bc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <prvInitialiseTaskLists+0x64>)
 8002be2:	f7fe fe45 	bl	8001870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <prvInitialiseTaskLists+0x68>)
 8002be8:	f7fe fe42 	bl	8001870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <prvInitialiseTaskLists+0x6c>)
 8002bee:	f7fe fe3f 	bl	8001870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bf2:	480c      	ldr	r0, [pc, #48]	; (8002c24 <prvInitialiseTaskLists+0x70>)
 8002bf4:	f7fe fe3c 	bl	8001870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bf8:	480b      	ldr	r0, [pc, #44]	; (8002c28 <prvInitialiseTaskLists+0x74>)
 8002bfa:	f7fe fe39 	bl	8001870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <prvInitialiseTaskLists+0x78>)
 8002c00:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <prvInitialiseTaskLists+0x64>)
 8002c02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <prvInitialiseTaskLists+0x7c>)
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <prvInitialiseTaskLists+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000284 	.word	0x20000284
 8002c18:	20000310 	.word	0x20000310
 8002c1c:	20000324 	.word	0x20000324
 8002c20:	20000340 	.word	0x20000340
 8002c24:	20000354 	.word	0x20000354
 8002c28:	2000036c 	.word	0x2000036c
 8002c2c:	20000338 	.word	0x20000338
 8002c30:	2000033c 	.word	0x2000033c

08002c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c3a:	e019      	b.n	8002c70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c3c:	f000 fba4 	bl	8003388 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <prvCheckTasksWaitingTermination+0x4c>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe fe95 	bl	800197c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <prvCheckTasksWaitingTermination+0x50>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <prvCheckTasksWaitingTermination+0x50>)
 8002c5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c66:	f000 fbbd 	bl	80033e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f80e 	bl	8002c8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e1      	bne.n	8002c3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000354 	.word	0x20000354
 8002c84:	20000380 	.word	0x20000380
 8002c88:	20000368 	.word	0x20000368

08002c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fcec 	bl	8003680 <vPortFree>
				vPortFree( pxTCB );
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fce9 	bl	8003680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002cae:	e017      	b.n	8002ce0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d103      	bne.n	8002cc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fce0 	bl	8003680 <vPortFree>
	}
 8002cc0:	e00e      	b.n	8002ce0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d009      	beq.n	8002ce0 <prvDeleteTCB+0x54>
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e7fe      	b.n	8002cde <prvDeleteTCB+0x52>
	}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <prvResetNextTaskUnblockTime+0x40>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <prvResetNextTaskUnblockTime+0x14>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <prvResetNextTaskUnblockTime+0x16>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <prvResetNextTaskUnblockTime+0x44>)
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d0a:	e008      	b.n	8002d1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <prvResetNextTaskUnblockTime+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <prvResetNextTaskUnblockTime+0x44>)
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	20000338 	.word	0x20000338
 8002d2c:	200003a0 	.word	0x200003a0

08002d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <xTaskGetSchedulerState+0x34>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	e008      	b.n	8002d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <xTaskGetSchedulerState+0x38>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	e001      	b.n	8002d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d56:	687b      	ldr	r3, [r7, #4]
	}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000038c 	.word	0x2000038c
 8002d68:	200003a8 	.word	0x200003a8

08002d6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d06e      	beq.n	8002e60 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <xTaskPriorityInherit+0x100>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d25e      	bcs.n	8002e4e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db06      	blt.n	8002da6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <xTaskPriorityInherit+0x100>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	f1c3 0207 	rsb	r2, r3, #7
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6959      	ldr	r1, [r3, #20]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <xTaskPriorityInherit+0x104>)
 8002db8:	4413      	add	r3, r2
 8002dba:	4299      	cmp	r1, r3
 8002dbc:	d101      	bne.n	8002dc2 <xTaskPriorityInherit+0x56>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xTaskPriorityInherit+0x58>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03a      	beq.n	8002e3e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fdd5 	bl	800197c <uxListRemove>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4924      	ldr	r1, [pc, #144]	; (8002e70 <xTaskPriorityInherit+0x104>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <xTaskPriorityInherit+0x98>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2201      	movs	r2, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <xTaskPriorityInherit+0x108>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <xTaskPriorityInherit+0x108>)
 8002e02:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <xTaskPriorityInherit+0x100>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	2201      	movs	r2, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <xTaskPriorityInherit+0x108>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <xTaskPriorityInherit+0x108>)
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <xTaskPriorityInherit+0x104>)
 8002e2e:	441a      	add	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f7fe fd45 	bl	80018c6 <vListInsertEnd>
 8002e3c:	e004      	b.n	8002e48 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <xTaskPriorityInherit+0x100>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e008      	b.n	8002e60 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <xTaskPriorityInherit+0x100>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d201      	bcs.n	8002e60 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002e60:	68fb      	ldr	r3, [r7, #12]
	}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000280 	.word	0x20000280
 8002e70:	20000284 	.word	0x20000284
 8002e74:	20000388 	.word	0x20000388

08002e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d06c      	beq.n	8002f68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <xTaskPriorityDisinherit+0xfc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d009      	beq.n	8002eac <xTaskPriorityDisinherit+0x34>
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e7fe      	b.n	8002eaa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <xTaskPriorityDisinherit+0x50>
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	e7fe      	b.n	8002ec6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d044      	beq.n	8002f68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d140      	bne.n	8002f68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fd46 	bl	800197c <uxListRemove>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d115      	bne.n	8002f22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	491f      	ldr	r1, [pc, #124]	; (8002f78 <xTaskPriorityDisinherit+0x100>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xTaskPriorityDisinherit+0xaa>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	2201      	movs	r2, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <xTaskPriorityDisinherit+0x104>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <xTaskPriorityDisinherit+0x104>)
 8002f20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	f1c3 0207 	rsb	r2, r3, #7
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <xTaskPriorityDisinherit+0x104>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <xTaskPriorityDisinherit+0x104>)
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <xTaskPriorityDisinherit+0x100>)
 8002f56:	441a      	add	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f7fe fcb1 	bl	80018c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f68:	697b      	ldr	r3, [r7, #20]
	}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000280 	.word	0x20000280
 8002f78:	20000284 	.word	0x20000284
 8002f7c:	20000388 	.word	0x20000388

08002f80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8086 	beq.w	80030a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e7fe      	b.n	8002fb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d902      	bls.n	8002fc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	e002      	b.n	8002fcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d067      	beq.n	80030a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d162      	bne.n	80030a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d109      	bne.n	8002ffe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	e7fe      	b.n	8002ffc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	db04      	blt.n	800301c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f1c3 0207 	rsb	r2, r3, #7
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6959      	ldr	r1, [r3, #20]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4a22      	ldr	r2, [pc, #136]	; (80030b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800302c:	4413      	add	r3, r2
 800302e:	4299      	cmp	r1, r3
 8003030:	d101      	bne.n	8003036 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d034      	beq.n	80030a6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	3304      	adds	r3, #4
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fc9b 	bl	800197c <uxListRemove>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d115      	bne.n	8003078 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	4918      	ldr	r1, [pc, #96]	; (80030b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	2201      	movs	r2, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4013      	ands	r3, r2
 8003074:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003076:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003098:	441a      	add	r2, r3
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	3304      	adds	r3, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f7fe fc10 	bl	80018c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030a6:	bf00      	nop
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000280 	.word	0x20000280
 80030b4:	20000284 	.word	0x20000284
 80030b8:	20000388 	.word	0x20000388

080030bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ce:	3201      	adds	r2, #1
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80030d2:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80030d4:	681b      	ldr	r3, [r3, #0]
	}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000280 	.word	0x20000280

080030e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fc3e 	bl	800197c <uxListRemove>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4013      	ands	r3, r2
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <prvAddCurrentTaskToDelayedList+0xb8>)
 800311c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d10a      	bne.n	800313c <prvAddCurrentTaskToDelayedList+0x58>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	481a      	ldr	r0, [pc, #104]	; (80031a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003136:	f7fe fbc6 	bl	80018c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800313a:	e026      	b.n	800318a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d209      	bcs.n	8003168 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fe fbd3 	bl	800190c <vListInsert>
}
 8003166:	e010      	b.n	800318a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f7fe fbc9 	bl	800190c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d202      	bcs.n	800318a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003184:	4a09      	ldr	r2, [pc, #36]	; (80031ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6013      	str	r3, [r2, #0]
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000384 	.word	0x20000384
 8003198:	20000280 	.word	0x20000280
 800319c:	20000388 	.word	0x20000388
 80031a0:	2000036c 	.word	0x2000036c
 80031a4:	2000033c 	.word	0x2000033c
 80031a8:	20000338 	.word	0x20000338
 80031ac:	200003a0 	.word	0x200003a0

080031b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3b04      	subs	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b04      	subs	r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f023 0201 	bic.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3b04      	subs	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031e0:	4a08      	ldr	r2, [pc, #32]	; (8003204 <pxPortInitialiseStack+0x54>)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3b14      	subs	r3, #20
 80031ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3b20      	subs	r3, #32
 80031f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	08003209 	.word	0x08003209

08003208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <prvTaskExitError+0x4c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d009      	beq.n	8003230 <prvTaskExitError+0x28>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e7fe      	b.n	800322e <prvTaskExitError+0x26>
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003242:	bf00      	nop
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0fc      	beq.n	8003244 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	2000000c 	.word	0x2000000c
	...

08003260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <pxCurrentTCBConst2>)
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	6808      	ldr	r0, [r1, #0]
 8003266:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800326a:	f380 8809 	msr	PSP, r0
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f380 8811 	msr	BASEPRI, r0
 800327a:	f04e 0e0d 	orr.w	lr, lr, #13
 800327e:	4770      	bx	lr

08003280 <pxCurrentTCBConst2>:
 8003280:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop

08003288 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003288:	4806      	ldr	r0, [pc, #24]	; (80032a4 <prvPortStartFirstTask+0x1c>)
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	6800      	ldr	r0, [r0, #0]
 800328e:	f380 8808 	msr	MSP, r0
 8003292:	b662      	cpsie	i
 8003294:	b661      	cpsie	f
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	df00      	svc	0
 80032a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032a2:	bf00      	nop
 80032a4:	e000ed08 	.word	0xe000ed08

080032a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <xPortStartScheduler+0xcc>)
 80032b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4b29      	ldr	r3, [pc, #164]	; (8003378 <xPortStartScheduler+0xd0>)
 80032d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <xPortStartScheduler+0xd4>)
 80032d8:	2207      	movs	r2, #7
 80032da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032dc:	e009      	b.n	80032f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80032de:	4b27      	ldr	r3, [pc, #156]	; (800337c <xPortStartScheduler+0xd4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <xPortStartScheduler+0xd4>)
 80032e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d0ef      	beq.n	80032de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <xPortStartScheduler+0xd4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	d009      	beq.n	800331e <xPortStartScheduler+0x76>
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e7fe      	b.n	800331c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <xPortStartScheduler+0xd4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <xPortStartScheduler+0xd4>)
 8003326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <xPortStartScheduler+0xd4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003330:	4a12      	ldr	r2, [pc, #72]	; (800337c <xPortStartScheduler+0xd4>)
 8003332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <xPortStartScheduler+0xd8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <xPortStartScheduler+0xd8>)
 8003342:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <xPortStartScheduler+0xd8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <xPortStartScheduler+0xd8>)
 800334e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003354:	f000 f8b0 	bl	80034b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <xPortStartScheduler+0xdc>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800335e:	f7ff ff93 	bl	8003288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003362:	f7ff faad 	bl	80028c0 <vTaskSwitchContext>
	prvTaskExitError();
 8003366:	f7ff ff4f 	bl	8003208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	e000e400 	.word	0xe000e400
 8003378:	200003ac 	.word	0x200003ac
 800337c:	200003b0 	.word	0x200003b0
 8003380:	e000ed20 	.word	0xe000ed20
 8003384:	2000000c 	.word	0x2000000c

08003388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <vPortEnterCritical+0x54>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <vPortEnterCritical+0x54>)
 80033a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <vPortEnterCritical+0x54>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10e      	bne.n	80033d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <vPortEnterCritical+0x58>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <vPortEnterCritical+0x48>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	e7fe      	b.n	80033ce <vPortEnterCritical+0x46>
	}
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c
 80033e0:	e000ed04 	.word	0xe000ed04

080033e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <vPortExitCritical+0x48>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <vPortExitCritical+0x22>
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	e7fe      	b.n	8003404 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <vPortExitCritical+0x48>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	4a07      	ldr	r2, [pc, #28]	; (800342c <vPortExitCritical+0x48>)
 800340e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <vPortExitCritical+0x48>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <vPortExitCritical+0x3e>
 8003418:	2300      	movs	r3, #0
 800341a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	2000000c 	.word	0x2000000c

08003430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003430:	f3ef 8009 	mrs	r0, PSP
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <pxCurrentTCBConst>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003440:	6010      	str	r0, [r2, #0]
 8003442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003446:	f04f 0050 	mov.w	r0, #80	; 0x50
 800344a:	f380 8811 	msr	BASEPRI, r0
 800344e:	f7ff fa37 	bl	80028c0 <vTaskSwitchContext>
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f380 8811 	msr	BASEPRI, r0
 800345a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	6808      	ldr	r0, [r1, #0]
 8003462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003466:	f380 8809 	msr	PSP, r0
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	4770      	bx	lr

08003470 <pxCurrentTCBConst>:
 8003470:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003490:	f7ff f95a 	bl	8002748 <xTaskIncrementTick>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <SysTick_Handler+0x3c>)
 800349c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	e000ed04 	.word	0xe000ed04

080034b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <vPortSetupTimerInterrupt+0x30>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <vPortSetupTimerInterrupt+0x34>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <vPortSetupTimerInterrupt+0x38>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <vPortSetupTimerInterrupt+0x3c>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	099b      	lsrs	r3, r3, #6
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <vPortSetupTimerInterrupt+0x40>)
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034da:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <vPortSetupTimerInterrupt+0x30>)
 80034dc:	2207      	movs	r2, #7
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	e000e010 	.word	0xe000e010
 80034ec:	e000e018 	.word	0xe000e018
 80034f0:	20000000 	.word	0x20000000
 80034f4:	10624dd3 	.word	0x10624dd3
 80034f8:	e000e014 	.word	0xe000e014

080034fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003508:	f7ff f874 	bl	80025f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800350c:	4b57      	ldr	r3, [pc, #348]	; (800366c <pvPortMalloc+0x170>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003514:	f000 f90c 	bl	8003730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <pvPortMalloc+0x174>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 808c 	bne.w	800363e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01c      	beq.n	8003566 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800352c:	2208      	movs	r2, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	2b00      	cmp	r3, #0
 800353c:	d013      	beq.n	8003566 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f023 0307 	bic.w	r3, r3, #7
 8003544:	3308      	adds	r3, #8
 8003546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <pvPortMalloc+0x6a>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e7fe      	b.n	8003564 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d068      	beq.n	800363e <pvPortMalloc+0x142>
 800356c:	4b41      	ldr	r3, [pc, #260]	; (8003674 <pvPortMalloc+0x178>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d863      	bhi.n	800363e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003576:	4b40      	ldr	r3, [pc, #256]	; (8003678 <pvPortMalloc+0x17c>)
 8003578:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <pvPortMalloc+0x17c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003580:	e004      	b.n	800358c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	d903      	bls.n	800359e <pvPortMalloc+0xa2>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f1      	bne.n	8003582 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <pvPortMalloc+0x170>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d04a      	beq.n	800363e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	4413      	add	r3, r2
 80035b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	2308      	movs	r3, #8
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d91e      	bls.n	8003608 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <pvPortMalloc+0xf4>
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	e7fe      	b.n	80035ee <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003602:	69b8      	ldr	r0, [r7, #24]
 8003604:	f000 f8f6 	bl	80037f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003608:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <pvPortMalloc+0x178>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <pvPortMalloc+0x178>)
 8003614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <pvPortMalloc+0x178>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <pvPortMalloc+0x180>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d203      	bcs.n	800362a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <pvPortMalloc+0x178>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <pvPortMalloc+0x180>)
 8003628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <pvPortMalloc+0x174>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	431a      	orrs	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800363e:	f7fe ffe7 	bl	8002610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <pvPortMalloc+0x164>
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e7fe      	b.n	800365e <pvPortMalloc+0x162>
	return pvReturn;
 8003660:	69fb      	ldr	r3, [r7, #28]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3728      	adds	r7, #40	; 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200013bc 	.word	0x200013bc
 8003670:	200013c8 	.word	0x200013c8
 8003674:	200013c0 	.word	0x200013c0
 8003678:	200013b4 	.word	0x200013b4
 800367c:	200013c4 	.word	0x200013c4

08003680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d046      	beq.n	8003720 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003692:	2308      	movs	r3, #8
 8003694:	425b      	negs	r3, r3
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4413      	add	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <vPortFree+0xa8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <vPortFree+0x42>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e7fe      	b.n	80036c0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <vPortFree+0x5e>
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	e7fe      	b.n	80036dc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <vPortFree+0xa8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d019      	beq.n	8003720 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d115      	bne.n	8003720 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <vPortFree+0xa8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	401a      	ands	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003704:	f7fe ff76 	bl	80025f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <vPortFree+0xac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4413      	add	r3, r2
 8003712:	4a06      	ldr	r2, [pc, #24]	; (800372c <vPortFree+0xac>)
 8003714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003716:	6938      	ldr	r0, [r7, #16]
 8003718:	f000 f86c 	bl	80037f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800371c:	f7fe ff78 	bl	8002610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003720:	bf00      	nop
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200013c8 	.word	0x200013c8
 800372c:	200013c0 	.word	0x200013c0

08003730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800373a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <prvHeapInit+0xac>)
 800373e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3307      	adds	r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <prvHeapInit+0xac>)
 8003760:	4413      	add	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <prvHeapInit+0xb0>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <prvHeapInit+0xb0>)
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800377c:	2208      	movs	r2, #8
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0307 	bic.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <prvHeapInit+0xb4>)
 8003790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <prvHeapInit+0xb4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <prvHeapInit+0xb4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <prvHeapInit+0xb4>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <prvHeapInit+0xb8>)
 80037be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a09      	ldr	r2, [pc, #36]	; (80037ec <prvHeapInit+0xbc>)
 80037c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <prvHeapInit+0xc0>)
 80037ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	200003b4 	.word	0x200003b4
 80037e0:	200013b4 	.word	0x200013b4
 80037e4:	200013bc 	.word	0x200013bc
 80037e8:	200013c4 	.word	0x200013c4
 80037ec:	200013c0 	.word	0x200013c0
 80037f0:	200013c8 	.word	0x200013c8

080037f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <prvInsertBlockIntoFreeList+0xa8>)
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e002      	b.n	8003808 <prvInsertBlockIntoFreeList+0x14>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	d8f7      	bhi.n	8003802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d108      	bne.n	8003836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	441a      	add	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d118      	bne.n	800387c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <prvInsertBlockIntoFreeList+0xac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d00d      	beq.n	8003872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e008      	b.n	8003884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <prvInsertBlockIntoFreeList+0xac>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e003      	b.n	8003884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d002      	beq.n	8003892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	200013b4 	.word	0x200013b4
 80038a0:	200013bc 	.word	0x200013bc

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	2500      	movs	r5, #0
 80038a8:	4e0c      	ldr	r6, [pc, #48]	; (80038dc <__libc_init_array+0x38>)
 80038aa:	4c0d      	ldr	r4, [pc, #52]	; (80038e0 <__libc_init_array+0x3c>)
 80038ac:	1ba4      	subs	r4, r4, r6
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	42a5      	cmp	r5, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	f000 f82e 	bl	8003914 <_init>
 80038b8:	2500      	movs	r5, #0
 80038ba:	4e0a      	ldr	r6, [pc, #40]	; (80038e4 <__libc_init_array+0x40>)
 80038bc:	4c0a      	ldr	r4, [pc, #40]	; (80038e8 <__libc_init_array+0x44>)
 80038be:	1ba4      	subs	r4, r4, r6
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	42a5      	cmp	r5, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038cc:	4798      	blx	r3
 80038ce:	3501      	adds	r5, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d6:	4798      	blx	r3
 80038d8:	3501      	adds	r5, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	08003988 	.word	0x08003988
 80038e0:	08003988 	.word	0x08003988
 80038e4:	08003988 	.word	0x08003988
 80038e8:	0800398c 	.word	0x0800398c

080038ec <memcpy>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	1e43      	subs	r3, r0, #1
 80038f0:	440a      	add	r2, r1
 80038f2:	4291      	cmp	r1, r2
 80038f4:	d100      	bne.n	80038f8 <memcpy+0xc>
 80038f6:	bd10      	pop	{r4, pc}
 80038f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003900:	e7f7      	b.n	80038f2 <memcpy+0x6>

08003902 <memset>:
 8003902:	4603      	mov	r3, r0
 8003904:	4402      	add	r2, r0
 8003906:	4293      	cmp	r3, r2
 8003908:	d100      	bne.n	800390c <memset+0xa>
 800390a:	4770      	bx	lr
 800390c:	f803 1b01 	strb.w	r1, [r3], #1
 8003910:	e7f9      	b.n	8003906 <memset+0x4>
	...

08003914 <_init>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr

08003920 <_fini>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	bf00      	nop
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr
