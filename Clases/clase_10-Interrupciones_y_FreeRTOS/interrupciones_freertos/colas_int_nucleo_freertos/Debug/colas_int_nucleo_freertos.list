
colas_int_nucleo_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000548c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b8  080057b8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a04  200001e0  080059a0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004be4  080059a0  00024be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a65  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ece  00000000  00000000  00037c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003be48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049f4  00000000  00000000  0003cff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee82  00000000  00000000  000419e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096a39  00000000  00000000  00050866  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e729f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000503c  00000000  00000000  000e731c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005614 	.word	0x08005614

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08005614 	.word	0x08005614

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <inicializar_arrebote>:
#include "arrebote.h"

void inicializar_arrebote(arrebote *s, uint8_t activo_en_cero, uint16_t debounce)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
 80004ec:	4613      	mov	r3, r2
 80004ee:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	883a      	ldrh	r2, [r7, #0]
 80004f4:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks=0;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero)?1:0;
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf14      	ite	ne
 8000502:	2301      	movne	r3, #1
 8000504:	2300      	moveq	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t)BTN_LIBRE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t)BTN_PRESIONADO;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	719a      	strb	r2, [r3, #6]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <chequear_arrebote>:

void chequear_arrebote(arrebote *s, uint32_t estado)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	79db      	ldrb	r3, [r3, #7]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4053      	eors	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]

	switch (s->estado)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d866      	bhi.n	8000626 <chequear_arrebote+0xfa>
 8000558:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <chequear_arrebote+0x34>)
 800055a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055e:	bf00      	nop
 8000560:	08000571 	.word	0x08000571
 8000564:	08000593 	.word	0x08000593
 8000568:	080005c9 	.word	0x080005c9
 800056c:	080005eb 	.word	0x080005eb
	{
	case 0:
		if (boton)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d006      	beq.n	8000584 <chequear_arrebote+0x58>
		{
			s->debounce_ticks = s->debounce;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	885a      	ldrh	r2, [r3, #2]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	719a      	strb	r2, [r3, #6]
		break;
 8000590:	e049      	b.n	8000626 <chequear_arrebote+0xfa>
	case 1:
		if (!(--(s->debounce_ticks)))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	3b01      	subs	r3, #1
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	801a      	strh	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d13c      	bne.n	8000620 <chequear_arrebote+0xf4>
		{
			if (boton)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d009      	beq.n	80005c0 <chequear_arrebote+0x94>
			{
				s->estado_pin = BTN_PRESIONADO;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2202      	movs	r2, #2
 80005bc:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 0;
			}
		}
		break;
 80005be:	e02f      	b.n	8000620 <chequear_arrebote+0xf4>
				s->estado = 0;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	711a      	strb	r2, [r3, #4]
		break;
 80005c6:	e02b      	b.n	8000620 <chequear_arrebote+0xf4>
	case 2:
		if (!boton)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <chequear_arrebote+0xb0>
		{
			s->debounce_ticks = s->debounce;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	885a      	ldrh	r2, [r3, #2]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2203      	movs	r2, #3
 80005da:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	719a      	strb	r2, [r3, #6]
		break;
 80005e8:	e01d      	b.n	8000626 <chequear_arrebote+0xfa>
	case 3:
		if (!(--(s->debounce_ticks)))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	801a      	strh	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d112      	bne.n	8000624 <chequear_arrebote+0xf8>
		{
			if (!boton)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d109      	bne.n	8000618 <chequear_arrebote+0xec>
			{
				s->estado_pin = BTN_LIBRE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 2;
			}
		}
		break;
 8000616:	e005      	b.n	8000624 <chequear_arrebote+0xf8>
				s->estado = 2;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2202      	movs	r2, #2
 800061c:	711a      	strb	r2, [r3, #4]
		break;
 800061e:	e001      	b.n	8000624 <chequear_arrebote+0xf8>
		break;
 8000620:	bf00      	nop
 8000622:	e000      	b.n	8000626 <chequear_arrebote+0xfa>
		break;
 8000624:	bf00      	nop
	}
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <hay_flanco_arrebote>:

int hay_flanco_arrebote(arrebote *s)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO) && (s->estado_anterior_pin == BTN_LIBRE);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d105      	bne.n	8000650 <hay_flanco_arrebote+0x1c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <hay_flanco_arrebote+0x1c>
 800064c:	2301      	movs	r3, #1
 800064e:	e000      	b.n	8000652 <hay_flanco_arrebote+0x1e>
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <tarea_boton>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tarea_boton(void *p)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uint32_t estado_led = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
	uint32_t tics_led = TICS_LEDS;
 800066c:	237d      	movs	r3, #125	; 0x7d
 800066e:	60bb      	str	r3, [r7, #8]
	inicializar_arrebote(&boton_b1, TRUE, DEBOUNCE_BTN_MS);
 8000670:	2214      	movs	r2, #20
 8000672:	2101      	movs	r1, #1
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <tarea_boton+0x68>)
 8000676:	f7ff ff33 	bl	80004e0 <inicializar_arrebote>
	for(;;)
	{
		chequear_arrebote(&boton_b1, HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <tarea_boton+0x6c>)
 8000680:	f000 fe7e 	bl	8001380 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	4619      	mov	r1, r3
 8000688:	480f      	ldr	r0, [pc, #60]	; (80006c8 <tarea_boton+0x68>)
 800068a:	f7ff ff4f 	bl	800052c <chequear_arrebote>
		if(hay_flanco_arrebote(&boton_b1))
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <tarea_boton+0x68>)
 8000690:	f7ff ffd0 	bl	8000634 <hay_flanco_arrebote>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <tarea_boton+0x42>
		{
			estado_led^=1;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f083 0301 	eor.w	r3, r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
		}
		if(!--tics_led)
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d108      	bne.n	80006c0 <tarea_boton+0x60>
		{
			tics_led = TICS_LEDS;
 80006ae:	237d      	movs	r3, #125	; 0x7d
 80006b0:	60bb      	str	r3, [r7, #8]
			if(estado_led)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <tarea_boton+0x60>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006b8:	2120      	movs	r1, #32
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <tarea_boton+0x70>)
 80006bc:	f000 fe91 	bl	80013e2 <HAL_GPIO_TogglePin>
		}
		vTaskDelay(1/portTICK_RATE_MS);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f003 fa9f 	bl	8003c04 <vTaskDelay>
		chequear_arrebote(&boton_b1, HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80006c6:	e7d8      	b.n	800067a <tarea_boton+0x1a>
 80006c8:	20004b58 	.word	0x20004b58
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020000 	.word	0x40020000

080006d4 <tarea_serie>:
	}
}

void tarea_serie(void *p)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	uint8_t dato;
	for(;;)
	{
		dato = toupper(serieFreeRTOS_getchar());
 80006dc:	f000 fa60 	bl	8000ba0 <serieFreeRTOS_getchar>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	f004 ff56 	bl	8005594 <__locale_ctype_ptr>
 80006e8:	4602      	mov	r2, r0
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d102      	bne.n	8000700 <tarea_serie+0x2c>
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	3b20      	subs	r3, #32
 80006fe:	e000      	b.n	8000702 <tarea_serie+0x2e>
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	73bb      	strb	r3, [r7, #14]
		serieFreeRTOS_putchar(dato);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fa36 	bl	8000b78 <serieFreeRTOS_putchar>
		dato = toupper(serieFreeRTOS_getchar());
 800070c:	e7e6      	b.n	80006dc <tarea_serie+0x8>

0800070e <USART2_IRQHandler>:
	}
}

void USART2_IRQHandler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
	serieFreeRTOS_IRQ();
 8000712:	f000 f995 	bl	8000a40 <serieFreeRTOS_IRQ>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb87 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f83b 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 f8cf 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072e:	f000 f8a3 	bl	8000878 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000732:	f002 f8f5 	bl	8002920 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <main+0x64>)
 8000738:	2100      	movs	r1, #0
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <main+0x68>)
 800073c:	f002 f95a 	bl	80029f4 <osThreadNew>
 8000740:	4602      	mov	r2, r0
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <main+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  serieFreeRTOS_inicializar(&huart2, 64);
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	4810      	ldr	r0, [pc, #64]	; (800078c <main+0x70>)
 800074a:	f000 f9d5 	bl	8000af8 <serieFreeRTOS_inicializar>

  xTaskCreate(	tarea_boton,
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	490d      	ldr	r1, [pc, #52]	; (8000790 <main+0x74>)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <main+0x78>)
 800075e:	f003 f90d 	bl	800397c <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL,
				tskIDLE_PRIORITY+1,
				NULL);

  xTaskCreate(	tarea_serie,
 8000762:	2300      	movs	r3, #0
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000770:	4909      	ldr	r1, [pc, #36]	; (8000798 <main+0x7c>)
 8000772:	480a      	ldr	r0, [pc, #40]	; (800079c <main+0x80>)
 8000774:	f003 f902 	bl	800397c <xTaskCreate>
				NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000778:	f002 f906 	bl	8002988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0x60>
 800077e:	bf00      	nop
 8000780:	08005668 	.word	0x08005668
 8000784:	080009ad 	.word	0x080009ad
 8000788:	20004b14 	.word	0x20004b14
 800078c:	20004b18 	.word	0x20004b18
 8000790:	08005638 	.word	0x08005638
 8000794:	08000661 	.word	0x08000661
 8000798:	08005640 	.word	0x08005640
 800079c:	080006d5 	.word	0x080006d5

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 ff1b 	bl	80055ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <SystemClock_Config+0xd0>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a28      	ldr	r2, [pc, #160]	; (8000870 <SystemClock_Config+0xd0>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <SystemClock_Config+0xd0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <SystemClock_Config+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <SystemClock_Config+0xd4>)
 80007ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000814:	2310      	movs	r3, #16
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000818:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800081e:	2304      	movs	r3, #4
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000822:	2307      	movs	r3, #7
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fdf4 	bl	8001418 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000836:	f000 f8d3 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f84e 	bl	80018f8 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000862:	f000 f8bd 	bl	80009e0 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f001 fc64 	bl	800217c <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f891 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20004b18 	.word	0x20004b18
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a2c      	ldr	r2, [pc, #176]	; (800099c <MX_GPIO_Init+0xd0>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a25      	ldr	r2, [pc, #148]	; (800099c <MX_GPIO_Init+0xd0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <MX_GPIO_Init+0xd0>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_GPIO_Init+0xd0>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	4812      	ldr	r0, [pc, #72]	; (80009a0 <MX_GPIO_Init+0xd4>)
 8000958:	f000 fd2a 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_GPIO_Init+0xd8>)
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_GPIO_Init+0xdc>)
 8000972:	f000 fb83 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2320      	movs	r3, #32
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0xd4>)
 800098e:	f000 fb75 	bl	800107c <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	10210000 	.word	0x10210000
 80009a8:	40020800 	.word	0x40020800

080009ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f002 f8c3 	bl	8002b40 <osDelay>
 80009ba:	e7fb      	b.n	80009b4 <StartDefaultTask+0x8>

080009bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ce:	f000 fa53 	bl	8000e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010000 	.word	0x40010000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <TareaTxSerie>:
static QueueHandle_t cola_rx;
static uint8_t enviando_serie;


static void TareaTxSerie(void *p)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(uxQueueMessagesWaiting(cola_tx)>0 && (enviando_serie == 0))
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <TareaTxSerie+0x44>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fdda 	bl	80035b6 <uxQueueMessagesWaiting>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d010      	beq.n	8000a2a <TareaTxSerie+0x3a>
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <TareaTxSerie+0x48>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10c      	bne.n	8000a2a <TareaTxSerie+0x3a>
		{
			enviando_serie = 1;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <TareaTxSerie+0x48>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
			__HAL_UART_ENABLE_IT(mi_uart, UART_IT_TXE);
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <TareaTxSerie+0x4c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <TareaTxSerie+0x4c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a28:	60da      	str	r2, [r3, #12]
		}
		vTaskDelay(CHEQUEAR_SERIE_TX_MS);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f003 f8ea 	bl	8003c04 <vTaskDelay>
		if(uxQueueMessagesWaiting(cola_tx)>0 && (enviando_serie == 0))
 8000a30:	e7e2      	b.n	80009f8 <TareaTxSerie+0x8>
 8000a32:	bf00      	nop
 8000a34:	20000200 	.word	0x20000200
 8000a38:	20000208 	.word	0x20000208
 8000a3c:	200001fc 	.word	0x200001fc

08000a40 <serieFreeRTOS_IRQ>:
	}
}

void serieFreeRTOS_IRQ(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken;
	BaseType_t ret;
	uint8_t dato;
	if(__HAL_UART_GET_FLAG(mi_uart,UART_FLAG_RXNE))
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <serieFreeRTOS_IRQ+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b20      	cmp	r3, #32
 8000a54:	d10d      	bne.n	8000a72 <serieFreeRTOS_IRQ+0x32>
	{
		dato = mi_uart->Instance->DR;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <serieFreeRTOS_IRQ+0xa4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	71fb      	strb	r3, [r7, #7]
		xQueueSendFromISR(cola_rx,&dato, &pxHigherPriorityTaskWoken);
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <serieFreeRTOS_IRQ+0xa8>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	f107 0208 	add.w	r2, r7, #8
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f002 fbb5 	bl	80031dc <xQueueGenericSendFromISR>
	}
	if(__HAL_UART_GET_FLAG(mi_uart,UART_FLAG_TXE))
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <serieFreeRTOS_IRQ+0xa4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	2b80      	cmp	r3, #128	; 0x80
 8000a80:	d121      	bne.n	8000ac6 <serieFreeRTOS_IRQ+0x86>
	{

		ret = xQueueReceiveFromISR(cola_tx, &dato, &pxHigherPriorityTaskWoken);
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <serieFreeRTOS_IRQ+0xac>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	1df9      	adds	r1, r7, #7
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fd15 	bl	80034bc <xQueueReceiveFromISR>
 8000a92:	60f8      	str	r0, [r7, #12]
		if(ret == pdTRUE)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d108      	bne.n	8000aac <serieFreeRTOS_IRQ+0x6c>
		{
			mi_uart->Instance->DR = dato;
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <serieFreeRTOS_IRQ+0xa4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
			enviando_serie = 1;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <serieFreeRTOS_IRQ+0xb0>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e00c      	b.n	8000ac6 <serieFreeRTOS_IRQ+0x86>
		}
		else
		{
			enviando_serie = 0;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <serieFreeRTOS_IRQ+0xb0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(mi_uart, UART_IT_TXE);
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <serieFreeRTOS_IRQ+0xa4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <serieFreeRTOS_IRQ+0xa4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac4:	60da      	str	r2, [r3, #12]
		}
	}
	portEND_SWITCHING_ISR(pxHigherPriorityTaskWoken);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d007      	beq.n	8000adc <serieFreeRTOS_IRQ+0x9c>
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <serieFreeRTOS_IRQ+0xb4>)
 8000ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	f3bf 8f4f 	dsb	sy
 8000ad8:	f3bf 8f6f 	isb	sy
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200001fc 	.word	0x200001fc
 8000ae8:	20000204 	.word	0x20000204
 8000aec:	20000200 	.word	0x20000200
 8000af0:	20000208 	.word	0x20000208
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <serieFreeRTOS_inicializar>:


void serieFreeRTOS_inicializar(UART_HandleTypeDef *huart, uint32_t len_colas)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	enviando_serie = 0;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <serieFreeRTOS_inicializar+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
	mi_uart = huart;
 8000b08:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <serieFreeRTOS_inicializar+0x6c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
	cola_rx=xQueueCreate(len_colas,sizeof(uint8_t));
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2101      	movs	r1, #1
 8000b12:	6838      	ldr	r0, [r7, #0]
 8000b14:	f002 fa05 	bl	8002f22 <xQueueGenericCreate>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <serieFreeRTOS_inicializar+0x70>)
 8000b1c:	601a      	str	r2, [r3, #0]
	cola_tx=xQueueCreate(len_colas,sizeof(uint8_t));
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f002 f9fd 	bl	8002f22 <xQueueGenericCreate>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <serieFreeRTOS_inicializar+0x74>)
 8000b2c:	601a      	str	r2, [r3, #0]
	xTaskCreate(TareaTxSerie,"serie",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY+1,NULL);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	2301      	movs	r3, #1
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2300      	movs	r3, #0
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <serieFreeRTOS_inicializar+0x78>)
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <serieFreeRTOS_inicializar+0x7c>)
 8000b3e:	f002 ff1d 	bl	800397c <xTaskCreate>
	__HAL_UART_ENABLE_IT(mi_uart, UART_IT_RXNE);
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <serieFreeRTOS_inicializar+0x6c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <serieFreeRTOS_inicializar+0x6c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0220 	orr.w	r2, r2, #32
 8000b54:	60da      	str	r2, [r3, #12]
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000208 	.word	0x20000208
 8000b64:	200001fc 	.word	0x200001fc
 8000b68:	20000204 	.word	0x20000204
 8000b6c:	20000200 	.word	0x20000200
 8000b70:	08005648 	.word	0x08005648
 8000b74:	080009f1 	.word	0x080009f1

08000b78 <serieFreeRTOS_putchar>:

void serieFreeRTOS_putchar(uint8_t dato)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	xQueueSend(cola_tx,&dato,portMAX_DELAY);
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <serieFreeRTOS_putchar+0x24>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	1df9      	adds	r1, r7, #7
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8e:	f002 fa2b 	bl	8002fe8 <xQueueGenericSend>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000200 	.word	0x20000200

08000ba0 <serieFreeRTOS_getchar>:

uint8_t serieFreeRTOS_getchar(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	uint8_t dato;
	xQueueReceive(cola_rx, &dato, portMAX_DELAY);
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <serieFreeRTOS_getchar+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1df9      	adds	r1, r7, #7
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 fba7 	bl	8003304 <xQueueReceive>
	return dato;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000204 	.word	0x20000204

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(PendSV_IRQn,15,0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210f      	movs	r1, #15
 8000c06:	f06f 0001 	mvn.w	r0, #1
 8000c0a:	f000 fa0d 	bl	8001028 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_UART_MspInit+0x94>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d133      	bne.n	8000ca6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_UART_MspInit+0x98>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c76:	230c      	movs	r3, #12
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c86:	2307      	movs	r3, #7
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_UART_MspInit+0x9c>)
 8000c92:	f000 f9f3 	bl	800107c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2106      	movs	r1, #6
 8000c9a:	2026      	movs	r0, #38	; 0x26
 8000c9c:	f000 f9c4 	bl	8001028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca0:	2026      	movs	r0, #38	; 0x26
 8000ca2:	f000 f9dd 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	f000 f9a9 	bl	8001028 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cd6:	2019      	movs	r0, #25
 8000cd8:	f000 f9c2 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_InitTick+0xa0>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_InitTick+0xa0>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_InitTick+0xa0>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf8:	f107 0210 	add.w	r2, r7, #16
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 ffea 	bl	8001cdc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d08:	f000 ffd4 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8000d0c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <HAL_InitTick+0xac>)
 8000d20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d3e:	f000 ffff 	bl	8001d40 <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d104      	bne.n	8000d52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d4a:	f001 f82e 	bl	8001daa <HAL_TIM_Base_Start_IT>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	431bde83 	.word	0x431bde83
 8000d64:	20004b60 	.word	0x20004b60
 8000d68:	40010000 	.word	0x40010000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000da6:	f001 f824 	bl	8001df2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20004b60 	.word	0x20004b60

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SystemInit+0x28>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <SystemInit+0x28>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SystemInit+0x28>)
 8000dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dce:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000de4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000de6:	e003      	b.n	8000df0 <LoopCopyDataInit>

08000de8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dee:	3104      	adds	r1, #4

08000df0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000df4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000df8:	d3f6      	bcc.n	8000de8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dfc:	e002      	b.n	8000e04 <LoopFillZerobss>

08000dfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e00:	f842 3b04 	str.w	r3, [r2], #4

08000e04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e08:	d3f9      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd3 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f004 fb9d 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fc83 	bl	800071c <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000e1c:	080057c0 	.word	0x080057c0
  ldr  r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e24:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000e28:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000e2c:	20004be4 	.word	0x20004be4

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f8d8 	bl	8001012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ff2a 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff feac 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20004ba0 	.word	0x20004ba0

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20004ba0 	.word	0x20004ba0

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff4c 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103a:	f7ff ff61 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 800103e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff ffb1 	bl	8000fac <NVIC_EncodePriority>
 800104a:	4602      	mov	r2, r0
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff80 	bl	8000f58 <__NVIC_SetPriority>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff54 	bl	8000f1c <__NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e159      	b.n	800134c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8148 	bne.w	8001346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d00b      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0xfc>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a2 	beq.w	8001346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <HAL_GPIO_Init+0x2e4>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a55      	ldr	r2, [pc, #340]	; (8001360 <HAL_GPIO_Init+0x2e4>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_GPIO_Init+0x2e4>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_GPIO_Init+0x2e8>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_GPIO_Init+0x2ec>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x202>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a47      	ldr	r2, [pc, #284]	; (800136c <HAL_GPIO_Init+0x2f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x1fe>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a46      	ldr	r2, [pc, #280]	; (8001370 <HAL_GPIO_Init+0x2f4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x1fa>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a45      	ldr	r2, [pc, #276]	; (8001374 <HAL_GPIO_Init+0x2f8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x1f6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a44      	ldr	r2, [pc, #272]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x1f2>
 800126a:	2304      	movs	r3, #4
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800126e:	2307      	movs	r3, #7
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x204>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x204>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4934      	ldr	r1, [pc, #208]	; (8001364 <HAL_GPIO_Init+0x2e8>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_GPIO_Init+0x300>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c2:	4a2e      	ldr	r2, [pc, #184]	; (800137c <HAL_GPIO_Init+0x300>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <HAL_GPIO_Init+0x300>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ec:	4a23      	ldr	r2, [pc, #140]	; (800137c <HAL_GPIO_Init+0x300>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_GPIO_Init+0x300>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_GPIO_Init+0x300>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_GPIO_Init+0x300>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_GPIO_Init+0x300>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f aea2 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	3724      	adds	r7, #36	; 0x24
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	401a      	ands	r2, r3
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d104      	bne.n	8001406 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	041a      	lsls	r2, r3, #16
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001404:	e002      	b.n	800140c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e25b      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d075      	beq.n	8001522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	4ba3      	ldr	r3, [pc, #652]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d00c      	beq.n	800145c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4ba0      	ldr	r3, [pc, #640]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144a:	2b08      	cmp	r3, #8
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b9d      	ldr	r3, [pc, #628]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b99      	ldr	r3, [pc, #612]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d05b      	beq.n	8001520 <HAL_RCC_OscConfig+0x108>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d157      	bne.n	8001520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e236      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x74>
 800147e:	4b91      	ldr	r3, [pc, #580]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a90      	ldr	r2, [pc, #576]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a8a      	ldr	r2, [pc, #552]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a87      	ldr	r2, [pc, #540]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 80014b0:	4b84      	ldr	r3, [pc, #528]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a83      	ldr	r2, [pc, #524]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a80      	ldr	r2, [pc, #512]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fce6 	bl	8000ea0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fce2 	bl	8000ea0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1fb      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xc0>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fcd2 	bl	8000ea0 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fcce 	bl	8000ea0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1e7      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0xe8>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001542:	2b08      	cmp	r3, #8
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x152>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e1bb      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4952      	ldr	r1, [pc, #328]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e03a      	b.n	80015f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <HAL_RCC_OscConfig+0x2b0>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fc87 	bl	8000ea0 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc83 	bl	8000ea0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e19c      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4940      	ldr	r1, [pc, #256]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x2b0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc66 	bl	8000ea0 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc62 	bl	8000ea0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e17b      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d030      	beq.n	8001664 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d016      	beq.n	8001638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_OscConfig+0x2b4>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fc46 	bl	8000ea0 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fc42 	bl	8000ea0 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e15b      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x200>
 8001636:	e015      	b.n	8001664 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x2b4>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fc2f 	bl	8000ea0 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fc2b 	bl	8000ea0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e144      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a0 	beq.w	80017b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x2b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d121      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_RCC_OscConfig+0x2b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_RCC_OscConfig+0x2b8>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fbf1 	bl	8000ea0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e011      	b.n	80016e6 <HAL_RCC_OscConfig+0x2ce>
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	42470000 	.word	0x42470000
 80016cc:	42470e80 	.word	0x42470e80
 80016d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d4:	f7ff fbe4 	bl	8000ea0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0fd      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b81      	ldr	r3, [pc, #516]	; (80018ec <HAL_RCC_OscConfig+0x4d4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x2f0>
 80016fa:	4b7d      	ldr	r3, [pc, #500]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	4a7c      	ldr	r2, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	; 0x70
 8001706:	e01c      	b.n	8001742 <HAL_RCC_OscConfig+0x32a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x312>
 8001710:	4b77      	ldr	r3, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a76      	ldr	r2, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	4b74      	ldr	r3, [pc, #464]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a73      	ldr	r2, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x32a>
 800172a:	4b71      	ldr	r3, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a70      	ldr	r2, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a6d      	ldr	r2, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fba9 	bl	8000ea0 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fba5 	bl	8000ea0 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0bc      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ee      	beq.n	8001752 <HAL_RCC_OscConfig+0x33a>
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fb93 	bl	8000ea0 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff fb8f 	bl	8000ea0 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0a6      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a6:	4b52      	ldr	r3, [pc, #328]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8092 	beq.w	80018e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d05c      	beq.n	8001882 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d141      	bne.n	8001854 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_RCC_OscConfig+0x4dc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fb63 	bl	8000ea0 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fb5f 	bl	8000ea0 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e078      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f0:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	019b      	lsls	r3, r3, #6
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	3b01      	subs	r3, #1
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	061b      	lsls	r3, r3, #24
 8001820:	4933      	ldr	r1, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_RCC_OscConfig+0x4dc>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb38 	bl	8000ea0 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb34 	bl	8000ea0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04d      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x41c>
 8001852:	e045      	b.n	80018e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x4dc>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fb21 	bl	8000ea0 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff fb1d 	bl	8000ea0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e036      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x44a>
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e029      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_RCC_OscConfig+0x4d8>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11c      	bne.n	80018dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d115      	bne.n	80018dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018bc:	4293      	cmp	r3, r2
 80018be:	d10d      	bne.n	80018dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40007000 	.word	0x40007000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470060 	.word	0x42470060

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0cc      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d90c      	bls.n	8001934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b8      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d020      	beq.n	8001982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	494d      	ldr	r1, [pc, #308]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d044      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d119      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e07f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e067      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fa5a 	bl	8000ea0 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff fa56 	bl	8000ea0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e04f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d20c      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e032      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4916      	ldr	r1, [pc, #88]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7e:	f000 f821 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a82:	4601      	mov	r1, r0
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	fa21 f303 	lsr.w	r3, r1, r3
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f90c 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	0800568c 	.word	0x0800568c
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d007      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d008      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x38>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80b4 	bne.w	8001c58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b5e      	ldr	r3, [pc, #376]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001af2:	60bb      	str	r3, [r7, #8]
       break;
 8001af4:	e0b3      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001af8:	60bb      	str	r3, [r7, #8]
      break;
 8001afa:	e0b0      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afc:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d04a      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	f04f 0400 	mov.w	r4, #0
 8001b1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	ea03 0501 	and.w	r5, r3, r1
 8001b28:	ea04 0602 	and.w	r6, r4, r2
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	4632      	mov	r2, r6
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	f04f 0400 	mov.w	r4, #0
 8001b38:	0154      	lsls	r4, r2, #5
 8001b3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b3e:	014b      	lsls	r3, r1, #5
 8001b40:	4619      	mov	r1, r3
 8001b42:	4622      	mov	r2, r4
 8001b44:	1b49      	subs	r1, r1, r5
 8001b46:	eb62 0206 	sbc.w	r2, r2, r6
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	f04f 0400 	mov.w	r4, #0
 8001b52:	0194      	lsls	r4, r2, #6
 8001b54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b58:	018b      	lsls	r3, r1, #6
 8001b5a:	1a5b      	subs	r3, r3, r1
 8001b5c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	00e2      	lsls	r2, r4, #3
 8001b6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b6e:	00d9      	lsls	r1, r3, #3
 8001b70:	460b      	mov	r3, r1
 8001b72:	4614      	mov	r4, r2
 8001b74:	195b      	adds	r3, r3, r5
 8001b76:	eb44 0406 	adc.w	r4, r4, r6
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	0262      	lsls	r2, r4, #9
 8001b84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b88:	0259      	lsls	r1, r3, #9
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4621      	mov	r1, r4
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f04f 0400 	mov.w	r4, #0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	f7fe fb20 	bl	80001e0 <__aeabi_uldivmod>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e049      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	f04f 0400 	mov.w	r4, #0
 8001bb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	ea03 0501 	and.w	r5, r3, r1
 8001bbe:	ea04 0602 	and.w	r6, r4, r2
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	4632      	mov	r2, r6
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	f04f 0400 	mov.w	r4, #0
 8001bce:	0154      	lsls	r4, r2, #5
 8001bd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bd4:	014b      	lsls	r3, r1, #5
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4622      	mov	r2, r4
 8001bda:	1b49      	subs	r1, r1, r5
 8001bdc:	eb62 0206 	sbc.w	r2, r2, r6
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f04f 0400 	mov.w	r4, #0
 8001be8:	0194      	lsls	r4, r2, #6
 8001bea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bee:	018b      	lsls	r3, r1, #6
 8001bf0:	1a5b      	subs	r3, r3, r1
 8001bf2:	eb64 0402 	sbc.w	r4, r4, r2
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	00e2      	lsls	r2, r4, #3
 8001c00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c04:	00d9      	lsls	r1, r3, #3
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	195b      	adds	r3, r3, r5
 8001c0c:	eb44 0406 	adc.w	r4, r4, r6
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	02a2      	lsls	r2, r4, #10
 8001c1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c1e:	0299      	lsls	r1, r3, #10
 8001c20:	460b      	mov	r3, r1
 8001c22:	4614      	mov	r4, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	4621      	mov	r1, r4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f04f 0400 	mov.w	r4, #0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4623      	mov	r3, r4
 8001c32:	f7fe fad5 	bl	80001e0 <__aeabi_uldivmod>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	60bb      	str	r3, [r7, #8]
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c5a:	60bb      	str	r3, [r7, #8]
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	007a1200 	.word	0x007a1200

08001c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4601      	mov	r1, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	0800569c 	.word	0x0800569c

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb8:	f7ff ffdc 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	0800569c 	.word	0x0800569c

08001cdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	220f      	movs	r2, #15
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_RCC_GetClockConfig+0x60>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e01d      	b.n	8001d8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f815 	bl	8001d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f968 	bl	8002054 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b06      	cmp	r3, #6
 8001dd2:	d007      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d122      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d11b      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f06f 0202 	mvn.w	r2, #2
 8001e1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8ee 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001e3a:	e005      	b.n	8001e48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8e0 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8f1 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d122      	bne.n	8001ea2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d11b      	bne.n	8001ea2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 0204 	mvn.w	r2, #4
 8001e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8c4 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001e8e:	e005      	b.n	8001e9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8b6 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8c7 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d122      	bne.n	8001ef6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f06f 0208 	mvn.w	r2, #8
 8001ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f89a 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001ee2:	e005      	b.n	8001ef0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f88c 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f89d 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b10      	cmp	r3, #16
 8001f02:	d122      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d11b      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f06f 0210 	mvn.w	r2, #16
 8001f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f870 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001f36:	e005      	b.n	8001f44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f862 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f873 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10e      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0201 	mvn.w	r2, #1
 8001f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe fd23 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b80      	cmp	r3, #128	; 0x80
 8001f82:	d10e      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b80      	cmp	r3, #128	; 0x80
 8001f90:	d107      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8e3 	bl	8002168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d10e      	bne.n	8001fce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d107      	bne.n	8001fce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f838 	bl	800203e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d10e      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d107      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0220 	mvn.w	r2, #32
 8001ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f8ad 	bl	8002154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a34      	ldr	r2, [pc, #208]	; (8002138 <TIM_Base_SetConfig+0xe4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00f      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d00b      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a31      	ldr	r2, [pc, #196]	; (800213c <TIM_Base_SetConfig+0xe8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a30      	ldr	r2, [pc, #192]	; (8002140 <TIM_Base_SetConfig+0xec>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <TIM_Base_SetConfig+0xf0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0xe4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01b      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d017      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <TIM_Base_SetConfig+0xe8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a21      	ldr	r2, [pc, #132]	; (8002140 <TIM_Base_SetConfig+0xec>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <TIM_Base_SetConfig+0xf0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <TIM_Base_SetConfig+0xf4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <TIM_Base_SetConfig+0xf8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <TIM_Base_SetConfig+0xe4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800

08002154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e03f      	b.n	800220e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fd3a 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f829 	bl	8002218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800225a:	f023 030c 	bic.w	r3, r3, #12
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	430b      	orrs	r3, r1
 8002266:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002286:	f040 818b 	bne.w	80025a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4ac1      	ldr	r2, [pc, #772]	; (8002594 <UART_SetConfig+0x37c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d005      	beq.n	80022a0 <UART_SetConfig+0x88>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4abf      	ldr	r2, [pc, #764]	; (8002598 <UART_SetConfig+0x380>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 80bd 	bne.w	800241a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022a0:	f7ff fd08 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80022a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	461d      	mov	r5, r3
 80022aa:	f04f 0600 	mov.w	r6, #0
 80022ae:	46a8      	mov	r8, r5
 80022b0:	46b1      	mov	r9, r6
 80022b2:	eb18 0308 	adds.w	r3, r8, r8
 80022b6:	eb49 0409 	adc.w	r4, r9, r9
 80022ba:	4698      	mov	r8, r3
 80022bc:	46a1      	mov	r9, r4
 80022be:	eb18 0805 	adds.w	r8, r8, r5
 80022c2:	eb49 0906 	adc.w	r9, r9, r6
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022da:	4688      	mov	r8, r1
 80022dc:	4691      	mov	r9, r2
 80022de:	eb18 0005 	adds.w	r0, r8, r5
 80022e2:	eb49 0106 	adc.w	r1, r9, r6
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	461d      	mov	r5, r3
 80022ec:	f04f 0600 	mov.w	r6, #0
 80022f0:	196b      	adds	r3, r5, r5
 80022f2:	eb46 0406 	adc.w	r4, r6, r6
 80022f6:	461a      	mov	r2, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	f7fd ff71 	bl	80001e0 <__aeabi_uldivmod>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	461a      	mov	r2, r3
 8002304:	4ba5      	ldr	r3, [pc, #660]	; (800259c <UART_SetConfig+0x384>)
 8002306:	fba3 2302 	umull	r2, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	461d      	mov	r5, r3
 8002314:	f04f 0600 	mov.w	r6, #0
 8002318:	46a9      	mov	r9, r5
 800231a:	46b2      	mov	sl, r6
 800231c:	eb19 0309 	adds.w	r3, r9, r9
 8002320:	eb4a 040a 	adc.w	r4, sl, sl
 8002324:	4699      	mov	r9, r3
 8002326:	46a2      	mov	sl, r4
 8002328:	eb19 0905 	adds.w	r9, r9, r5
 800232c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800233c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002344:	4689      	mov	r9, r1
 8002346:	4692      	mov	sl, r2
 8002348:	eb19 0005 	adds.w	r0, r9, r5
 800234c:	eb4a 0106 	adc.w	r1, sl, r6
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	461d      	mov	r5, r3
 8002356:	f04f 0600 	mov.w	r6, #0
 800235a:	196b      	adds	r3, r5, r5
 800235c:	eb46 0406 	adc.w	r4, r6, r6
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f7fd ff3c 	bl	80001e0 <__aeabi_uldivmod>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	461a      	mov	r2, r3
 800236e:	4b8b      	ldr	r3, [pc, #556]	; (800259c <UART_SetConfig+0x384>)
 8002370:	fba3 1302 	umull	r1, r3, r3, r2
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2164      	movs	r1, #100	; 0x64
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a86      	ldr	r2, [pc, #536]	; (800259c <UART_SetConfig+0x384>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002390:	4498      	add	r8, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	461d      	mov	r5, r3
 8002396:	f04f 0600 	mov.w	r6, #0
 800239a:	46a9      	mov	r9, r5
 800239c:	46b2      	mov	sl, r6
 800239e:	eb19 0309 	adds.w	r3, r9, r9
 80023a2:	eb4a 040a 	adc.w	r4, sl, sl
 80023a6:	4699      	mov	r9, r3
 80023a8:	46a2      	mov	sl, r4
 80023aa:	eb19 0905 	adds.w	r9, r9, r5
 80023ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023c6:	4689      	mov	r9, r1
 80023c8:	4692      	mov	sl, r2
 80023ca:	eb19 0005 	adds.w	r0, r9, r5
 80023ce:	eb4a 0106 	adc.w	r1, sl, r6
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	461d      	mov	r5, r3
 80023d8:	f04f 0600 	mov.w	r6, #0
 80023dc:	196b      	adds	r3, r5, r5
 80023de:	eb46 0406 	adc.w	r4, r6, r6
 80023e2:	461a      	mov	r2, r3
 80023e4:	4623      	mov	r3, r4
 80023e6:	f7fd fefb 	bl	80001e0 <__aeabi_uldivmod>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <UART_SetConfig+0x384>)
 80023f2:	fba3 1302 	umull	r1, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2164      	movs	r1, #100	; 0x64
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	3332      	adds	r3, #50	; 0x32
 8002404:	4a65      	ldr	r2, [pc, #404]	; (800259c <UART_SetConfig+0x384>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	f003 0207 	and.w	r2, r3, #7
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4442      	add	r2, r8
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e26f      	b.n	80028fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800241a:	f7ff fc37 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 800241e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	461d      	mov	r5, r3
 8002424:	f04f 0600 	mov.w	r6, #0
 8002428:	46a8      	mov	r8, r5
 800242a:	46b1      	mov	r9, r6
 800242c:	eb18 0308 	adds.w	r3, r8, r8
 8002430:	eb49 0409 	adc.w	r4, r9, r9
 8002434:	4698      	mov	r8, r3
 8002436:	46a1      	mov	r9, r4
 8002438:	eb18 0805 	adds.w	r8, r8, r5
 800243c:	eb49 0906 	adc.w	r9, r9, r6
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800244c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002454:	4688      	mov	r8, r1
 8002456:	4691      	mov	r9, r2
 8002458:	eb18 0005 	adds.w	r0, r8, r5
 800245c:	eb49 0106 	adc.w	r1, r9, r6
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	461d      	mov	r5, r3
 8002466:	f04f 0600 	mov.w	r6, #0
 800246a:	196b      	adds	r3, r5, r5
 800246c:	eb46 0406 	adc.w	r4, r6, r6
 8002470:	461a      	mov	r2, r3
 8002472:	4623      	mov	r3, r4
 8002474:	f7fd feb4 	bl	80001e0 <__aeabi_uldivmod>
 8002478:	4603      	mov	r3, r0
 800247a:	460c      	mov	r4, r1
 800247c:	461a      	mov	r2, r3
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <UART_SetConfig+0x384>)
 8002480:	fba3 2302 	umull	r2, r3, r3, r2
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	461d      	mov	r5, r3
 800248e:	f04f 0600 	mov.w	r6, #0
 8002492:	46a9      	mov	r9, r5
 8002494:	46b2      	mov	sl, r6
 8002496:	eb19 0309 	adds.w	r3, r9, r9
 800249a:	eb4a 040a 	adc.w	r4, sl, sl
 800249e:	4699      	mov	r9, r3
 80024a0:	46a2      	mov	sl, r4
 80024a2:	eb19 0905 	adds.w	r9, r9, r5
 80024a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024be:	4689      	mov	r9, r1
 80024c0:	4692      	mov	sl, r2
 80024c2:	eb19 0005 	adds.w	r0, r9, r5
 80024c6:	eb4a 0106 	adc.w	r1, sl, r6
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	461d      	mov	r5, r3
 80024d0:	f04f 0600 	mov.w	r6, #0
 80024d4:	196b      	adds	r3, r5, r5
 80024d6:	eb46 0406 	adc.w	r4, r6, r6
 80024da:	461a      	mov	r2, r3
 80024dc:	4623      	mov	r3, r4
 80024de:	f7fd fe7f 	bl	80001e0 <__aeabi_uldivmod>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <UART_SetConfig+0x384>)
 80024ea:	fba3 1302 	umull	r1, r3, r3, r2
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2164      	movs	r1, #100	; 0x64
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	4a27      	ldr	r2, [pc, #156]	; (800259c <UART_SetConfig+0x384>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800250a:	4498      	add	r8, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	461d      	mov	r5, r3
 8002510:	f04f 0600 	mov.w	r6, #0
 8002514:	46a9      	mov	r9, r5
 8002516:	46b2      	mov	sl, r6
 8002518:	eb19 0309 	adds.w	r3, r9, r9
 800251c:	eb4a 040a 	adc.w	r4, sl, sl
 8002520:	4699      	mov	r9, r3
 8002522:	46a2      	mov	sl, r4
 8002524:	eb19 0905 	adds.w	r9, r9, r5
 8002528:	eb4a 0a06 	adc.w	sl, sl, r6
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800253c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002540:	4689      	mov	r9, r1
 8002542:	4692      	mov	sl, r2
 8002544:	eb19 0005 	adds.w	r0, r9, r5
 8002548:	eb4a 0106 	adc.w	r1, sl, r6
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461d      	mov	r5, r3
 8002552:	f04f 0600 	mov.w	r6, #0
 8002556:	196b      	adds	r3, r5, r5
 8002558:	eb46 0406 	adc.w	r4, r6, r6
 800255c:	461a      	mov	r2, r3
 800255e:	4623      	mov	r3, r4
 8002560:	f7fd fe3e 	bl	80001e0 <__aeabi_uldivmod>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	461a      	mov	r2, r3
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <UART_SetConfig+0x384>)
 800256c:	fba3 1302 	umull	r1, r3, r3, r2
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	2164      	movs	r1, #100	; 0x64
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3332      	adds	r3, #50	; 0x32
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <UART_SetConfig+0x384>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	f003 0207 	and.w	r2, r3, #7
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4442      	add	r2, r8
 8002590:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002592:	e1b2      	b.n	80028fa <UART_SetConfig+0x6e2>
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4ad7      	ldr	r2, [pc, #860]	; (8002904 <UART_SetConfig+0x6ec>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d005      	beq.n	80025b6 <UART_SetConfig+0x39e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4ad6      	ldr	r2, [pc, #856]	; (8002908 <UART_SetConfig+0x6f0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	f040 80d1 	bne.w	8002758 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b6:	f7ff fb7d 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 80025ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	469a      	mov	sl, r3
 80025c0:	f04f 0b00 	mov.w	fp, #0
 80025c4:	46d0      	mov	r8, sl
 80025c6:	46d9      	mov	r9, fp
 80025c8:	eb18 0308 	adds.w	r3, r8, r8
 80025cc:	eb49 0409 	adc.w	r4, r9, r9
 80025d0:	4698      	mov	r8, r3
 80025d2:	46a1      	mov	r9, r4
 80025d4:	eb18 080a 	adds.w	r8, r8, sl
 80025d8:	eb49 090b 	adc.w	r9, r9, fp
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025f0:	4688      	mov	r8, r1
 80025f2:	4691      	mov	r9, r2
 80025f4:	eb1a 0508 	adds.w	r5, sl, r8
 80025f8:	eb4b 0609 	adc.w	r6, fp, r9
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	f04f 0400 	mov.w	r4, #0
 800260e:	0094      	lsls	r4, r2, #2
 8002610:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002614:	008b      	lsls	r3, r1, #2
 8002616:	461a      	mov	r2, r3
 8002618:	4623      	mov	r3, r4
 800261a:	4628      	mov	r0, r5
 800261c:	4631      	mov	r1, r6
 800261e:	f7fd fddf 	bl	80001e0 <__aeabi_uldivmod>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	461a      	mov	r2, r3
 8002628:	4bb8      	ldr	r3, [pc, #736]	; (800290c <UART_SetConfig+0x6f4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	469b      	mov	fp, r3
 8002638:	f04f 0c00 	mov.w	ip, #0
 800263c:	46d9      	mov	r9, fp
 800263e:	46e2      	mov	sl, ip
 8002640:	eb19 0309 	adds.w	r3, r9, r9
 8002644:	eb4a 040a 	adc.w	r4, sl, sl
 8002648:	4699      	mov	r9, r3
 800264a:	46a2      	mov	sl, r4
 800264c:	eb19 090b 	adds.w	r9, r9, fp
 8002650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002654:	f04f 0100 	mov.w	r1, #0
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002668:	4689      	mov	r9, r1
 800266a:	4692      	mov	sl, r2
 800266c:	eb1b 0509 	adds.w	r5, fp, r9
 8002670:	eb4c 060a 	adc.w	r6, ip, sl
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	0094      	lsls	r4, r2, #2
 8002688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800268c:	008b      	lsls	r3, r1, #2
 800268e:	461a      	mov	r2, r3
 8002690:	4623      	mov	r3, r4
 8002692:	4628      	mov	r0, r5
 8002694:	4631      	mov	r1, r6
 8002696:	f7fd fda3 	bl	80001e0 <__aeabi_uldivmod>
 800269a:	4603      	mov	r3, r0
 800269c:	460c      	mov	r4, r1
 800269e:	461a      	mov	r2, r3
 80026a0:	4b9a      	ldr	r3, [pc, #616]	; (800290c <UART_SetConfig+0x6f4>)
 80026a2:	fba3 1302 	umull	r1, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2164      	movs	r1, #100	; 0x64
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	3332      	adds	r3, #50	; 0x32
 80026b4:	4a95      	ldr	r2, [pc, #596]	; (800290c <UART_SetConfig+0x6f4>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c0:	4498      	add	r8, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	469b      	mov	fp, r3
 80026c6:	f04f 0c00 	mov.w	ip, #0
 80026ca:	46d9      	mov	r9, fp
 80026cc:	46e2      	mov	sl, ip
 80026ce:	eb19 0309 	adds.w	r3, r9, r9
 80026d2:	eb4a 040a 	adc.w	r4, sl, sl
 80026d6:	4699      	mov	r9, r3
 80026d8:	46a2      	mov	sl, r4
 80026da:	eb19 090b 	adds.w	r9, r9, fp
 80026de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f6:	4689      	mov	r9, r1
 80026f8:	4692      	mov	sl, r2
 80026fa:	eb1b 0509 	adds.w	r5, fp, r9
 80026fe:	eb4c 060a 	adc.w	r6, ip, sl
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	0094      	lsls	r4, r2, #2
 8002716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800271a:	008b      	lsls	r3, r1, #2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	4628      	mov	r0, r5
 8002722:	4631      	mov	r1, r6
 8002724:	f7fd fd5c 	bl	80001e0 <__aeabi_uldivmod>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	461a      	mov	r2, r3
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <UART_SetConfig+0x6f4>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	; 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <UART_SetConfig+0x6f4>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 020f 	and.w	r2, r3, #15
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4442      	add	r2, r8
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	e0d0      	b.n	80028fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002758:	f7ff fa98 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 800275c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	469a      	mov	sl, r3
 8002762:	f04f 0b00 	mov.w	fp, #0
 8002766:	46d0      	mov	r8, sl
 8002768:	46d9      	mov	r9, fp
 800276a:	eb18 0308 	adds.w	r3, r8, r8
 800276e:	eb49 0409 	adc.w	r4, r9, r9
 8002772:	4698      	mov	r8, r3
 8002774:	46a1      	mov	r9, r4
 8002776:	eb18 080a 	adds.w	r8, r8, sl
 800277a:	eb49 090b 	adc.w	r9, r9, fp
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800278a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800278e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002792:	4688      	mov	r8, r1
 8002794:	4691      	mov	r9, r2
 8002796:	eb1a 0508 	adds.w	r5, sl, r8
 800279a:	eb4b 0609 	adc.w	r6, fp, r9
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f04f 0400 	mov.w	r4, #0
 80027b0:	0094      	lsls	r4, r2, #2
 80027b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027b6:	008b      	lsls	r3, r1, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	4628      	mov	r0, r5
 80027be:	4631      	mov	r1, r6
 80027c0:	f7fd fd0e 	bl	80001e0 <__aeabi_uldivmod>
 80027c4:	4603      	mov	r3, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b50      	ldr	r3, [pc, #320]	; (800290c <UART_SetConfig+0x6f4>)
 80027cc:	fba3 2302 	umull	r2, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	469b      	mov	fp, r3
 80027da:	f04f 0c00 	mov.w	ip, #0
 80027de:	46d9      	mov	r9, fp
 80027e0:	46e2      	mov	sl, ip
 80027e2:	eb19 0309 	adds.w	r3, r9, r9
 80027e6:	eb4a 040a 	adc.w	r4, sl, sl
 80027ea:	4699      	mov	r9, r3
 80027ec:	46a2      	mov	sl, r4
 80027ee:	eb19 090b 	adds.w	r9, r9, fp
 80027f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800280a:	4689      	mov	r9, r1
 800280c:	4692      	mov	sl, r2
 800280e:	eb1b 0509 	adds.w	r5, fp, r9
 8002812:	eb4c 060a 	adc.w	r6, ip, sl
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0094      	lsls	r4, r2, #2
 800282a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800282e:	008b      	lsls	r3, r1, #2
 8002830:	461a      	mov	r2, r3
 8002832:	4623      	mov	r3, r4
 8002834:	4628      	mov	r0, r5
 8002836:	4631      	mov	r1, r6
 8002838:	f7fd fcd2 	bl	80001e0 <__aeabi_uldivmod>
 800283c:	4603      	mov	r3, r0
 800283e:	460c      	mov	r4, r1
 8002840:	461a      	mov	r2, r3
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <UART_SetConfig+0x6f4>)
 8002844:	fba3 1302 	umull	r1, r3, r3, r2
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	2164      	movs	r1, #100	; 0x64
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	3332      	adds	r3, #50	; 0x32
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <UART_SetConfig+0x6f4>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002862:	4498      	add	r8, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	469b      	mov	fp, r3
 8002868:	f04f 0c00 	mov.w	ip, #0
 800286c:	46d9      	mov	r9, fp
 800286e:	46e2      	mov	sl, ip
 8002870:	eb19 0309 	adds.w	r3, r9, r9
 8002874:	eb4a 040a 	adc.w	r4, sl, sl
 8002878:	4699      	mov	r9, r3
 800287a:	46a2      	mov	sl, r4
 800287c:	eb19 090b 	adds.w	r9, r9, fp
 8002880:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002898:	4689      	mov	r9, r1
 800289a:	4692      	mov	sl, r2
 800289c:	eb1b 0509 	adds.w	r5, fp, r9
 80028a0:	eb4c 060a 	adc.w	r6, ip, sl
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	f04f 0400 	mov.w	r4, #0
 80028b6:	0094      	lsls	r4, r2, #2
 80028b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028bc:	008b      	lsls	r3, r1, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	4623      	mov	r3, r4
 80028c2:	4628      	mov	r0, r5
 80028c4:	4631      	mov	r1, r6
 80028c6:	f7fd fc8b 	bl	80001e0 <__aeabi_uldivmod>
 80028ca:	4603      	mov	r3, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <UART_SetConfig+0x6f4>)
 80028d2:	fba3 1302 	umull	r1, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2164      	movs	r1, #100	; 0x64
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <UART_SetConfig+0x6f4>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4442      	add	r2, r8
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	e7ff      	b.n	80028fa <UART_SetConfig+0x6e2>
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002904:	40011000 	.word	0x40011000
 8002908:	40011400 	.word	0x40011400
 800290c:	51eb851f 	.word	0x51eb851f

08002910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002926:	f3ef 8305 	mrs	r3, IPSR
 800292a:	60bb      	str	r3, [r7, #8]
  return(result);
 800292c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002932:	f3ef 8310 	mrs	r3, PRIMASK
 8002936:	607b      	str	r3, [r7, #4]
  return(result);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800293e:	f3ef 8311 	mrs	r3, BASEPRI
 8002942:	603b      	str	r3, [r7, #0]
  return(result);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <osKernelInitialize+0x3a>
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <osKernelInitialize+0x64>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d103      	bne.n	800295a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002952:	f06f 0305 	mvn.w	r3, #5
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e00c      	b.n	8002974 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <osKernelInitialize+0x64>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <osKernelInitialize+0x64>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e002      	b.n	8002974 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002974:	68fb      	ldr	r3, [r7, #12]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	2000020c 	.word	0x2000020c

08002988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800298e:	f3ef 8305 	mrs	r3, IPSR
 8002992:	60bb      	str	r3, [r7, #8]
  return(result);
 8002994:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299a:	f3ef 8310 	mrs	r3, PRIMASK
 800299e:	607b      	str	r3, [r7, #4]
  return(result);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029a6:	f3ef 8311 	mrs	r3, BASEPRI
 80029aa:	603b      	str	r3, [r7, #0]
  return(result);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <osKernelStart+0x3a>
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <osKernelStart+0x68>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d103      	bne.n	80029c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80029ba:	f06f 0305 	mvn.w	r3, #5
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e010      	b.n	80029e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <osKernelStart+0x68>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d109      	bne.n	80029de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029ca:	f7ff ffa1 	bl	8002910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <osKernelStart+0x68>)
 80029d0:	2202      	movs	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029d4:	f001 f94a 	bl	8003c6c <vTaskStartScheduler>
      stat = osOK;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e002      	b.n	80029e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029e4:	68fb      	ldr	r3, [r7, #12]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000020c 	.word	0x2000020c

080029f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b090      	sub	sp, #64	; 0x40
 80029f8:	af04      	add	r7, sp, #16
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a04:	f3ef 8305 	mrs	r3, IPSR
 8002a08:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 808f 	bne.w	8002b30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a12:	f3ef 8310 	mrs	r3, PRIMASK
 8002a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a22:	617b      	str	r3, [r7, #20]
  return(result);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <osThreadNew+0x3e>
 8002a2a:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <osThreadNew+0x148>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d07e      	beq.n	8002b30 <osThreadNew+0x13c>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d07b      	beq.n	8002b30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002a3c:	2318      	movs	r3, #24
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d045      	beq.n	8002adc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <osThreadNew+0x6a>
        name = attr->name;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <osThreadNew+0x90>
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	2b38      	cmp	r3, #56	; 0x38
 8002a76:	d805      	bhi.n	8002a84 <osThreadNew+0x90>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <osThreadNew+0x94>
        return (NULL);
 8002a84:	2300      	movs	r3, #0
 8002a86:	e054      	b.n	8002b32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <osThreadNew+0xca>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b5b      	cmp	r3, #91	; 0x5b
 8002aa6:	d90a      	bls.n	8002abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <osThreadNew+0xca>
        mem = 1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	e010      	b.n	8002ae0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <osThreadNew+0xec>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <osThreadNew+0xec>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <osThreadNew+0xec>
          mem = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	e001      	b.n	8002ae0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d110      	bne.n	8002b08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002aee:	9202      	str	r2, [sp, #8]
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fee3 	bl	80038c8 <xTaskCreateStatic>
 8002b02:	4603      	mov	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e013      	b.n	8002b30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d110      	bne.n	8002b30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 ff2b 	bl	800397c <xTaskCreate>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <osThreadNew+0x13c>
          hTask = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b30:	693b      	ldr	r3, [r7, #16]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3730      	adds	r7, #48	; 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000020c 	.word	0x2000020c

08002b40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b48:	f3ef 8305 	mrs	r3, IPSR
 8002b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8002b4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10f      	bne.n	8002b74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b60:	f3ef 8311 	mrs	r3, BASEPRI
 8002b64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <osDelay+0x3c>
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <osDelay+0x58>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d103      	bne.n	8002b7c <osDelay+0x3c>
    stat = osErrorISR;
 8002b74:	f06f 0305 	mvn.w	r3, #5
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e007      	b.n	8002b8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f001 f83c 	bl	8003c04 <vTaskDelay>
    }
  }

  return (stat);
 8002b8c:	697b      	ldr	r3, [r7, #20]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000020c 	.word	0x2000020c

08002b9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <vApplicationGetIdleTaskMemory+0x30>)
 8002bb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000210 	.word	0x20000210
 8002bcc:	2000026c 	.word	0x2000026c

08002bd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <vApplicationGetTimerTaskMemory+0x2c>)
 8002be0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <vApplicationGetTimerTaskMemory+0x30>)
 8002be6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	2000046c 	.word	0x2000046c
 8002c00:	200004c8 	.word	0x200004c8

08002c04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0208 	add.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f103 0208 	add.w	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 0208 	add.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d103      	bne.n	8002cc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e00c      	b.n	8002ce0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e002      	b.n	8002cd4 <vListInsert+0x2e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d2f6      	bcs.n	8002cce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6892      	ldr	r2, [r2, #8]
 8002d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6852      	ldr	r2, [r2, #4]
 8002d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d103      	bne.n	8002d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	e7fe      	b.n	8002d92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002d94:	f002 f8ea 	bl	8004f6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	441a      	add	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	68f9      	ldr	r1, [r7, #12]
 8002dc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	441a      	add	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	22ff      	movs	r2, #255	; 0xff
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d114      	bne.n	8002e14 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01a      	beq.n	8002e28 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3310      	adds	r3, #16
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 f9b8 	bl	800416c <xTaskRemoveFromEventList>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <xQueueGenericReset+0xcc>)
 8002e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	e009      	b.n	8002e28 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3310      	adds	r3, #16
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fef3 	bl	8002c04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3324      	adds	r3, #36	; 0x24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff feee 	bl	8002c04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e28:	f002 f8ce 	bl	8004fc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000ed04 	.word	0xe000ed04

08002e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08e      	sub	sp, #56	; 0x38
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <xQueueGenericCreateStatic+0x28>
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e62:	e7fe      	b.n	8002e62 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <xQueueGenericCreateStatic+0x42>
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <xQueueGenericCreateStatic+0x4e>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <xQueueGenericCreateStatic+0x52>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueGenericCreateStatic+0x54>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <xQueueGenericCreateStatic+0x6c>
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	e7fe      	b.n	8002ea6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <xQueueGenericCreateStatic+0x78>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueGenericCreateStatic+0x7c>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <xQueueGenericCreateStatic+0x7e>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <xQueueGenericCreateStatic+0x96>
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e7fe      	b.n	8002ed0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ed2:	2350      	movs	r3, #80	; 0x50
 8002ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d009      	beq.n	8002ef0 <xQueueGenericCreateStatic+0xb4>
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e7fe      	b.n	8002eee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ef0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f844 	bl	8002fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3730      	adds	r7, #48	; 0x30
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b08a      	sub	sp, #40	; 0x28
 8002f26:	af02      	add	r7, sp, #8
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <xQueueGenericCreate+0x28>
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e004      	b.n	8002f60 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3350      	adds	r3, #80	; 0x50
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 f91b 	bl	80051a0 <pvPortMalloc>
 8002f6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3350      	adds	r3, #80	; 0x50
 8002f7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f84:	79fa      	ldrb	r2, [r7, #7]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f805 	bl	8002fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f96:	69bb      	ldr	r3, [r7, #24]
	}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e002      	b.n	8002fc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fce:	2101      	movs	r1, #1
 8002fd0:	69b8      	ldr	r0, [r7, #24]
 8002fd2:	f7ff fecb 	bl	8002d6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	; 0x38
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <xQueueGenericSend+0x30>
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
 8003016:	e7fe      	b.n	8003016 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <xQueueGenericSend+0x3e>
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <xQueueGenericSend+0x42>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <xQueueGenericSend+0x44>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <xQueueGenericSend+0x5c>
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	e7fe      	b.n	8003042 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d103      	bne.n	8003052 <xQueueGenericSend+0x6a>
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <xQueueGenericSend+0x6e>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <xQueueGenericSend+0x70>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <xQueueGenericSend+0x88>
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	e7fe      	b.n	800306e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003070:	f001 fa32 	bl	80044d8 <xTaskGetSchedulerState>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <xQueueGenericSend+0x98>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <xQueueGenericSend+0x9c>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <xQueueGenericSend+0x9e>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <xQueueGenericSend+0xb6>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	e7fe      	b.n	800309c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800309e:	f001 ff65 	bl	8004f6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <xQueueGenericSend+0xcc>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d129      	bne.n	8003108 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ba:	f000 fa99 	bl	80035f0 <prvCopyDataToQueue>
 80030be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f84d 	bl	800416c <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030d8:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <xQueueGenericSend+0x1f0>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	e00a      	b.n	8003100 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <xQueueGenericSend+0x1f0>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003100:	f001 ff62 	bl	8004fc8 <vPortExitCritical>
				return pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	e063      	b.n	80031d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800310e:	f001 ff5b 	bl	8004fc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003112:	2300      	movs	r3, #0
 8003114:	e05c      	b.n	80031d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f885 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003126:	2301      	movs	r3, #1
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800312a:	f001 ff4d 	bl	8004fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800312e:	f000 fe01 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003132:	f001 ff1b 	bl	8004f6c <vPortEnterCritical>
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800313c:	b25b      	sxtb	r3, r3
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d103      	bne.n	800314c <xQueueGenericSend+0x164>
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003152:	b25b      	sxtb	r3, r3
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d103      	bne.n	8003162 <xQueueGenericSend+0x17a>
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003162:	f001 ff31 	bl	8004fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003166:	1d3a      	adds	r2, r7, #4
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f001 f874 	bl	800425c <xTaskCheckForTimeOut>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d124      	bne.n	80031c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800317a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800317c:	f000 fb30 	bl	80037e0 <prvIsQueueFull>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	3310      	adds	r3, #16
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 ff9e 	bl	80040d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003196:	f000 fabb 	bl	8003710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800319a:	f000 fdd9 	bl	8003d50 <xTaskResumeAll>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f47f af7c 	bne.w	800309e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <xQueueGenericSend+0x1f0>)
 80031a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	e772      	b.n	800309e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ba:	f000 faa9 	bl	8003710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031be:	f000 fdc7 	bl	8003d50 <xTaskResumeAll>
 80031c2:	e76c      	b.n	800309e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c6:	f000 faa3 	bl	8003710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ca:	f000 fdc1 	bl	8003d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3738      	adds	r7, #56	; 0x38
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <xQueueGenericSendFromISR+0x2c>
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	e7fe      	b.n	8003206 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <xQueueGenericSendFromISR+0x3a>
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <xQueueGenericSendFromISR+0x3e>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <xQueueGenericSendFromISR+0x40>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <xQueueGenericSendFromISR+0x58>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	e7fe      	b.n	8003232 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d103      	bne.n	8003242 <xQueueGenericSendFromISR+0x66>
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <xQueueGenericSendFromISR+0x6a>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <xQueueGenericSendFromISR+0x6c>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <xQueueGenericSendFromISR+0x84>
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e7fe      	b.n	800325e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003260:	f001 ff60 	bl	8005124 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003264:	f3ef 8211 	mrs	r2, BASEPRI
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	61ba      	str	r2, [r7, #24]
 800327a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800327c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <xQueueGenericSendFromISR+0xb6>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d12c      	bne.n	80032ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a2:	f000 f9a5 	bl	80035f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d112      	bne.n	80032d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d016      	beq.n	80032e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	3324      	adds	r3, #36	; 0x24
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 ff55 	bl	800416c <xTaskRemoveFromEventList>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e007      	b.n	80032e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032da:	3301      	adds	r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	b25a      	sxtb	r2, r3
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032e6:	2301      	movs	r3, #1
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80032ea:	e001      	b.n	80032f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3738      	adds	r7, #56	; 0x38
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08c      	sub	sp, #48	; 0x30
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <xQueueReceive+0x2e>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	e7fe      	b.n	8003330 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <xQueueReceive+0x3c>
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <xQueueReceive+0x40>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <xQueueReceive+0x42>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <xQueueReceive+0x5a>
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	e7fe      	b.n	800335c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800335e:	f001 f8bb 	bl	80044d8 <xTaskGetSchedulerState>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <xQueueReceive+0x6a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <xQueueReceive+0x6e>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <xQueueReceive+0x70>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <xQueueReceive+0x88>
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	e7fe      	b.n	800338a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800338c:	f001 fdee 	bl	8004f6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01f      	beq.n	80033dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a0:	f000 f990 	bl	80036c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1e5a      	subs	r2, r3, #1
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00f      	beq.n	80033d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	3310      	adds	r3, #16
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fed7 	bl	800416c <xTaskRemoveFromEventList>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <xQueueReceive+0x1b4>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033d4:	f001 fdf8 	bl	8004fc8 <vPortExitCritical>
				return pdPASS;
 80033d8:	2301      	movs	r3, #1
 80033da:	e069      	b.n	80034b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033e2:	f001 fdf1 	bl	8004fc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e062      	b.n	80034b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033f0:	f107 0310 	add.w	r3, r7, #16
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff1b 	bl	8004230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033fa:	2301      	movs	r3, #1
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033fe:	f001 fde3 	bl	8004fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003402:	f000 fc97 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003406:	f001 fdb1 	bl	8004f6c <vPortEnterCritical>
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003410:	b25b      	sxtb	r3, r3
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d103      	bne.n	8003420 <xQueueReceive+0x11c>
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003426:	b25b      	sxtb	r3, r3
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d103      	bne.n	8003436 <xQueueReceive+0x132>
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003436:	f001 fdc7 	bl	8004fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800343a:	1d3a      	adds	r2, r7, #4
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f000 ff0a 	bl	800425c <xTaskCheckForTimeOut>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d123      	bne.n	8003496 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003450:	f000 f9b0 	bl	80037b4 <prvIsQueueEmpty>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	3324      	adds	r3, #36	; 0x24
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fe34 	bl	80040d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800346a:	f000 f951 	bl	8003710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800346e:	f000 fc6f 	bl	8003d50 <xTaskResumeAll>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d189      	bne.n	800338c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <xQueueReceive+0x1b4>)
 800347a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	e780      	b.n	800338c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800348a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800348c:	f000 f940 	bl	8003710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003490:	f000 fc5e 	bl	8003d50 <xTaskResumeAll>
 8003494:	e77a      	b.n	800338c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003498:	f000 f93a 	bl	8003710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800349c:	f000 fc58 	bl	8003d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a2:	f000 f987 	bl	80037b4 <prvIsQueueEmpty>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f43f af6f 	beq.w	800338c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	; 0x38
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <xQueueReceiveFromISR+0x2a>
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	623b      	str	r3, [r7, #32]
 80034e4:	e7fe      	b.n	80034e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <xQueueReceiveFromISR+0x38>
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <xQueueReceiveFromISR+0x3c>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <xQueueReceiveFromISR+0x3e>
 80034f8:	2300      	movs	r3, #0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <xQueueReceiveFromISR+0x56>
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	e7fe      	b.n	8003510 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003512:	f001 fe07 	bl	8005124 <vPortValidateInterruptPriority>
	__asm volatile
 8003516:	f3ef 8211 	mrs	r2, BASEPRI
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	61ba      	str	r2, [r7, #24]
 800352c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800352e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02f      	beq.n	800359e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354c:	f000 f8ba 	bl	80036c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	1e5a      	subs	r2, r3, #1
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d112      	bne.n	8003588 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	3310      	adds	r3, #16
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fdfc 	bl	800416c <xTaskRemoveFromEventList>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00e      	beq.n	8003598 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e007      	b.n	8003598 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800358c:	3301      	adds	r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	b25a      	sxtb	r2, r3
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 800359c:	e001      	b.n	80035a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800359e:	2300      	movs	r3, #0
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3738      	adds	r7, #56	; 0x38
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	e7fe      	b.n	80035d6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80035d8:	f001 fcc8 	bl	8004f6c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 fcf1 	bl	8004fc8 <vPortExitCritical>

	return uxReturn;
 80035e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d14d      	bne.n	80036b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 ff7a 	bl	8004514 <xTaskPriorityDisinherit>
 8003620:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	e043      	b.n	80036b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d119      	bne.n	8003664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6858      	ldr	r0, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	461a      	mov	r2, r3
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	f001 ffca 	bl	80055d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	441a      	add	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d32b      	bcc.n	80036b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e026      	b.n	80036b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68d8      	ldr	r0, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	461a      	mov	r2, r3
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	f001 ffb0 	bl	80055d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	425b      	negs	r3, r3
 800367e:	441a      	add	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d207      	bcs.n	80036a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	425b      	negs	r3, r3
 800369a:	441a      	add	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d105      	bne.n	80036b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036ba:	697b      	ldr	r3, [r7, #20]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	441a      	add	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d303      	bcc.n	80036f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	461a      	mov	r2, r3
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f001 ff66 	bl	80055d4 <memcpy>
	}
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003718:	f001 fc28 	bl	8004f6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003724:	e011      	b.n	800374a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b00      	cmp	r3, #0
 800372c:	d012      	beq.n	8003754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3324      	adds	r3, #36	; 0x24
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fd1a 	bl	800416c <xTaskRemoveFromEventList>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800373e:	f000 fded 	bl	800431c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	3b01      	subs	r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	dce9      	bgt.n	8003726 <prvUnlockQueue+0x16>
 8003752:	e000      	b.n	8003756 <prvUnlockQueue+0x46>
					break;
 8003754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800375e:	f001 fc33 	bl	8004fc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003762:	f001 fc03 	bl	8004f6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800376c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800376e:	e011      	b.n	8003794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3310      	adds	r3, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fcf5 	bl	800416c <xTaskRemoveFromEventList>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003788:	f000 fdc8 	bl	800431c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800378c:	7bbb      	ldrb	r3, [r7, #14]
 800378e:	3b01      	subs	r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003798:	2b00      	cmp	r3, #0
 800379a:	dce9      	bgt.n	8003770 <prvUnlockQueue+0x60>
 800379c:	e000      	b.n	80037a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800379e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037a8:	f001 fc0e 	bl	8004fc8 <vPortExitCritical>
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037bc:	f001 fbd6 	bl	8004f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e001      	b.n	80037d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037d2:	f001 fbf9 	bl	8004fc8 <vPortExitCritical>

	return xReturn;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037e8:	f001 fbc0 	bl	8004f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d102      	bne.n	80037fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e001      	b.n	8003802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003802:	f001 fbe1 	bl	8004fc8 <vPortExitCritical>

	return xReturn;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e014      	b.n	800384a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <vQueueAddToRegistry+0x4c>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800382c:	490b      	ldr	r1, [pc, #44]	; (800385c <vQueueAddToRegistry+0x4c>)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <vQueueAddToRegistry+0x4c>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003842:	e005      	b.n	8003850 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b07      	cmp	r3, #7
 800384e:	d9e7      	bls.n	8003820 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20004ba4 	.word	0x20004ba4

08003860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003870:	f001 fb7c 	bl	8004f6c <vPortEnterCritical>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800387a:	b25b      	sxtb	r3, r3
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d103      	bne.n	800388a <vQueueWaitForMessageRestricted+0x2a>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003890:	b25b      	sxtb	r3, r3
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d103      	bne.n	80038a0 <vQueueWaitForMessageRestricted+0x40>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a0:	f001 fb92 	bl	8004fc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3324      	adds	r3, #36	; 0x24
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fc2f 	bl	8004118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff28 	bl	8003710 <prvUnlockQueue>
	}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	; 0x38
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <xTaskCreateStatic+0x28>
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	e7fe      	b.n	80038ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <xTaskCreateStatic+0x42>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e7fe      	b.n	8003908 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800390a:	235c      	movs	r3, #92	; 0x5c
 800390c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b5c      	cmp	r3, #92	; 0x5c
 8003912:	d009      	beq.n	8003928 <xTaskCreateStatic+0x60>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e7fe      	b.n	8003926 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003928:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01e      	beq.n	800396e <xTaskCreateStatic+0xa6>
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01b      	beq.n	800396e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003948:	2300      	movs	r3, #0
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f850 	bl	8003a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003968:	f000 f8dc 	bl	8003b24 <prvAddNewTaskToReadyList>
 800396c:	e001      	b.n	8003972 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003972:	697b      	ldr	r3, [r7, #20]
	}
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af04      	add	r7, sp, #16
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fc05 	bl	80051a0 <pvPortMalloc>
 8003996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800399e:	205c      	movs	r0, #92	; 0x5c
 80039a0:	f001 fbfe 	bl	80051a0 <pvPortMalloc>
 80039a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
 80039b2:	e005      	b.n	80039c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	f001 fcb5 	bl	8005324 <vPortFree>
 80039ba:	e001      	b.n	80039c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	2300      	movs	r3, #0
 80039d2:	9303      	str	r3, [sp, #12]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f80e 	bl	8003a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ea:	69f8      	ldr	r0, [r7, #28]
 80039ec:	f000 f89a 	bl	8003b24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039f0:	2301      	movs	r3, #1
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	e002      	b.n	80039fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039fc:	69bb      	ldr	r3, [r7, #24]
	}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b088      	sub	sp, #32
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	21a5      	movs	r1, #165	; 0xa5
 8003a20:	f001 fde3 	bl	80055ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f023 0307 	bic.w	r3, r3, #7
 8003a3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <prvInitialiseNewTask+0x56>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e7fe      	b.n	8003a5a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01f      	beq.n	8003aa2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e012      	b.n	8003a8e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	7819      	ldrb	r1, [r3, #0]
 8003a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	3334      	adds	r3, #52	; 0x34
 8003a78:	460a      	mov	r2, r1
 8003a7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d9e9      	bls.n	8003a68 <prvInitialiseNewTask+0x62>
 8003a94:	e000      	b.n	8003a98 <prvInitialiseNewTask+0x92>
			{
				break;
 8003a96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aa0:	e003      	b.n	8003aaa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b37      	cmp	r3, #55	; 0x37
 8003aae:	d901      	bls.n	8003ab4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ab0:	2337      	movs	r3, #55	; 0x37
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f8ba 	bl	8002c44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f8b5 	bl	8002c44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	69b8      	ldr	r0, [r7, #24]
 8003b04:	f001 f90c 	bl	8004d20 <pxPortInitialiseStack>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b1a:	bf00      	nop
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b2c:	f001 fa1e 	bl	8004f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b42:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <prvAddNewTaskToReadyList+0xc4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d110      	bne.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b50:	f000 fc08 	bl	8004364 <prvInitialiseTaskLists>
 8003b54:	e00d      	b.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <prvAddNewTaskToReadyList+0xcc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d802      	bhi.n	8003b72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003b7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <prvAddNewTaskToReadyList+0xd0>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <prvAddNewTaskToReadyList+0xd4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d903      	bls.n	8003b98 <prvAddNewTaskToReadyList+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <prvAddNewTaskToReadyList+0xd4>)
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <prvAddNewTaskToReadyList+0xd8>)
 8003ba6:	441a      	add	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7ff f855 	bl	8002c5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bb4:	f001 fa08 	bl	8004fc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <prvAddNewTaskToReadyList+0xcc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <prvAddNewTaskToReadyList+0xc8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d207      	bcs.n	8003bde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <prvAddNewTaskToReadyList+0xdc>)
 8003bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000d9c 	.word	0x20000d9c
 8003bec:	200008c8 	.word	0x200008c8
 8003bf0:	20000da8 	.word	0x20000da8
 8003bf4:	20000db8 	.word	0x20000db8
 8003bf8:	20000da4 	.word	0x20000da4
 8003bfc:	200008cc 	.word	0x200008cc
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <vTaskDelay+0x60>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <vTaskDelay+0x2e>
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e7fe      	b.n	8003c30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c32:	f000 f87f 	bl	8003d34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c36:	2100      	movs	r1, #0
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fcd7 	bl	80045ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c3e:	f000 f887 	bl	8003d50 <xTaskResumeAll>
 8003c42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <vTaskDelay+0x64>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000dc4 	.word	0x20000dc4
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c7a:	463a      	mov	r2, r7
 8003c7c:	1d39      	adds	r1, r7, #4
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff8a 	bl	8002b9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	9202      	str	r2, [sp, #8]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	460a      	mov	r2, r1
 8003c9a:	4920      	ldr	r1, [pc, #128]	; (8003d1c <vTaskStartScheduler+0xb0>)
 8003c9c:	4820      	ldr	r0, [pc, #128]	; (8003d20 <vTaskStartScheduler+0xb4>)
 8003c9e:	f7ff fe13 	bl	80038c8 <xTaskCreateStatic>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <vTaskStartScheduler+0xb8>)
 8003ca6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <vTaskStartScheduler+0xb8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e001      	b.n	8003cba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cc0:	f000 fce8 	bl	8004694 <xTimerCreateTimerTask>
 8003cc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d115      	bne.n	8003cf8 <vTaskStartScheduler+0x8c>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <vTaskStartScheduler+0xbc>)
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <vTaskStartScheduler+0xc0>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <vTaskStartScheduler+0xc4>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cf2:	f001 f89d 	bl	8004e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cf6:	e00d      	b.n	8003d14 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d109      	bne.n	8003d14 <vTaskStartScheduler+0xa8>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e7fe      	b.n	8003d12 <vTaskStartScheduler+0xa6>
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	08005650 	.word	0x08005650
 8003d20:	08004335 	.word	0x08004335
 8003d24:	20000dc0 	.word	0x20000dc0
 8003d28:	20000dbc 	.word	0x20000dbc
 8003d2c:	20000da8 	.word	0x20000da8
 8003d30:	20000da0 	.word	0x20000da0

08003d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <vTaskSuspendAll+0x18>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <vTaskSuspendAll+0x18>)
 8003d40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000dc4 	.word	0x20000dc4

08003d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <xTaskResumeAll+0x2a>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	e7fe      	b.n	8003d78 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d7a:	f001 f8f7 	bl	8004f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	4a37      	ldr	r2, [pc, #220]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d162      	bne.n	8003e56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <xTaskResumeAll+0x118>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05e      	beq.n	8003e56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d98:	e02f      	b.n	8003dfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <xTaskResumeAll+0x11c>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ffb6 	bl	8002d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe ffb1 	bl	8002d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <xTaskResumeAll+0x120>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d903      	bls.n	8003dca <xTaskResumeAll+0x7a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <xTaskResumeAll+0x120>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <xTaskResumeAll+0x124>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7fe ff3c 	bl	8002c5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <xTaskResumeAll+0x128>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <xTaskResumeAll+0x11c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1cb      	bne.n	8003d9a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e08:	f000 fb46 	bl	8004498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <xTaskResumeAll+0x130>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e18:	f000 f846 	bl	8003ea8 <xTaskIncrementTick>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f1      	bne.n	8003e18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <xTaskResumeAll+0x130>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <xTaskResumeAll+0x134>)
 8003e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e56:	f001 f8b7 	bl	8004fc8 <vPortExitCritical>

	return xAlreadyYielded;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000dc4 	.word	0x20000dc4
 8003e68:	20000d9c 	.word	0x20000d9c
 8003e6c:	20000d5c 	.word	0x20000d5c
 8003e70:	20000da4 	.word	0x20000da4
 8003e74:	200008cc 	.word	0x200008cc
 8003e78:	200008c8 	.word	0x200008c8
 8003e7c:	20000db0 	.word	0x20000db0
 8003e80:	20000dac 	.word	0x20000dac
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <xTaskGetTickCount+0x1c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e94:	687b      	ldr	r3, [r7, #4]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000da0 	.word	0x20000da0

08003ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <xTaskIncrementTick+0x144>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 8088 	bne.w	8003fcc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <xTaskIncrementTick+0x148>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ec4:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <xTaskIncrementTick+0x148>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11f      	bne.n	8003f10 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ed0:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <xTaskIncrementTick+0x46>
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	e7fe      	b.n	8003eec <xTaskIncrementTick+0x44>
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <xTaskIncrementTick+0x150>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3e      	ldr	r2, [pc, #248]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4a3e      	ldr	r2, [pc, #248]	; (8003ff8 <xTaskIncrementTick+0x150>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b3e      	ldr	r3, [pc, #248]	; (8003ffc <xTaskIncrementTick+0x154>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <xTaskIncrementTick+0x154>)
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	f000 fac4 	bl	8004498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f10:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <xTaskIncrementTick+0x158>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d349      	bcc.n	8003fae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <xTaskIncrementTick+0x158>)
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	601a      	str	r2, [r3, #0]
					break;
 8003f2c:	e03f      	b.n	8003fae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <xTaskIncrementTick+0x14c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d203      	bcs.n	8003f4e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f46:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <xTaskIncrementTick+0x158>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f4c:	e02f      	b.n	8003fae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fee0 	bl	8002d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fed7 	bl	8002d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <xTaskIncrementTick+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d903      	bls.n	8003f7e <xTaskIncrementTick+0xd6>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4a22      	ldr	r2, [pc, #136]	; (8004004 <xTaskIncrementTick+0x15c>)
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <xTaskIncrementTick+0x160>)
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe fe62 	bl	8002c5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	; (800400c <xTaskIncrementTick+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3b8      	bcc.n	8003f1a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fac:	e7b5      	b.n	8003f1a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <xTaskIncrementTick+0x164>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4914      	ldr	r1, [pc, #80]	; (8004008 <xTaskIncrementTick+0x160>)
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d907      	bls.n	8003fd6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e004      	b.n	8003fd6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xTaskIncrementTick+0x168>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <xTaskIncrementTick+0x168>)
 8003fd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <xTaskIncrementTick+0x16c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fe2:	697b      	ldr	r3, [r7, #20]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000dc4 	.word	0x20000dc4
 8003ff0:	20000da0 	.word	0x20000da0
 8003ff4:	20000d54 	.word	0x20000d54
 8003ff8:	20000d58 	.word	0x20000d58
 8003ffc:	20000db4 	.word	0x20000db4
 8004000:	20000dbc 	.word	0x20000dbc
 8004004:	20000da4 	.word	0x20000da4
 8004008:	200008cc 	.word	0x200008cc
 800400c:	200008c8 	.word	0x200008c8
 8004010:	20000dac 	.word	0x20000dac
 8004014:	20000db0 	.word	0x20000db0

08004018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800401e:	4b27      	ldr	r3, [pc, #156]	; (80040bc <vTaskSwitchContext+0xa4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004026:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <vTaskSwitchContext+0xa8>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800402c:	e040      	b.n	80040b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <vTaskSwitchContext+0xa8>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <vTaskSwitchContext+0xac>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e00f      	b.n	800405c <vTaskSwitchContext+0x44>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <vTaskSwitchContext+0x3e>
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e7fe      	b.n	8004054 <vTaskSwitchContext+0x3c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b01      	subs	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	491a      	ldr	r1, [pc, #104]	; (80040c8 <vTaskSwitchContext+0xb0>)
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0e5      	beq.n	800403c <vTaskSwitchContext+0x24>
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <vTaskSwitchContext+0xb0>)
 800407c:	4413      	add	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3308      	adds	r3, #8
 8004092:	429a      	cmp	r2, r3
 8004094:	d104      	bne.n	80040a0 <vTaskSwitchContext+0x88>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <vTaskSwitchContext+0xb4>)
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <vTaskSwitchContext+0xac>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000dc4 	.word	0x20000dc4
 80040c0:	20000db0 	.word	0x20000db0
 80040c4:	20000da4 	.word	0x20000da4
 80040c8:	200008cc 	.word	0x200008cc
 80040cc:	200008c8 	.word	0x200008c8

080040d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <vTaskPlaceOnEventList+0x24>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e7fe      	b.n	80040f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <vTaskPlaceOnEventList+0x44>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3318      	adds	r3, #24
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fe fdd2 	bl	8002ca6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004102:	2101      	movs	r1, #1
 8004104:	6838      	ldr	r0, [r7, #0]
 8004106:	f000 fa71 	bl	80045ec <prvAddCurrentTaskToDelayedList>
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200008c8 	.word	0x200008c8

08004118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <vTaskPlaceOnEventListRestricted+0x26>
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e7fe      	b.n	800413c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <vTaskPlaceOnEventListRestricted+0x50>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3318      	adds	r3, #24
 8004144:	4619      	mov	r1, r3
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7fe fd89 	bl	8002c5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	68b8      	ldr	r0, [r7, #8]
 800415c:	f000 fa46 	bl	80045ec <prvAddCurrentTaskToDelayedList>
	}
 8004160:	bf00      	nop
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	200008c8 	.word	0x200008c8

0800416c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <xTaskRemoveFromEventList+0x2a>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e7fe      	b.n	8004194 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3318      	adds	r3, #24
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fdbc 	bl	8002d18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <xTaskRemoveFromEventList+0xac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fdb3 	bl	8002d18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <xTaskRemoveFromEventList+0xb0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d903      	bls.n	80041c6 <xTaskRemoveFromEventList+0x5a>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <xTaskRemoveFromEventList+0xb0>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <xTaskRemoveFromEventList+0xb4>)
 80041d4:	441a      	add	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7fe fd3e 	bl	8002c5e <vListInsertEnd>
 80041e2:	e005      	b.n	80041f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3318      	adds	r3, #24
 80041e8:	4619      	mov	r1, r3
 80041ea:	480e      	ldr	r0, [pc, #56]	; (8004224 <xTaskRemoveFromEventList+0xb8>)
 80041ec:	f7fe fd37 	bl	8002c5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <xTaskRemoveFromEventList+0xbc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d905      	bls.n	800420a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <xTaskRemoveFromEventList+0xc0>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e001      	b.n	800420e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800420e:	697b      	ldr	r3, [r7, #20]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000dc4 	.word	0x20000dc4
 800421c:	20000da4 	.word	0x20000da4
 8004220:	200008cc 	.word	0x200008cc
 8004224:	20000d5c 	.word	0x20000d5c
 8004228:	200008c8 	.word	0x200008c8
 800422c:	20000db0 	.word	0x20000db0

08004230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <vTaskInternalSetTimeOutState+0x24>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <vTaskInternalSetTimeOutState+0x28>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	20000db4 	.word	0x20000db4
 8004258:	20000da0 	.word	0x20000da0

0800425c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xTaskCheckForTimeOut+0x24>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e7fe      	b.n	800427e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <xTaskCheckForTimeOut+0x3e>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e7fe      	b.n	8004298 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800429a:	f000 fe67 	bl	8004f6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <xTaskCheckForTimeOut+0xb8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d102      	bne.n	80042be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e023      	b.n	8004306 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <xTaskCheckForTimeOut+0xbc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d007      	beq.n	80042da <xTaskCheckForTimeOut+0x7e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042d4:	2301      	movs	r3, #1
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e015      	b.n	8004306 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d20b      	bcs.n	80042fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff9d 	bl	8004230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e004      	b.n	8004306 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004306:	f000 fe5f 	bl	8004fc8 <vPortExitCritical>

	return xReturn;
 800430a:	69fb      	ldr	r3, [r7, #28]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000da0 	.word	0x20000da0
 8004318:	20000db4 	.word	0x20000db4

0800431c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <vTaskMissedYield+0x14>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000db0 	.word	0x20000db0

08004334 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800433c:	f000 f852 	bl	80043e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <prvIdleTask+0x28>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d9f9      	bls.n	800433c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <prvIdleTask+0x2c>)
 800434a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004358:	e7f0      	b.n	800433c <prvIdleTask+0x8>
 800435a:	bf00      	nop
 800435c:	200008cc 	.word	0x200008cc
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	e00c      	b.n	800438a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <prvInitialiseTaskLists+0x60>)
 800437c:	4413      	add	r3, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fc40 	bl	8002c04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3301      	adds	r3, #1
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b37      	cmp	r3, #55	; 0x37
 800438e:	d9ef      	bls.n	8004370 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004390:	480d      	ldr	r0, [pc, #52]	; (80043c8 <prvInitialiseTaskLists+0x64>)
 8004392:	f7fe fc37 	bl	8002c04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004396:	480d      	ldr	r0, [pc, #52]	; (80043cc <prvInitialiseTaskLists+0x68>)
 8004398:	f7fe fc34 	bl	8002c04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800439c:	480c      	ldr	r0, [pc, #48]	; (80043d0 <prvInitialiseTaskLists+0x6c>)
 800439e:	f7fe fc31 	bl	8002c04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043a2:	480c      	ldr	r0, [pc, #48]	; (80043d4 <prvInitialiseTaskLists+0x70>)
 80043a4:	f7fe fc2e 	bl	8002c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043a8:	480b      	ldr	r0, [pc, #44]	; (80043d8 <prvInitialiseTaskLists+0x74>)
 80043aa:	f7fe fc2b 	bl	8002c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <prvInitialiseTaskLists+0x78>)
 80043b0:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <prvInitialiseTaskLists+0x64>)
 80043b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <prvInitialiseTaskLists+0x7c>)
 80043b6:	4a05      	ldr	r2, [pc, #20]	; (80043cc <prvInitialiseTaskLists+0x68>)
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200008cc 	.word	0x200008cc
 80043c8:	20000d2c 	.word	0x20000d2c
 80043cc:	20000d40 	.word	0x20000d40
 80043d0:	20000d5c 	.word	0x20000d5c
 80043d4:	20000d70 	.word	0x20000d70
 80043d8:	20000d88 	.word	0x20000d88
 80043dc:	20000d54 	.word	0x20000d54
 80043e0:	20000d58 	.word	0x20000d58

080043e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ea:	e019      	b.n	8004420 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043ec:	f000 fdbe 	bl	8004f6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <prvCheckTasksWaitingTermination+0x4c>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fc8b 	bl	8002d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <prvCheckTasksWaitingTermination+0x50>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <prvCheckTasksWaitingTermination+0x50>)
 800440a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <prvCheckTasksWaitingTermination+0x54>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3b01      	subs	r3, #1
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <prvCheckTasksWaitingTermination+0x54>)
 8004414:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004416:	f000 fdd7 	bl	8004fc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f80e 	bl	800443c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <prvCheckTasksWaitingTermination+0x54>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e1      	bne.n	80043ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000d70 	.word	0x20000d70
 8004434:	20000d9c 	.word	0x20000d9c
 8004438:	20000d84 	.word	0x20000d84

0800443c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4618      	mov	r0, r3
 8004454:	f000 ff66 	bl	8005324 <vPortFree>
				vPortFree( pxTCB );
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 ff63 	bl	8005324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800445e:	e017      	b.n	8004490 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004466:	2b01      	cmp	r3, #1
 8004468:	d103      	bne.n	8004472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 ff5a 	bl	8005324 <vPortFree>
	}
 8004470:	e00e      	b.n	8004490 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004478:	2b02      	cmp	r3, #2
 800447a:	d009      	beq.n	8004490 <prvDeleteTCB+0x54>
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e7fe      	b.n	800448e <prvDeleteTCB+0x52>
	}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <prvResetNextTaskUnblockTime+0x38>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <prvResetNextTaskUnblockTime+0x3c>)
 80044aa:	f04f 32ff 	mov.w	r2, #4294967295
 80044ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044b0:	e008      	b.n	80044c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <prvResetNextTaskUnblockTime+0x38>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <prvResetNextTaskUnblockTime+0x3c>)
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000d54 	.word	0x20000d54
 80044d4:	20000dbc 	.word	0x20000dbc

080044d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <xTaskGetSchedulerState+0x34>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044e6:	2301      	movs	r3, #1
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	e008      	b.n	80044fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <xTaskGetSchedulerState+0x38>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044f4:	2302      	movs	r3, #2
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e001      	b.n	80044fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044fe:	687b      	ldr	r3, [r7, #4]
	}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000da8 	.word	0x20000da8
 8004510:	20000dc4 	.word	0x20000dc4

08004514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d054      	beq.n	80045d4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <xTaskPriorityDisinherit+0xcc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	429a      	cmp	r2, r3
 8004532:	d009      	beq.n	8004548 <xTaskPriorityDisinherit+0x34>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e7fe      	b.n	8004546 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <xTaskPriorityDisinherit+0x50>
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	e7fe      	b.n	8004562 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	1e5a      	subs	r2, r3, #1
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	429a      	cmp	r2, r3
 8004578:	d02c      	beq.n	80045d4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d128      	bne.n	80045d4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fbc6 	bl	8002d18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <xTaskPriorityDisinherit+0xd0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d903      	bls.n	80045b4 <xTaskPriorityDisinherit+0xa0>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <xTaskPriorityDisinherit+0xd0>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <xTaskPriorityDisinherit+0xd4>)
 80045c2:	441a      	add	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fb47 	bl	8002c5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045d4:	697b      	ldr	r3, [r7, #20]
	}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200008c8 	.word	0x200008c8
 80045e4:	20000da4 	.word	0x20000da4
 80045e8:	200008cc 	.word	0x200008cc

080045ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045f6:	4b21      	ldr	r3, [pc, #132]	; (800467c <prvAddCurrentTaskToDelayedList+0x90>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3304      	adds	r3, #4
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fb88 	bl	8002d18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d10a      	bne.n	8004626 <prvAddCurrentTaskToDelayedList+0x3a>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4819      	ldr	r0, [pc, #100]	; (8004684 <prvAddCurrentTaskToDelayedList+0x98>)
 8004620:	f7fe fb1d 	bl	8002c5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004624:	e026      	b.n	8004674 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	429a      	cmp	r2, r3
 800463c:	d209      	bcs.n	8004652 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f7fe fb2b 	bl	8002ca6 <vListInsert>
}
 8004650:	e010      	b.n	8004674 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <prvAddCurrentTaskToDelayedList+0x94>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fe fb21 	bl	8002ca6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d202      	bcs.n	8004674 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000da0 	.word	0x20000da0
 8004680:	200008c8 	.word	0x200008c8
 8004684:	20000d88 	.word	0x20000d88
 8004688:	20000d58 	.word	0x20000d58
 800468c:	20000d54 	.word	0x20000d54
 8004690:	20000dbc 	.word	0x20000dbc

08004694 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800469e:	f000 faff 	bl	8004ca0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <xTimerCreateTimerTask+0x80>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d021      	beq.n	80046ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046b2:	1d3a      	adds	r2, r7, #4
 80046b4:	f107 0108 	add.w	r1, r7, #8
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fa87 	bl	8002bd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	9202      	str	r2, [sp, #8]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2302      	movs	r3, #2
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	460a      	mov	r2, r1
 80046d4:	4910      	ldr	r1, [pc, #64]	; (8004718 <xTimerCreateTimerTask+0x84>)
 80046d6:	4811      	ldr	r0, [pc, #68]	; (800471c <xTimerCreateTimerTask+0x88>)
 80046d8:	f7ff f8f6 	bl	80038c8 <xTaskCreateStatic>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <xTimerCreateTimerTask+0x8c>)
 80046e0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <xTimerCreateTimerTask+0x8c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046ea:	2301      	movs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <xTimerCreateTimerTask+0x74>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	e7fe      	b.n	8004706 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004708:	697b      	ldr	r3, [r7, #20]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000df8 	.word	0x20000df8
 8004718:	08005658 	.word	0x08005658
 800471c:	08004855 	.word	0x08004855
 8004720:	20000dfc 	.word	0x20000dfc

08004724 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <xTimerGenericCommand+0x2c>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	e7fe      	b.n	800474e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <xTimerGenericCommand+0x94>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02a      	beq.n	80047ae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b05      	cmp	r3, #5
 8004768:	dc18      	bgt.n	800479c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800476a:	f7ff feb5 	bl	80044d8 <xTaskGetSchedulerState>
 800476e:	4603      	mov	r3, r0
 8004770:	2b02      	cmp	r3, #2
 8004772:	d109      	bne.n	8004788 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004774:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <xTimerGenericCommand+0x94>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	f107 0110 	add.w	r1, r7, #16
 800477c:	2300      	movs	r3, #0
 800477e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004780:	f7fe fc32 	bl	8002fe8 <xQueueGenericSend>
 8004784:	6278      	str	r0, [r7, #36]	; 0x24
 8004786:	e012      	b.n	80047ae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <xTimerGenericCommand+0x94>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	f107 0110 	add.w	r1, r7, #16
 8004790:	2300      	movs	r3, #0
 8004792:	2200      	movs	r2, #0
 8004794:	f7fe fc28 	bl	8002fe8 <xQueueGenericSend>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24
 800479a:	e008      	b.n	80047ae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <xTimerGenericCommand+0x94>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	f107 0110 	add.w	r1, r7, #16
 80047a4:	2300      	movs	r3, #0
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	f7fe fd18 	bl	80031dc <xQueueGenericSendFromISR>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000df8 	.word	0x20000df8

080047bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <prvProcessExpiredTimer+0x94>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fa9f 	bl	8002d18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d021      	beq.n	800482c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	18d1      	adds	r1, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f000 f8d1 	bl	800499c <prvInsertTimerInActiveList>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01e      	beq.n	800483e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004800:	2300      	movs	r3, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2300      	movs	r3, #0
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	2100      	movs	r1, #0
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ff8a 	bl	8004724 <xTimerGenericCommand>
 8004810:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d112      	bne.n	800483e <prvProcessExpiredTimer+0x82>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e7fe      	b.n	800482a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	4798      	blx	r3
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000df0 	.word	0x20000df0

08004854 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f857 	bl	8004914 <prvGetNextExpireTime>
 8004866:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f803 	bl	8004878 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004872:	f000 f8d5 	bl	8004a20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004876:	e7f1      	b.n	800485c <prvTimerTask+0x8>

08004878 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004882:	f7ff fa57 	bl	8003d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f866 	bl	800495c <prvSampleTimeNow>
 8004890:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d130      	bne.n	80048fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <prvProcessTimerOrBlockTask+0x3c>
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d806      	bhi.n	80048b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048a6:	f7ff fa53 	bl	8003d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff85 	bl	80047bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048b2:	e024      	b.n	80048fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <prvProcessTimerOrBlockTask+0x90>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <prvProcessTimerOrBlockTask+0x50>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <prvProcessTimerOrBlockTask+0x52>
 80048c8:	2300      	movs	r3, #0
 80048ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <prvProcessTimerOrBlockTask+0x94>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	f7fe ffc1 	bl	8003860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048de:	f7ff fa37 	bl	8003d50 <xTaskResumeAll>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <prvProcessTimerOrBlockTask+0x98>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
}
 80048f8:	e001      	b.n	80048fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048fa:	f7ff fa29 	bl	8003d50 <xTaskResumeAll>
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000df4 	.word	0x20000df4
 800490c:	20000df8 	.word	0x20000df8
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <prvGetNextExpireTime+0x44>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <prvGetNextExpireTime+0x16>
 8004926:	2201      	movs	r2, #1
 8004928:	e000      	b.n	800492c <prvGetNextExpireTime+0x18>
 800492a:	2200      	movs	r2, #0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvGetNextExpireTime+0x44>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e001      	b.n	8004948 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000df0 	.word	0x20000df0

0800495c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004964:	f7ff fa90 	bl	8003e88 <xTaskGetTickCount>
 8004968:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <prvSampleTimeNow+0x3c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	429a      	cmp	r2, r3
 8004972:	d205      	bcs.n	8004980 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004974:	f000 f930 	bl	8004bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e002      	b.n	8004986 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <prvSampleTimeNow+0x3c>)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800498c:	68fb      	ldr	r3, [r7, #12]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000e00 	.word	0x20000e00

0800499c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d812      	bhi.n	80049e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	1ad2      	subs	r2, r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e01b      	b.n	8004a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <prvInsertTimerInActiveList+0x7c>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7fe f960 	bl	8002ca6 <vListInsert>
 80049e6:	e012      	b.n	8004a0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d206      	bcs.n	80049fe <prvInsertTimerInActiveList+0x62>
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e007      	b.n	8004a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <prvInsertTimerInActiveList+0x80>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7fe f94c 	bl	8002ca6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a0e:	697b      	ldr	r3, [r7, #20]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000df4 	.word	0x20000df4
 8004a1c:	20000df0 	.word	0x20000df0

08004a20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a26:	e0c6      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da17      	bge.n	8004a5e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	3304      	adds	r3, #4
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <prvProcessReceivedCommands+0x2e>
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e7fe      	b.n	8004a4c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a54:	6850      	ldr	r0, [r2, #4]
 8004a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f2c0 80a7 	blt.w	8004bb4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe f94e 	bl	8002d18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff6c 	bl	800495c <prvSampleTimeNow>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	f200 8094 	bhi.w	8004bb6 <prvProcessReceivedCommands+0x196>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <prvProcessReceivedCommands+0x74>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004abd 	.word	0x08004abd
 8004aa0:	08004b2f 	.word	0x08004b2f
 8004aa4:	08004b43 	.word	0x08004b43
 8004aa8:	08004b8b 	.word	0x08004b8b
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004abd 	.word	0x08004abd
 8004ab4:	08004b2f 	.word	0x08004b2f
 8004ab8:	08004b43 	.word	0x08004b43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	18d1      	adds	r1, r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004adc:	f7ff ff5e 	bl	800499c <prvInsertTimerInActiveList>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d067      	beq.n	8004bb6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05c      	beq.n	8004bb6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	441a      	add	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0e:	f7ff fe09 	bl	8004724 <xTimerGenericCommand>
 8004b12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d14d      	bne.n	8004bb6 <prvProcessReceivedCommands+0x196>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	e7fe      	b.n	8004b2c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b40:	e039      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <prvProcessReceivedCommands+0x156>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e7fe      	b.n	8004b74 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	18d1      	adds	r1, r2, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b84:	f7ff ff0a 	bl	800499c <prvInsertTimerInActiveList>
					break;
 8004b88:	e015      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9a:	f000 fbc3 	bl	8005324 <vPortFree>
 8004b9e:	e00a      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bb2:	e000      	b.n	8004bb6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvProcessReceivedCommands+0x1b4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d39      	adds	r1, r7, #4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fba0 	bl	8003304 <xQueueReceive>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af2e 	bne.w	8004a28 <prvProcessReceivedCommands+0x8>
	}
}
 8004bcc:	bf00      	nop
 8004bce:	3730      	adds	r7, #48	; 0x30
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000df8 	.word	0x20000df8

08004bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bde:	e047      	b.n	8004c70 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be0:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe f88d 	bl	8002d18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02d      	beq.n	8004c70 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d90e      	bls.n	8004c44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7fe f832 	bl	8002ca6 <vListInsert>
 8004c42:	e015      	b.n	8004c70 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fd68 	bl	8004724 <xTimerGenericCommand>
 8004c54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <prvSwitchTimerLists+0x98>
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	e7fe      	b.n	8004c6e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1b2      	bne.n	8004be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <prvSwitchTimerLists+0xc4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <prvSwitchTimerLists+0xc0>)
 8004c86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <prvSwitchTimerLists+0xc4>)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6013      	str	r3, [r2, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000df0 	.word	0x20000df0
 8004c9c:	20000df4 	.word	0x20000df4

08004ca0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ca6:	f000 f961 	bl	8004f6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d120      	bne.n	8004cf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cb2:	4814      	ldr	r0, [pc, #80]	; (8004d04 <prvCheckForValidListAndQueue+0x64>)
 8004cb4:	f7fd ffa6 	bl	8002c04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cb8:	4813      	ldr	r0, [pc, #76]	; (8004d08 <prvCheckForValidListAndQueue+0x68>)
 8004cba:	f7fd ffa3 	bl	8002c04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <prvCheckForValidListAndQueue+0x6c>)
 8004cc0:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <prvCheckForValidListAndQueue+0x64>)
 8004cc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <prvCheckForValidListAndQueue+0x70>)
 8004cc6:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <prvCheckForValidListAndQueue+0x68>)
 8004cc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <prvCheckForValidListAndQueue+0x74>)
 8004cd0:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <prvCheckForValidListAndQueue+0x78>)
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	200a      	movs	r0, #10
 8004cd6:	f7fe f8b1 	bl	8002e3c <xQueueGenericCreateStatic>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004cde:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <prvCheckForValidListAndQueue+0x60>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	490b      	ldr	r1, [pc, #44]	; (8004d1c <prvCheckForValidListAndQueue+0x7c>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fd8e 	bl	8003810 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cf4:	f000 f968 	bl	8004fc8 <vPortExitCritical>
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000df8 	.word	0x20000df8
 8004d04:	20000dc8 	.word	0x20000dc8
 8004d08:	20000ddc 	.word	0x20000ddc
 8004d0c:	20000df0 	.word	0x20000df0
 8004d10:	20000df4 	.word	0x20000df4
 8004d14:	20000ea4 	.word	0x20000ea4
 8004d18:	20000e04 	.word	0x20000e04
 8004d1c:	08005660 	.word	0x08005660

08004d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b04      	subs	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <pxPortInitialiseStack+0x64>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3b14      	subs	r3, #20
 8004d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f06f 0202 	mvn.w	r2, #2
 8004d6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b20      	subs	r3, #32
 8004d74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	08004d89 	.word	0x08004d89

08004d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <prvTaskExitError+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d009      	beq.n	8004db0 <prvTaskExitError+0x28>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e7fe      	b.n	8004dae <prvTaskExitError+0x26>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dc2:	bf00      	nop
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0fc      	beq.n	8004dc4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	2000000c 	.word	0x2000000c
 8004ddc:	00000000 	.word	0x00000000

08004de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <pxCurrentTCBConst2>)
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	6808      	ldr	r0, [r1, #0]
 8004de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	f380 8809 	msr	PSP, r0
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f380 8811 	msr	BASEPRI, r0
 8004dfa:	4770      	bx	lr
 8004dfc:	f3af 8000 	nop.w

08004e00 <pxCurrentTCBConst2>:
 8004e00:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e08:	4808      	ldr	r0, [pc, #32]	; (8004e2c <prvPortStartFirstTask+0x24>)
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	6800      	ldr	r0, [r0, #0]
 8004e0e:	f380 8808 	msr	MSP, r0
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8814 	msr	CONTROL, r0
 8004e1a:	b662      	cpsie	i
 8004e1c:	b661      	cpsie	f
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	df00      	svc	0
 8004e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e2a:	bf00      	nop
 8004e2c:	e000ed08 	.word	0xe000ed08

08004e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e36:	4b44      	ldr	r3, [pc, #272]	; (8004f48 <xPortStartScheduler+0x118>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a44      	ldr	r2, [pc, #272]	; (8004f4c <xPortStartScheduler+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d109      	bne.n	8004e54 <xPortStartScheduler+0x24>
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e7fe      	b.n	8004e52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e54:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <xPortStartScheduler+0x118>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <xPortStartScheduler+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d109      	bne.n	8004e72 <xPortStartScheduler+0x42>
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e7fe      	b.n	8004e70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e72:	4b38      	ldr	r3, [pc, #224]	; (8004f54 <xPortStartScheduler+0x124>)
 8004e74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <xPortStartScheduler+0x128>)
 8004e98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e9a:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ea0:	e009      	b.n	8004eb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d0ef      	beq.n	8004ea2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ec2:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1c3 0307 	rsb	r3, r3, #7
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d009      	beq.n	8004ee2 <xPortStartScheduler+0xb2>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	e7fe      	b.n	8004ee0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004eea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <xPortStartScheduler+0x12c>)
 8004ef6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f0c:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <xPortStartScheduler+0x130>)
 8004f12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f18:	f000 f8d6 	bl	80050c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f1c:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <xPortStartScheduler+0x134>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f22:	f000 f8f5 	bl	8005110 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f26:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <xPortStartScheduler+0x138>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <xPortStartScheduler+0x138>)
 8004f2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f32:	f7ff ff69 	bl	8004e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f36:	f7ff f86f 	bl	8004018 <vTaskSwitchContext>
	prvTaskExitError();
 8004f3a:	f7ff ff25 	bl	8004d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed00 	.word	0xe000ed00
 8004f4c:	410fc271 	.word	0x410fc271
 8004f50:	410fc270 	.word	0x410fc270
 8004f54:	e000e400 	.word	0xe000e400
 8004f58:	20000ef4 	.word	0x20000ef4
 8004f5c:	20000ef8 	.word	0x20000ef8
 8004f60:	e000ed20 	.word	0xe000ed20
 8004f64:	2000000c 	.word	0x2000000c
 8004f68:	e000ef34 	.word	0xe000ef34

08004f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <vPortEnterCritical+0x54>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <vPortEnterCritical+0x54>)
 8004f8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <vPortEnterCritical+0x54>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10e      	bne.n	8004fb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <vPortEnterCritical+0x58>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <vPortEnterCritical+0x48>
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	e7fe      	b.n	8004fb2 <vPortEnterCritical+0x46>
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	2000000c 	.word	0x2000000c
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <vPortExitCritical+0x4c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <vPortExitCritical+0x22>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e7fe      	b.n	8004fe8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <vPortExitCritical+0x4c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <vPortExitCritical+0x4c>)
 8004ff2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <vPortExitCritical+0x4c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <vPortExitCritical+0x3e>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
	...

08005020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005020:	f3ef 8009 	mrs	r0, PSP
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	4b15      	ldr	r3, [pc, #84]	; (8005080 <pxCurrentTCBConst>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	f01e 0f10 	tst.w	lr, #16
 8005030:	bf08      	it	eq
 8005032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	6010      	str	r0, [r2, #0]
 800503c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005044:	f380 8811 	msr	BASEPRI, r0
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f7fe ffe2 	bl	8004018 <vTaskSwitchContext>
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f380 8811 	msr	BASEPRI, r0
 800505c:	bc09      	pop	{r0, r3}
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	6808      	ldr	r0, [r1, #0]
 8005062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005066:	f01e 0f10 	tst.w	lr, #16
 800506a:	bf08      	it	eq
 800506c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005070:	f380 8809 	msr	PSP, r0
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst>:
 8005080:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a0:	f7fe ff02 	bl	8003ea8 <xTaskIncrementTick>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <SysTick_Handler+0x3c>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <vPortSetupTimerInterrupt+0x34>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <vPortSetupTimerInterrupt+0x38>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <vPortSetupTimerInterrupt+0x3c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <vPortSetupTimerInterrupt+0x40>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <vPortSetupTimerInterrupt+0x44>)
 80050e6:	3b01      	subs	r3, #1
 80050e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <vPortSetupTimerInterrupt+0x34>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010
 8005100:	e000e018 	.word	0xe000e018
 8005104:	20000000 	.word	0x20000000
 8005108:	10624dd3 	.word	0x10624dd3
 800510c:	e000e014 	.word	0xe000e014

08005110 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005110:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005120 <vPortEnableVFP+0x10>
 8005114:	6801      	ldr	r1, [r0, #0]
 8005116:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800511a:	6001      	str	r1, [r0, #0]
 800511c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800511e:	bf00      	nop
 8005120:	e000ed88 	.word	0xe000ed88

08005124 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800512a:	f3ef 8305 	mrs	r3, IPSR
 800512e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d913      	bls.n	800515e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <vPortValidateInterruptPriority+0x6c>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <vPortValidateInterruptPriority+0x70>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	7afa      	ldrb	r2, [r7, #11]
 8005146:	429a      	cmp	r2, r3
 8005148:	d209      	bcs.n	800515e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e7fe      	b.n	800515c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <vPortValidateInterruptPriority+0x74>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <vPortValidateInterruptPriority+0x78>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d909      	bls.n	8005182 <vPortValidateInterruptPriority+0x5e>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	e7fe      	b.n	8005180 <vPortValidateInterruptPriority+0x5c>
	}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000e3f0 	.word	0xe000e3f0
 8005194:	20000ef4 	.word	0x20000ef4
 8005198:	e000ed0c 	.word	0xe000ed0c
 800519c:	20000ef8 	.word	0x20000ef8

080051a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051ac:	f7fe fdc2 	bl	8003d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051b0:	4b57      	ldr	r3, [pc, #348]	; (8005310 <pvPortMalloc+0x170>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b8:	f000 f90c 	bl	80053d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051bc:	4b55      	ldr	r3, [pc, #340]	; (8005314 <pvPortMalloc+0x174>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 808c 	bne.w	80052e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01c      	beq.n	800520a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80051d0:	2208      	movs	r2, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f023 0307 	bic.w	r3, r3, #7
 80051e8:	3308      	adds	r3, #8
 80051ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <pvPortMalloc+0x6a>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e7fe      	b.n	8005208 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d068      	beq.n	80052e2 <pvPortMalloc+0x142>
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <pvPortMalloc+0x178>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d863      	bhi.n	80052e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800521a:	4b40      	ldr	r3, [pc, #256]	; (800531c <pvPortMalloc+0x17c>)
 800521c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800521e:	4b3f      	ldr	r3, [pc, #252]	; (800531c <pvPortMalloc+0x17c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005224:	e004      	b.n	8005230 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <pvPortMalloc+0xa2>
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f1      	bne.n	8005226 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005242:	4b33      	ldr	r3, [pc, #204]	; (8005310 <pvPortMalloc+0x170>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	429a      	cmp	r2, r3
 800524a:	d04a      	beq.n	80052e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2208      	movs	r2, #8
 8005252:	4413      	add	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	429a      	cmp	r2, r3
 800526c:	d91e      	bls.n	80052ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <pvPortMalloc+0xf4>
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e7fe      	b.n	8005292 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052a6:	69b8      	ldr	r0, [r7, #24]
 80052a8:	f000 f8f6 	bl	8005498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <pvPortMalloc+0x178>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x178>)
 80052b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ba:	4b17      	ldr	r3, [pc, #92]	; (8005318 <pvPortMalloc+0x178>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <pvPortMalloc+0x180>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d203      	bcs.n	80052ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <pvPortMalloc+0x178>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <pvPortMalloc+0x180>)
 80052cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <pvPortMalloc+0x174>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052e2:	f7fe fd35 	bl	8003d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <pvPortMalloc+0x164>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e7fe      	b.n	8005302 <pvPortMalloc+0x162>
	return pvReturn;
 8005304:	69fb      	ldr	r3, [r7, #28]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	; 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20004b04 	.word	0x20004b04
 8005314:	20004b10 	.word	0x20004b10
 8005318:	20004b08 	.word	0x20004b08
 800531c:	20004afc 	.word	0x20004afc
 8005320:	20004b0c 	.word	0x20004b0c

08005324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d046      	beq.n	80053c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005336:	2308      	movs	r3, #8
 8005338:	425b      	negs	r3, r3
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <vPortFree+0xa8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <vPortFree+0x42>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e7fe      	b.n	8005364 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <vPortFree+0x5e>
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b11      	ldr	r3, [pc, #68]	; (80053cc <vPortFree+0xa8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d019      	beq.n	80053c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d115      	bne.n	80053c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <vPortFree+0xa8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fcc4 	bl	8003d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <vPortFree+0xac>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <vPortFree+0xac>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f86c 	bl	8005498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053c0:	f7fe fcc6 	bl	8003d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20004b10 	.word	0x20004b10
 80053d0:	20004b08 	.word	0x20004b08

080053d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <prvHeapInit+0xac>)
 80053e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3307      	adds	r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <prvHeapInit+0xac>)
 8005404:	4413      	add	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <prvHeapInit+0xb0>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <prvHeapInit+0xb0>)
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005420:	2208      	movs	r2, #8
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <prvHeapInit+0xb4>)
 8005434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <prvHeapInit+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <prvHeapInit+0xb4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvHeapInit+0xb4>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <prvHeapInit+0xb8>)
 8005462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <prvHeapInit+0xbc>)
 800546a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvHeapInit+0xc0>)
 800546e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000efc 	.word	0x20000efc
 8005484:	20004afc 	.word	0x20004afc
 8005488:	20004b04 	.word	0x20004b04
 800548c:	20004b0c 	.word	0x20004b0c
 8005490:	20004b08 	.word	0x20004b08
 8005494:	20004b10 	.word	0x20004b10

08005498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <prvInsertBlockIntoFreeList+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e002      	b.n	80054ac <prvInsertBlockIntoFreeList+0x14>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d8f7      	bhi.n	80054a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4413      	add	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d108      	bne.n	80054da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	441a      	add	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d118      	bne.n	8005520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <prvInsertBlockIntoFreeList+0xb0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d00d      	beq.n	8005516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e008      	b.n	8005528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvInsertBlockIntoFreeList+0xb0>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e003      	b.n	8005528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d002      	beq.n	8005536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20004afc 	.word	0x20004afc
 8005548:	20004b04 	.word	0x20004b04

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4e0d      	ldr	r6, [pc, #52]	; (8005584 <__libc_init_array+0x38>)
 8005550:	4c0d      	ldr	r4, [pc, #52]	; (8005588 <__libc_init_array+0x3c>)
 8005552:	1ba4      	subs	r4, r4, r6
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	2500      	movs	r5, #0
 8005558:	42a5      	cmp	r5, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	4e0b      	ldr	r6, [pc, #44]	; (800558c <__libc_init_array+0x40>)
 800555e:	4c0c      	ldr	r4, [pc, #48]	; (8005590 <__libc_init_array+0x44>)
 8005560:	f000 f858 	bl	8005614 <_init>
 8005564:	1ba4      	subs	r4, r4, r6
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	2500      	movs	r5, #0
 800556a:	42a5      	cmp	r5, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005574:	4798      	blx	r3
 8005576:	3501      	adds	r5, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800557e:	4798      	blx	r3
 8005580:	3501      	adds	r5, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	080057b8 	.word	0x080057b8
 8005588:	080057b8 	.word	0x080057b8
 800558c:	080057b8 	.word	0x080057b8
 8005590:	080057bc 	.word	0x080057bc

08005594 <__locale_ctype_ptr>:
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <__locale_ctype_ptr+0x14>)
 8005596:	4a05      	ldr	r2, [pc, #20]	; (80055ac <__locale_ctype_ptr+0x18>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf08      	it	eq
 80055a0:	4613      	moveq	r3, r2
 80055a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80055a6:	4770      	bx	lr
 80055a8:	20000010 	.word	0x20000010
 80055ac:	20000074 	.word	0x20000074

080055b0 <__ascii_mbtowc>:
 80055b0:	b082      	sub	sp, #8
 80055b2:	b901      	cbnz	r1, 80055b6 <__ascii_mbtowc+0x6>
 80055b4:	a901      	add	r1, sp, #4
 80055b6:	b142      	cbz	r2, 80055ca <__ascii_mbtowc+0x1a>
 80055b8:	b14b      	cbz	r3, 80055ce <__ascii_mbtowc+0x1e>
 80055ba:	7813      	ldrb	r3, [r2, #0]
 80055bc:	600b      	str	r3, [r1, #0]
 80055be:	7812      	ldrb	r2, [r2, #0]
 80055c0:	1c10      	adds	r0, r2, #0
 80055c2:	bf18      	it	ne
 80055c4:	2001      	movne	r0, #1
 80055c6:	b002      	add	sp, #8
 80055c8:	4770      	bx	lr
 80055ca:	4610      	mov	r0, r2
 80055cc:	e7fb      	b.n	80055c6 <__ascii_mbtowc+0x16>
 80055ce:	f06f 0001 	mvn.w	r0, #1
 80055d2:	e7f8      	b.n	80055c6 <__ascii_mbtowc+0x16>

080055d4 <memcpy>:
 80055d4:	b510      	push	{r4, lr}
 80055d6:	1e43      	subs	r3, r0, #1
 80055d8:	440a      	add	r2, r1
 80055da:	4291      	cmp	r1, r2
 80055dc:	d100      	bne.n	80055e0 <memcpy+0xc>
 80055de:	bd10      	pop	{r4, pc}
 80055e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e8:	e7f7      	b.n	80055da <memcpy+0x6>

080055ea <memset>:
 80055ea:	4402      	add	r2, r0
 80055ec:	4603      	mov	r3, r0
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d100      	bne.n	80055f4 <memset+0xa>
 80055f2:	4770      	bx	lr
 80055f4:	f803 1b01 	strb.w	r1, [r3], #1
 80055f8:	e7f9      	b.n	80055ee <memset+0x4>

080055fa <__ascii_wctomb>:
 80055fa:	b149      	cbz	r1, 8005610 <__ascii_wctomb+0x16>
 80055fc:	2aff      	cmp	r2, #255	; 0xff
 80055fe:	bf85      	ittet	hi
 8005600:	238a      	movhi	r3, #138	; 0x8a
 8005602:	6003      	strhi	r3, [r0, #0]
 8005604:	700a      	strbls	r2, [r1, #0]
 8005606:	f04f 30ff 	movhi.w	r0, #4294967295
 800560a:	bf98      	it	ls
 800560c:	2001      	movls	r0, #1
 800560e:	4770      	bx	lr
 8005610:	4608      	mov	r0, r1
 8005612:	4770      	bx	lr

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
