
semIntFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003954  08003954  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003954  08003954  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800395c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  20000010  0800396c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001054  0800396c  00021054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e140  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000232e  00000000  00000000  0002e179  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  000304a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  000311a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a8e  00000000  00000000  00031d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3e5  00000000  00000000  0004681e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007672c  00000000  00000000  00050c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c732f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003478  00000000  00000000  000c73ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003904 	.word	0x08003904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003904 	.word	0x08003904

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
void TareaLed(void *p);
void ChocarCalesita(void);


int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
  HAL_Init();
 8000186:	f000 fac3 	bl	8000710 <HAL_Init>
  SystemClock_Config();
 800018a:	f000 f837 	bl	80001fc <SystemClock_Config>
  MX_GPIO_Init();
 800018e:	f000 f8d5 	bl	800033c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000192:	f000 f885 	bl	80002a0 <MX_TIM2_Init>
  MX_NVIC_Init();
 8000196:	f000 f876 	bl	8000286 <MX_NVIC_Init>

  //Creo el sem√°foro que espera la tarea led
  if(!(semToggleLed = xSemaphoreCreateBinary()))
 800019a:	2203      	movs	r2, #3
 800019c:	2100      	movs	r1, #0
 800019e:	2001      	movs	r0, #1
 80001a0:	f001 fe22 	bl	8001de8 <xQueueGenericCreate>
 80001a4:	4602      	mov	r2, r0
 80001a6:	4b11      	ldr	r3, [pc, #68]	; (80001ec <main+0x6c>)
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	4b10      	ldr	r3, [pc, #64]	; (80001ec <main+0x6c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d101      	bne.n	80001b6 <main+0x36>
  {
  	ChocarCalesita();
 80001b2:	f000 f95f 	bl	8000474 <ChocarCalesita>
  }
  HAL_TIM_Base_Start_IT(&htim2);
 80001b6:	480e      	ldr	r0, [pc, #56]	; (80001f0 <main+0x70>)
 80001b8:	f001 f9a9 	bl	800150e <HAL_TIM_Base_Start_IT>
  xSemaphoreTake(semToggleLed,0);
 80001bc:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <main+0x6c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fef6 	bl	8001fb4 <xQueueSemaphoreTake>

  if(xTaskCreate(TareaLed,"led",128,NULL,1,NULL)!=pdPASS)
 80001c8:	2300      	movs	r3, #0
 80001ca:	9301      	str	r3, [sp, #4]
 80001cc:	2301      	movs	r3, #1
 80001ce:	9300      	str	r3, [sp, #0]
 80001d0:	2300      	movs	r3, #0
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <main+0x74>)
 80001d6:	4808      	ldr	r0, [pc, #32]	; (80001f8 <main+0x78>)
 80001d8:	f002 f8cc 	bl	8002374 <xTaskCreate>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d001      	beq.n	80001e6 <main+0x66>
  {
	  ChocarCalesita();
 80001e2:	f000 f947 	bl	8000474 <ChocarCalesita>
  }

  vTaskStartScheduler();
 80001e6:	f002 f9f3 	bl	80025d0 <vTaskStartScheduler>
  for(;;);
 80001ea:	e7fe      	b.n	80001ea <main+0x6a>
 80001ec:	20000fcc 	.word	0x20000fcc
 80001f0:	20000fd0 	.word	0x20000fd0
 80001f4:	0800391c 	.word	0x0800391c
 80001f8:	080003d5 	.word	0x080003d5

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 fb72 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fcff 	bl	8000c48 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 f928 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f000 ff6a 	bl	8001148 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027a:	f000 f913 	bl	80004a4 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2106      	movs	r1, #6
 800028e:	201c      	movs	r0, #28
 8000290:	f000 fb25 	bl	80008de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000294:	201c      	movs	r0, #28
 8000296:	f000 fb3e 	bl	8000916 <HAL_NVIC_EnableIRQ>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b4:	463b      	mov	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002bc:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <MX_TIM2_Init+0x98>)
 80002be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <MX_TIM2_Init+0x98>)
 80002c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80002ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002cc:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <MX_TIM2_Init+0x98>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <MX_TIM2_Init+0x98>)
 80002d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80002d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_TIM2_Init+0x98>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_TIM2_Init+0x98>)
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e6:	4814      	ldr	r0, [pc, #80]	; (8000338 <MX_TIM2_Init+0x98>)
 80002e8:	f001 f8e6 	bl	80014b8 <HAL_TIM_Base_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002f2:	f000 f8d7 	bl	80004a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	4619      	mov	r1, r3
 8000302:	480d      	ldr	r0, [pc, #52]	; (8000338 <MX_TIM2_Init+0x98>)
 8000304:	f001 fa2e 	bl	8001764 <HAL_TIM_ConfigClockSource>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800030e:	f000 f8c9 	bl	80004a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000312:	2300      	movs	r3, #0
 8000314:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031a:	463b      	mov	r3, r7
 800031c:	4619      	mov	r1, r3
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <MX_TIM2_Init+0x98>)
 8000320:	f001 fbf4 	bl	8001b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800032a:	f000 f8bb 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000fd0 	.word	0x20000fd0

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <MX_GPIO_Init+0x90>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <MX_GPIO_Init+0x90>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003a0:	f000 fc22 	bl	8000be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003be:	f000 fab9 	bl	8000934 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000

080003d4 <TareaLed>:

void TareaLed(void *p)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(semToggleLed,portMAX_DELAY)!=pdTRUE)
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <TareaLed+0x2c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f04f 31ff 	mov.w	r1, #4294967295
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fde5 	bl	8001fb4 <xQueueSemaphoreTake>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d001      	beq.n	80003f4 <TareaLed+0x20>
		{
			//Sal√≠ por timeout o por error.
			//me la doy en la pera.
			ChocarCalesita();
 80003f0:	f000 f840 	bl	8000474 <ChocarCalesita>
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f8:	4802      	ldr	r0, [pc, #8]	; (8000404 <TareaLed+0x30>)
 80003fa:	f000 fc0d 	bl	8000c18 <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(semToggleLed,portMAX_DELAY)!=pdTRUE)
 80003fe:	e7ed      	b.n	80003dc <TareaLed+0x8>
 8000400:	20000fcc 	.word	0x20000fcc
 8000404:	40011000 	.word	0x40011000

08000408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d101      	bne.n	800041e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041a:	f000 f98f 	bl	800073c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000426:	d11a      	bne.n	800045e <HAL_TIM_PeriodElapsedCallback+0x56>
  {
	TIM2->SR&=(~1);
 8000428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6113      	str	r3, [r2, #16]
	portBASE_TYPE pxHigherPriorityTaskWoken;
	xSemaphoreGiveFromISR(semToggleLed,&pxHigherPriorityTaskWoken);
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f107 020c 	add.w	r2, r7, #12
 8000440:	4611      	mov	r1, r2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fd2c 	bl	8001ea0 <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(pxHigherPriorityTaskWoken);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d007      	beq.n	800045e <HAL_TIM_PeriodElapsedCallback+0x56>
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	f3bf 8f4f 	dsb	sy
 800045a:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40012c00 	.word	0x40012c00
 800046c:	20000fcc 	.word	0x20000fcc
 8000470:	e000ed04 	.word	0xe000ed04

08000474 <ChocarCalesita>:


void ChocarCalesita(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
	volatile int32_t i;
	__disable_irq();
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <ChocarCalesita+0x28>)
 8000482:	f000 fbc9 	bl	8000c18 <HAL_GPIO_TogglePin>
		for(i=0;i<200000; i++);
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	e002      	b.n	8000492 <ChocarCalesita+0x1e>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a02      	ldr	r2, [pc, #8]	; (80004a0 <ChocarCalesita+0x2c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	ddf8      	ble.n	800048c <ChocarCalesita+0x18>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800049a:	e7ef      	b.n	800047c <ChocarCalesita+0x8>
 800049c:	40011000 	.word	0x40011000
 80004a0:	00030d3f 	.word	0x00030d3f

080004a4 <Error_Handler>:
	}
}

void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <HAL_MspInit+0x68>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a17      	ldr	r2, [pc, #92]	; (8000518 <HAL_MspInit+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <HAL_MspInit+0x68>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_MspInit+0x68>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <HAL_MspInit+0x68>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x68>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	210f      	movs	r1, #15
 80004ea:	f06f 0001 	mvn.w	r0, #1
 80004ee:	f000 f9f6 	bl	80008de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_MspInit+0x6c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_MspInit+0x6c>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000530:	d10b      	bne.n	800054a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_TIM_Base_MspInit+0x34>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_TIM_Base_MspInit+0x34>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_TIM_Base_MspInit+0x34>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	2019      	movs	r0, #25
 800056e:	f000 f9b6 	bl	80008de <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000572:	2019      	movs	r0, #25
 8000574:	f000 f9cf 	bl	8000916 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <HAL_InitTick+0x9c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <HAL_InitTick+0x9c>)
 800057e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_InitTick+0x9c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000590:	f107 0210 	add.w	r2, r7, #16
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f000 ff3e 	bl	800141c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005a0:	f000 ff28 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 80005a4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <HAL_InitTick+0xa0>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	0c9b      	lsrs	r3, r3, #18
 80005b0:	3b01      	subs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_InitTick+0xa4>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_InitTick+0xa8>)
 80005b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_InitTick+0xa4>)
 80005bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0xa4>)
 80005c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_InitTick+0xa4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_InitTick+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <HAL_InitTick+0xa4>)
 80005d6:	f000 ff6f 	bl	80014b8 <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d104      	bne.n	80005ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <HAL_InitTick+0xa4>)
 80005e2:	f000 ff94 	bl	800150e <HAL_TIM_Base_Start_IT>
 80005e6:	4603      	mov	r3, r0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3730      	adds	r7, #48	; 0x30
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	431bde83 	.word	0x431bde83
 80005fc:	20001010 	.word	0x20001010
 8000600:	40012c00 	.word	0x40012c00

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <HardFault_Handler+0x4>

08000616 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <MemManage_Handler+0x4>

0800061c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <BusFault_Handler+0x4>

08000622 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <UsageFault_Handler+0x4>

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <TIM1_UP_IRQHandler+0x10>)
 800063a:	f000 ff8b 	bl	8001554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20001010 	.word	0x20001010

08000648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <TIM2_IRQHandler+0x10>)
 800064e:	f000 ff81 	bl	8001554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000fd0 	.word	0x20000fd0

0800065c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <SystemInit+0x5c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <SystemInit+0x5c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <SystemInit+0x5c>)
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	4911      	ldr	r1, [pc, #68]	; (80006b8 <SystemInit+0x5c>)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <SystemInit+0x60>)
 8000674:	4013      	ands	r3, r2
 8000676:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <SystemInit+0x5c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SystemInit+0x5c>)
 800067e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000686:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <SystemInit+0x5c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <SystemInit+0x5c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SystemInit+0x5c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <SystemInit+0x5c>)
 800069a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800069e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <SystemInit+0x5c>)
 80006a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SystemInit+0x64>)
 80006aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	f8ff0000 	.word	0xf8ff0000
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006c6:	e003      	b.n	80006d0 <LoopCopyDataInit>

080006c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006ce:	3104      	adds	r1, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006d8:	d3f6      	bcc.n	80006c8 <CopyDataInit>
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006dc:	e002      	b.n	80006e4 <LoopFillZerobss>

080006de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e0:	f842 3b04 	str.w	r3, [r2], #4

080006e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006e8:	d3f9      	bcc.n	80006de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ea:	f7ff ffb7 	bl	800065c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ee:	f003 f8dd 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fd45 	bl	8000180 <main>
  bx lr
 80006f6:	4770      	bx	lr
  ldr r3, =_sidata
 80006f8:	0800395c 	.word	0x0800395c
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000700:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000704:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000708:	20001054 	.word	0x20001054

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f8d1 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff ff16 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff fec0 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <HAL_IncTick+0x20>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000008 	.word	0x20000008
 800075c:	20001050 	.word	0x20001050

08000760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20001050 	.word	0x20001050

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4906      	ldr	r1, [pc, #24]	; (800080c <__NVIC_EnableIRQ+0x34>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff4f 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff64 	bl	80007bc <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ffb2 	bl	8000864 <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff81 	bl	8000810 <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff57 	bl	80007d8 <__NVIC_EnableIRQ>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b08b      	sub	sp, #44	; 0x2c
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e127      	b.n	8000b98 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000948:	2201      	movs	r2, #1
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	f040 8116 	bne.w	8000b92 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b12      	cmp	r3, #18
 800096c:	d034      	beq.n	80009d8 <HAL_GPIO_Init+0xa4>
 800096e:	2b12      	cmp	r3, #18
 8000970:	d80d      	bhi.n	800098e <HAL_GPIO_Init+0x5a>
 8000972:	2b02      	cmp	r3, #2
 8000974:	d02b      	beq.n	80009ce <HAL_GPIO_Init+0x9a>
 8000976:	2b02      	cmp	r3, #2
 8000978:	d804      	bhi.n	8000984 <HAL_GPIO_Init+0x50>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d031      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d01c      	beq.n	80009bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000982:	e048      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000984:	2b03      	cmp	r3, #3
 8000986:	d043      	beq.n	8000a10 <HAL_GPIO_Init+0xdc>
 8000988:	2b11      	cmp	r3, #17
 800098a:	d01b      	beq.n	80009c4 <HAL_GPIO_Init+0x90>
          break;
 800098c:	e043      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800098e:	4a89      	ldr	r2, [pc, #548]	; (8000bb4 <HAL_GPIO_Init+0x280>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d026      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
 8000994:	4a87      	ldr	r2, [pc, #540]	; (8000bb4 <HAL_GPIO_Init+0x280>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d806      	bhi.n	80009a8 <HAL_GPIO_Init+0x74>
 800099a:	4a87      	ldr	r2, [pc, #540]	; (8000bb8 <HAL_GPIO_Init+0x284>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d020      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
 80009a0:	4a86      	ldr	r2, [pc, #536]	; (8000bbc <HAL_GPIO_Init+0x288>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d01d      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
          break;
 80009a6:	e036      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009a8:	4a85      	ldr	r2, [pc, #532]	; (8000bc0 <HAL_GPIO_Init+0x28c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d019      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
 80009ae:	4a85      	ldr	r2, [pc, #532]	; (8000bc4 <HAL_GPIO_Init+0x290>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d016      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
 80009b4:	4a84      	ldr	r2, [pc, #528]	; (8000bc8 <HAL_GPIO_Init+0x294>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d013      	beq.n	80009e2 <HAL_GPIO_Init+0xae>
          break;
 80009ba:	e02c      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	623b      	str	r3, [r7, #32]
          break;
 80009c2:	e028      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	3304      	adds	r3, #4
 80009ca:	623b      	str	r3, [r7, #32]
          break;
 80009cc:	e023      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	3308      	adds	r3, #8
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e01e      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	330c      	adds	r3, #12
 80009de:	623b      	str	r3, [r7, #32]
          break;
 80009e0:	e019      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ea:	2304      	movs	r3, #4
 80009ec:	623b      	str	r3, [r7, #32]
          break;
 80009ee:	e012      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d105      	bne.n	8000a04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f8:	2308      	movs	r3, #8
 80009fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	611a      	str	r2, [r3, #16]
          break;
 8000a02:	e008      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a04:	2308      	movs	r3, #8
 8000a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	615a      	str	r2, [r3, #20]
          break;
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
          break;
 8000a14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d801      	bhi.n	8000a20 <HAL_GPIO_Init+0xec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	e001      	b.n	8000a24 <HAL_GPIO_Init+0xf0>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3304      	adds	r3, #4
 8000a24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	2bff      	cmp	r3, #255	; 0xff
 8000a2a:	d802      	bhi.n	8000a32 <HAL_GPIO_Init+0xfe>
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	e002      	b.n	8000a38 <HAL_GPIO_Init+0x104>
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	3b08      	subs	r3, #8
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	210f      	movs	r1, #15
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	401a      	ands	r2, r3
 8000a4a:	6a39      	ldr	r1, [r7, #32]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	431a      	orrs	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 8096 	beq.w	8000b92 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a66:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <HAL_GPIO_Init+0x298>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	4a58      	ldr	r2, [pc, #352]	; (8000bcc <HAL_GPIO_Init+0x298>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6193      	str	r3, [r2, #24]
 8000a72:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <HAL_GPIO_Init+0x298>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a7e:	4a54      	ldr	r2, [pc, #336]	; (8000bd0 <HAL_GPIO_Init+0x29c>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	220f      	movs	r2, #15
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4b      	ldr	r2, [pc, #300]	; (8000bd4 <HAL_GPIO_Init+0x2a0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x19e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4a      	ldr	r2, [pc, #296]	; (8000bd8 <HAL_GPIO_Init+0x2a4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x19a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a49      	ldr	r2, [pc, #292]	; (8000bdc <HAL_GPIO_Init+0x2a8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x196>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a48      	ldr	r2, [pc, #288]	; (8000be0 <HAL_GPIO_Init+0x2ac>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x192>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x1a0>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e004      	b.n	8000ad4 <HAL_GPIO_Init+0x1a0>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <HAL_GPIO_Init+0x1a0>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_Init+0x1a0>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	f002 0203 	and.w	r2, r2, #3
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4093      	lsls	r3, r2
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae4:	493a      	ldr	r1, [pc, #232]	; (8000bd0 <HAL_GPIO_Init+0x29c>)
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000afe:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4938      	ldr	r1, [pc, #224]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b0c:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4933      	ldr	r1, [pc, #204]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	492e      	ldr	r1, [pc, #184]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	604b      	str	r3, [r1, #4]
 8000b32:	e006      	b.n	8000b42 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4929      	ldr	r1, [pc, #164]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	4924      	ldr	r1, [pc, #144]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	608b      	str	r3, [r1, #8]
 8000b5a:	e006      	b.n	8000b6a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	491f      	ldr	r1, [pc, #124]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d006      	beq.n	8000b84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	491a      	ldr	r1, [pc, #104]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60cb      	str	r3, [r1, #12]
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	4915      	ldr	r1, [pc, #84]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	3301      	adds	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f47f aed0 	bne.w	8000948 <HAL_GPIO_Init+0x14>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	372c      	adds	r7, #44	; 0x2c
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	10110000 	.word	0x10110000
 8000bbc:	10120000 	.word	0x10120000
 8000bc0:	10310000 	.word	0x10310000
 8000bc4:	10320000 	.word	0x10320000
 8000bc8:	10220000 	.word	0x10220000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40011400 	.word	0x40011400
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf8:	787b      	ldrb	r3, [r7, #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c04:	e003      	b.n	8000c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	887b      	ldrh	r3, [r7, #2]
 8000c08:	041a      	lsls	r2, r3, #16
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	611a      	str	r2, [r3, #16]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c30:	887a      	ldrh	r2, [r7, #2]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c38:	887a      	ldrh	r2, [r7, #2]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e26c      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8087 	beq.w	8000d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c68:	4b92      	ldr	r3, [pc, #584]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d00c      	beq.n	8000c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c74:	4b8f      	ldr	r3, [pc, #572]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d112      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x5e>
 8000c80:	4b8c      	ldr	r3, [pc, #560]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8e:	4b89      	ldr	r3, [pc, #548]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d06c      	beq.n	8000d74 <HAL_RCC_OscConfig+0x12c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d168      	bne.n	8000d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e246      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cae:	d106      	bne.n	8000cbe <HAL_RCC_OscConfig+0x76>
 8000cb0:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a7f      	ldr	r2, [pc, #508]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e02e      	b.n	8000d1c <HAL_RCC_OscConfig+0xd4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x98>
 8000cc6:	4b7b      	ldr	r3, [pc, #492]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a7a      	ldr	r2, [pc, #488]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b78      	ldr	r3, [pc, #480]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a77      	ldr	r2, [pc, #476]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e01d      	b.n	8000d1c <HAL_RCC_OscConfig+0xd4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0xbc>
 8000cea:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a71      	ldr	r2, [pc, #452]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6e      	ldr	r2, [pc, #440]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e00b      	b.n	8000d1c <HAL_RCC_OscConfig+0xd4>
 8000d04:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a6a      	ldr	r2, [pc, #424]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a67      	ldr	r2, [pc, #412]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d013      	beq.n	8000d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fd1c 	bl	8000760 <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d2c:	f7ff fd18 	bl	8000760 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b64      	cmp	r3, #100	; 0x64
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e1fa      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f0      	beq.n	8000d2c <HAL_RCC_OscConfig+0xe4>
 8000d4a:	e014      	b.n	8000d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fd08 	bl	8000760 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fd04 	bl	8000760 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e1e6      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0x10c>
 8000d72:	e000      	b.n	8000d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d063      	beq.n	8000e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d82:	4b4c      	ldr	r3, [pc, #304]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d8e:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d11c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x18c>
 8000d9a:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da6:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_RCC_OscConfig+0x176>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d001      	beq.n	8000dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e1ba      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4939      	ldr	r1, [pc, #228]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	e03a      	b.n	8000e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d020      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fcbd 	bl	8000760 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dea:	f7ff fcb9 	bl	8000760 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e19b      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f0      	beq.n	8000dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4927      	ldr	r1, [pc, #156]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e015      	b.n	8000e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fc9c 	bl	8000760 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fc98 	bl	8000760 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e17a      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d03a      	beq.n	8000ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d019      	beq.n	8000e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_RCC_OscConfig+0x274>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e64:	f7ff fc7c 	bl	8000760 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc78 	bl	8000760 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e15a      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f0      	beq.n	8000e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 faf6 	bl	800147c <RCC_Delay>
 8000e90:	e01c      	b.n	8000ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_RCC_OscConfig+0x274>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e98:	f7ff fc62 	bl	8000760 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9e:	e00f      	b.n	8000ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc5e 	bl	8000760 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d908      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e140      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	42420000 	.word	0x42420000
 8000ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	4b9e      	ldr	r3, [pc, #632]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e9      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a6 	beq.w	8001026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ede:	4b97      	ldr	r3, [pc, #604]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10d      	bne.n	8000f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b94      	ldr	r3, [pc, #592]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a93      	ldr	r2, [pc, #588]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b91      	ldr	r3, [pc, #580]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f06:	4b8e      	ldr	r3, [pc, #568]	; (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d118      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f12:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a8a      	ldr	r2, [pc, #552]	; (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fc1f 	bl	8000760 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f26:	f7ff fc1b 	bl	8000760 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b64      	cmp	r3, #100	; 0x64
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e0fd      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f38:	4b81      	ldr	r3, [pc, #516]	; (8001140 <HAL_RCC_OscConfig+0x4f8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d106      	bne.n	8000f5a <HAL_RCC_OscConfig+0x312>
 8000f4c:	4b7b      	ldr	r3, [pc, #492]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a7a      	ldr	r2, [pc, #488]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	e02d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x36e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x334>
 8000f62:	4b76      	ldr	r3, [pc, #472]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a75      	ldr	r2, [pc, #468]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	4b73      	ldr	r3, [pc, #460]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a72      	ldr	r2, [pc, #456]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	6213      	str	r3, [r2, #32]
 8000f7a:	e01c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x36e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d10c      	bne.n	8000f9e <HAL_RCC_OscConfig+0x356>
 8000f84:	4b6d      	ldr	r3, [pc, #436]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4a6c      	ldr	r2, [pc, #432]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6213      	str	r3, [r2, #32]
 8000f90:	4b6a      	ldr	r3, [pc, #424]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a69      	ldr	r2, [pc, #420]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6213      	str	r3, [r2, #32]
 8000f9c:	e00b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x36e>
 8000f9e:	4b67      	ldr	r3, [pc, #412]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4a66      	ldr	r2, [pc, #408]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6213      	str	r3, [r2, #32]
 8000faa:	4b64      	ldr	r3, [pc, #400]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a63      	ldr	r2, [pc, #396]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fbcf 	bl	8000760 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc4:	e00a      	b.n	8000fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fbcb 	bl	8000760 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e0ab      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0ee      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x37e>
 8000fe8:	e014      	b.n	8001014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fbb9 	bl	8000760 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fbb5 	bl	8000760 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001000:	4293      	cmp	r3, r2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e095      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1ee      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a47      	ldr	r2, [pc, #284]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8001020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8081 	beq.w	8001132 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001030:	4b42      	ldr	r3, [pc, #264]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d061      	beq.n	8001100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d146      	bne.n	80010d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <HAL_RCC_OscConfig+0x4fc>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fb89 	bl	8000760 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001052:	f7ff fb85 	bl	8000760 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e067      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001064:	4b35      	ldr	r3, [pc, #212]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f0      	bne.n	8001052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d108      	bne.n	800108c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	492d      	ldr	r1, [pc, #180]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a19      	ldr	r1, [r3, #32]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	430b      	orrs	r3, r1
 800109e:	4927      	ldr	r1, [pc, #156]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x4fc>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fb59 	bl	8000760 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fb55 	bl	8000760 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e037      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x46a>
 80010d0:	e02f      	b.n	8001132 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_RCC_OscConfig+0x4fc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fb42 	bl	8000760 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e0:	f7ff fb3e 	bl	8000760 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e020      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x498>
 80010fe:	e018      	b.n	8001132 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e013      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_OscConfig+0x4f4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	429a      	cmp	r2, r3
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	429a      	cmp	r2, r3
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	40007000 	.word	0x40007000
 8001144:	42420060 	.word	0x42420060

08001148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0d0      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800115c:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d910      	bls.n	800118c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 0207 	bic.w	r2, r3, #7
 8001172:	4965      	ldr	r1, [pc, #404]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b63      	ldr	r3, [pc, #396]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0b8      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a4:	4b59      	ldr	r3, [pc, #356]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a58      	ldr	r2, [pc, #352]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011bc:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c8:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	494d      	ldr	r1, [pc, #308]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d040      	beq.n	8001268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d115      	bne.n	8001226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e07f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e073      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06b      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f023 0203 	bic.w	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4936      	ldr	r1, [pc, #216]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001238:	f7ff fa92 	bl	8000760 <HAL_GetTick>
 800123c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	e00a      	b.n	8001256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001240:	f7ff fa8e 	bl	8000760 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e053      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 020c 	and.w	r2, r3, #12
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	429a      	cmp	r2, r3
 8001266:	d1eb      	bne.n	8001240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d210      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4922      	ldr	r1, [pc, #136]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e032      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4916      	ldr	r1, [pc, #88]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	490e      	ldr	r1, [pc, #56]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d6:	f000 f821 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80012da:	4601      	mov	r1, r0
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_RCC_ClockConfig+0x1c8>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	fa21 f303 	lsr.w	r3, r1, r3
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1cc>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RCC_ClockConfig+0x1d0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f92e 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000
 800130c:	40021000 	.word	0x40021000
 8001310:	0800393c 	.word	0x0800393c
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	b490      	push	{r4, r7}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001324:	1d3c      	adds	r4, r7, #4
 8001326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d002      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x40>
 8001356:	2b08      	cmp	r3, #8
 8001358:	d003      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x46>
 800135a:	e02d      	b.n	80013b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800135e:	623b      	str	r3, [r7, #32]
      break;
 8001360:	e02d      	b.n	80013be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	0c9b      	lsrs	r3, r3, #18
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800136e:	4413      	add	r3, r2
 8001370:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001374:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	0c5b      	lsrs	r3, r3, #17
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800138e:	4413      	add	r3, r2
 8001390:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001394:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800139a:	fb02 f203 	mul.w	r2, r2, r3
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	e004      	b.n	80013b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	623b      	str	r3, [r7, #32]
      break;
 80013b6:	e002      	b.n	80013be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ba:	623b      	str	r3, [r7, #32]
      break;
 80013bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013be:	6a3b      	ldr	r3, [r7, #32]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc90      	pop	{r4, r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08003920 	.word	0x08003920
 80013d0:	08003930 	.word	0x08003930
 80013d4:	40021000 	.word	0x40021000
 80013d8:	007a1200 	.word	0x007a1200
 80013dc:	003d0900 	.word	0x003d0900

080013e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff fff2 	bl	80013e0 <HAL_RCC_GetHCLKFreq>
 80013fc:	4601      	mov	r1, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0adb      	lsrs	r3, r3, #11
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	0800394c 	.word	0x0800394c

0800141c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	220f      	movs	r2, #15
 800142a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_RCC_GetClockConfig+0x58>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_RCC_GetClockConfig+0x58>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_GetClockConfig+0x58>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_RCC_GetClockConfig+0x58>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_GetClockConfig+0x5c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0207 	and.w	r2, r3, #7
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000
 8001478:	40022000 	.word	0x40022000

0800147c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <RCC_Delay+0x34>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <RCC_Delay+0x38>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0a5b      	lsrs	r3, r3, #9
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001498:	bf00      	nop
  }
  while (Delay --);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	60fa      	str	r2, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <RCC_Delay+0x1c>
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000
 80014b4:	10624dd3 	.word	0x10624dd3

080014b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e01d      	b.n	8001506 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff f81e 	bl	8000520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3304      	adds	r3, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f000 fa10 	bl	800191c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b06      	cmp	r3, #6
 8001536:	d007      	beq.n	8001548 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d122      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d11b      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0202 	mvn.w	r2, #2
 8001580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f9a4 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 800159c:	e005      	b.n	80015aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f997 	bl	80018d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f9a6 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d122      	bne.n	8001604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d11b      	bne.n	8001604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0204 	mvn.w	r2, #4
 80015d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f97a 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 80015f0:	e005      	b.n	80015fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f96d 	bl	80018d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f97c 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b08      	cmp	r3, #8
 8001610:	d122      	bne.n	8001658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b08      	cmp	r3, #8
 800161e:	d11b      	bne.n	8001658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0208 	mvn.w	r2, #8
 8001628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2204      	movs	r2, #4
 800162e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f950 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8001644:	e005      	b.n	8001652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f943 	bl	80018d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f952 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b10      	cmp	r3, #16
 8001664:	d122      	bne.n	80016ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b10      	cmp	r3, #16
 8001672:	d11b      	bne.n	80016ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0210 	mvn.w	r2, #16
 800167c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2208      	movs	r2, #8
 8001682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f926 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8001698:	e005      	b.n	80016a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f919 	bl	80018d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f928 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10e      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0201 	mvn.w	r2, #1
 80016d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7fe fe98 	bl	8000408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	2b80      	cmp	r3, #128	; 0x80
 80016e4:	d10e      	bne.n	8001704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f0:	2b80      	cmp	r3, #128	; 0x80
 80016f2:	d107      	bne.n	8001704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fa51 	bl	8001ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171c:	2b40      	cmp	r3, #64	; 0x40
 800171e:	d107      	bne.n	8001730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8ec 	bl	8001908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b20      	cmp	r3, #32
 800173c:	d10e      	bne.n	800175c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b20      	cmp	r3, #32
 800174a:	d107      	bne.n	800175c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0220 	mvn.w	r2, #32
 8001754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fa1c 	bl	8001b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_TIM_ConfigClockSource+0x18>
 8001778:	2302      	movs	r3, #2
 800177a:	e0a6      	b.n	80018ca <HAL_TIM_ConfigClockSource+0x166>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800179a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b40      	cmp	r3, #64	; 0x40
 80017b2:	d067      	beq.n	8001884 <HAL_TIM_ConfigClockSource+0x120>
 80017b4:	2b40      	cmp	r3, #64	; 0x40
 80017b6:	d80b      	bhi.n	80017d0 <HAL_TIM_ConfigClockSource+0x6c>
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d073      	beq.n	80018a4 <HAL_TIM_ConfigClockSource+0x140>
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d802      	bhi.n	80017c6 <HAL_TIM_ConfigClockSource+0x62>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d06f      	beq.n	80018a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80017c4:	e078      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d06c      	beq.n	80018a4 <HAL_TIM_ConfigClockSource+0x140>
 80017ca:	2b30      	cmp	r3, #48	; 0x30
 80017cc:	d06a      	beq.n	80018a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80017ce:	e073      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80017d0:	2b70      	cmp	r3, #112	; 0x70
 80017d2:	d00d      	beq.n	80017f0 <HAL_TIM_ConfigClockSource+0x8c>
 80017d4:	2b70      	cmp	r3, #112	; 0x70
 80017d6:	d804      	bhi.n	80017e2 <HAL_TIM_ConfigClockSource+0x7e>
 80017d8:	2b50      	cmp	r3, #80	; 0x50
 80017da:	d033      	beq.n	8001844 <HAL_TIM_ConfigClockSource+0xe0>
 80017dc:	2b60      	cmp	r3, #96	; 0x60
 80017de:	d041      	beq.n	8001864 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80017e0:	e06a      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e6:	d066      	beq.n	80018b6 <HAL_TIM_ConfigClockSource+0x152>
 80017e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ec:	d017      	beq.n	800181e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80017ee:	e063      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f000 f965 	bl	8001ace <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001812:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	609a      	str	r2, [r3, #8]
      break;
 800181c:	e04c      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f000 f94e 	bl	8001ace <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001840:	609a      	str	r2, [r3, #8]
      break;
 8001842:	e039      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	461a      	mov	r2, r3
 8001852:	f000 f8c5 	bl	80019e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2150      	movs	r1, #80	; 0x50
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f91c 	bl	8001a9a <TIM_ITRx_SetConfig>
      break;
 8001862:	e029      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	461a      	mov	r2, r3
 8001872:	f000 f8e3 	bl	8001a3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2160      	movs	r1, #96	; 0x60
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f90c 	bl	8001a9a <TIM_ITRx_SetConfig>
      break;
 8001882:	e019      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	461a      	mov	r2, r3
 8001892:	f000 f8a5 	bl	80019e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8fc 	bl	8001a9a <TIM_ITRx_SetConfig>
      break;
 80018a2:	e009      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 f8f3 	bl	8001a9a <TIM_ITRx_SetConfig>
      break;
 80018b4:	e000      	b.n	80018b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80018b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
	...

0800191c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a29      	ldr	r2, [pc, #164]	; (80019d4 <TIM_Base_SetConfig+0xb8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00b      	beq.n	800194c <TIM_Base_SetConfig+0x30>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d007      	beq.n	800194c <TIM_Base_SetConfig+0x30>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <TIM_Base_SetConfig+0xbc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d003      	beq.n	800194c <TIM_Base_SetConfig+0x30>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a25      	ldr	r2, [pc, #148]	; (80019dc <TIM_Base_SetConfig+0xc0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d108      	bne.n	800195e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <TIM_Base_SetConfig+0xb8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00b      	beq.n	800197e <TIM_Base_SetConfig+0x62>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d007      	beq.n	800197e <TIM_Base_SetConfig+0x62>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <TIM_Base_SetConfig+0xbc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d003      	beq.n	800197e <TIM_Base_SetConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <TIM_Base_SetConfig+0xc0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d108      	bne.n	8001990 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <TIM_Base_SetConfig+0xb8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d103      	bne.n	80019c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	615a      	str	r2, [r3, #20]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40000800 	.word	0x40000800

080019e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	f023 0201 	bic.w	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f023 030a 	bic.w	r3, r3, #10
 8001a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	621a      	str	r2, [r3, #32]
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f023 0210 	bic.w	r2, r3, #16
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	031b      	lsls	r3, r3, #12
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	621a      	str	r2, [r3, #32]
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f043 0307 	orr.w	r3, r3, #7
 8001abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b087      	sub	sp, #28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	021a      	lsls	r2, r3, #8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	609a      	str	r2, [r3, #8]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e032      	b.n	8001b8a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b5c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f103 0208 	add.w	r2, r3, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f103 0208 	add.w	r2, r3, #8
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f103 0208 	add.w	r2, r3, #8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d103      	bne.n	8001c74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e00c      	b.n	8001c8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3308      	adds	r3, #8
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e002      	b.n	8001c82 <vListInsert+0x2e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d2f6      	bcs.n	8001c7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6892      	ldr	r2, [r2, #8]
 8001cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d103      	bne.n	8001cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1e5a      	subs	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
	...

08001d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	e7fe      	b.n	8001d3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001d40:	f001 faea 	bl	8003318 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	441a      	add	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	3b01      	subs	r3, #1
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	441a      	add	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	22ff      	movs	r2, #255	; 0xff
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d114      	bne.n	8001dc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01a      	beq.n	8001dd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3310      	adds	r3, #16
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fe56 	bl	8002a54 <xTaskRemoveFromEventList>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <xQueueGenericReset+0xcc>)
 8001db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	e009      	b.n	8001dd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3310      	adds	r3, #16
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fef7 	bl	8001bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3324      	adds	r3, #36	; 0x24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fef2 	bl	8001bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dd4:	f001 face 	bl	8003374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000ed04 	.word	0xe000ed04

08001de8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <xQueueGenericCreate+0x28>
 8001dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e00:	f383 8811 	msr	BASEPRI, r3
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e7fe      	b.n	8001e0e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e004      	b.n	8001e26 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3348      	adds	r3, #72	; 0x48
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fb6a 	bl	8003504 <pvPortMalloc>
 8001e30:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3348      	adds	r3, #72	; 0x48
 8001e3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f805 	bl	8001e62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e58:	69bb      	ldr	r3, [r7, #24]
	}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e002      	b.n	8001e84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e90:	2101      	movs	r1, #1
 8001e92:	69b8      	ldr	r0, [r7, #24]
 8001e94:	f7ff ff40 	bl	8001d18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <xQueueGiveFromISR+0x28>
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	e7fe      	b.n	8001ec6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <xQueueGiveFromISR+0x44>
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e7fe      	b.n	8001ee2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <xQueueGiveFromISR+0x54>
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <xQueueGiveFromISR+0x58>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <xQueueGiveFromISR+0x5a>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <xQueueGiveFromISR+0x72>
 8001efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e7fe      	b.n	8001f10 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f12:	f001 fabb 	bl	800348c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f16:	f3ef 8211 	mrs	r2, BASEPRI
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	617a      	str	r2, [r7, #20]
 8001f2c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d22b      	bcs.n	8001f9a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d112      	bne.n	8001f84 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	3324      	adds	r3, #36	; 0x24
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fd72 	bl	8002a54 <xTaskRemoveFromEventList>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00e      	beq.n	8001f94 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e007      	b.n	8001f94 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001f94:	2301      	movs	r3, #1
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
 8001f98:	e001      	b.n	8001f9e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3738      	adds	r7, #56	; 0x38
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	623b      	str	r3, [r7, #32]
 8001fe2:	e7fe      	b.n	8001fe2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <xQueueSemaphoreTake+0x4c>
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e7fe      	b.n	8001ffe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002000:	f000 fee2 	bl	8002dc8 <xTaskGetSchedulerState>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <xQueueSemaphoreTake+0x5c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <xQueueSemaphoreTake+0x60>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <xQueueSemaphoreTake+0x62>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <xQueueSemaphoreTake+0x7a>
 800201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	f3bf 8f4f 	dsb	sy
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	e7fe      	b.n	800202c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800202e:	f001 f973 	bl	8003318 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d024      	beq.n	8002088 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d104      	bne.n	8002058 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800204e:	f000 fffd 	bl	800304c <pvTaskIncrementMutexHeldCount>
 8002052:	4602      	mov	r2, r0
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00f      	beq.n	8002080 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	3310      	adds	r3, #16
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fcf5 	bl	8002a54 <xTaskRemoveFromEventList>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <xQueueSemaphoreTake+0x20c>)
 8002072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002080:	f001 f978 	bl	8003374 <vPortExitCritical>
				return pdPASS;
 8002084:	2301      	movs	r3, #1
 8002086:	e096      	b.n	80021b6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d110      	bne.n	80020b0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <xQueueSemaphoreTake+0xf4>
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e7fe      	b.n	80020a6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80020a8:	f001 f964 	bl	8003374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e082      	b.n	80021b6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fd2c 	bl	8002b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020c4:	f001 f956 	bl	8003374 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020c8:	f000 fae0 	bl	800268c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020cc:	f001 f924 	bl	8003318 <vPortEnterCritical>
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d103      	bne.n	80020e6 <xQueueSemaphoreTake+0x132>
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d103      	bne.n	80020fc <xQueueSemaphoreTake+0x148>
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020fc:	f001 f93a 	bl	8003374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002100:	463a      	mov	r2, r7
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fd1b 	bl	8002b44 <xTaskCheckForTimeOut>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d132      	bne.n	800217a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002116:	f000 f8be 	bl	8002296 <prvIsQueueEmpty>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d026      	beq.n	800216e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002128:	f001 f8f6 	bl	8003318 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fe67 	bl	8002e04 <xTaskPriorityInherit>
 8002136:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002138:	f001 f91c 	bl	8003374 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	3324      	adds	r3, #36	; 0x24
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fc61 	bl	8002a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800214a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800214c:	f000 f851 	bl	80021f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002150:	f000 faaa 	bl	80026a8 <xTaskResumeAll>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f af69 	bne.w	800202e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <xQueueSemaphoreTake+0x20c>)
 800215e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f3bf 8f4f 	dsb	sy
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	e75f      	b.n	800202e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800216e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002170:	f000 f83f 	bl	80021f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002174:	f000 fa98 	bl	80026a8 <xTaskResumeAll>
 8002178:	e759      	b.n	800202e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800217a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800217c:	f000 f839 	bl	80021f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002180:	f000 fa92 	bl	80026a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002186:	f000 f886 	bl	8002296 <prvIsQueueEmpty>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	f43f af4e 	beq.w	800202e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00d      	beq.n	80021b4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002198:	f001 f8be 	bl	8003318 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800219c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800219e:	f000 f811 	bl	80021c4 <prvGetDisinheritPriorityAfterTimeout>
 80021a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 feb0 	bl	8002f10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80021b0:	f001 f8e0 	bl	8003374 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3738      	adds	r7, #56	; 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000ed04 	.word	0xe000ed04

080021c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e001      	b.n	80021e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80021e6:	68fb      	ldr	r3, [r7, #12]
	}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021fa:	f001 f88d 	bl	8003318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002204:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002206:	e011      	b.n	800222c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3324      	adds	r3, #36	; 0x24
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fc1d 	bl	8002a54 <xTaskRemoveFromEventList>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002220:	f000 fcf0 	bl	8002c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3b01      	subs	r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800222c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002230:	2b00      	cmp	r3, #0
 8002232:	dce9      	bgt.n	8002208 <prvUnlockQueue+0x16>
 8002234:	e000      	b.n	8002238 <prvUnlockQueue+0x46>
					break;
 8002236:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	22ff      	movs	r2, #255	; 0xff
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002240:	f001 f898 	bl	8003374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002244:	f001 f868 	bl	8003318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800224e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002250:	e011      	b.n	8002276 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3310      	adds	r3, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fbf8 	bl	8002a54 <xTaskRemoveFromEventList>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800226a:	f000 fccb 	bl	8002c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	3b01      	subs	r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800227a:	2b00      	cmp	r3, #0
 800227c:	dce9      	bgt.n	8002252 <prvUnlockQueue+0x60>
 800227e:	e000      	b.n	8002282 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002280:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800228a:	f001 f873 	bl	8003374 <vPortExitCritical>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800229e:	f001 f83b 	bl	8003318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e001      	b.n	80022b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022b4:	f001 f85e 	bl	8003374 <vPortExitCritical>

	return xReturn;
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08e      	sub	sp, #56	; 0x38
 80022c6:	af04      	add	r7, sp, #16
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <xTaskCreateStatic+0x28>
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	e7fe      	b.n	80022e8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <xTaskCreateStatic+0x42>
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e7fe      	b.n	8002302 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002304:	2354      	movs	r3, #84	; 0x54
 8002306:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b54      	cmp	r3, #84	; 0x54
 800230c:	d009      	beq.n	8002322 <xTaskCreateStatic+0x60>
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e7fe      	b.n	8002320 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01e      	beq.n	8002366 <xTaskCreateStatic+0xa4>
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01b      	beq.n	8002366 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002336:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002340:	2300      	movs	r3, #0
 8002342:	9303      	str	r3, [sp, #12]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f850 	bl	80023fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800235e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002360:	f000 f8cc 	bl	80024fc <prvAddNewTaskToReadyList>
 8002364:	e001      	b.n	800236a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800236a:	697b      	ldr	r3, [r7, #20]
	}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af04      	add	r7, sp, #16
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4618      	mov	r0, r3
 800238a:	f001 f8bb 	bl	8003504 <pvPortMalloc>
 800238e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002396:	2054      	movs	r0, #84	; 0x54
 8002398:	f001 f8b4 	bl	8003504 <pvPortMalloc>
 800239c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
 80023aa:	e005      	b.n	80023b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	f001 f96b 	bl	8003688 <vPortFree>
 80023b2:	e001      	b.n	80023b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d017      	beq.n	80023ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9303      	str	r3, [sp, #12]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f80e 	bl	80023fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023e2:	69f8      	ldr	r0, [r7, #28]
 80023e4:	f000 f88a 	bl	80024fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e002      	b.n	80023f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023f4:	69bb      	ldr	r3, [r7, #24]
	}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b088      	sub	sp, #32
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002416:	3b01      	subs	r3, #1
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f023 0307 	bic.w	r3, r3, #7
 8002424:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <prvInitialiseNewTask+0x46>
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e7fe      	b.n	8002442 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	e012      	b.n	8002470 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	7819      	ldrb	r1, [r3, #0]
 8002452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	3334      	adds	r3, #52	; 0x34
 800245a:	460a      	mov	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b0f      	cmp	r3, #15
 8002474:	d9e9      	bls.n	800244a <prvInitialiseNewTask+0x4c>
 8002476:	e000      	b.n	800247a <prvInitialiseNewTask+0x7c>
		{
			break;
 8002478:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	2b06      	cmp	r3, #6
 8002486:	d901      	bls.n	800248c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002488:	2306      	movs	r3, #6
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	3304      	adds	r3, #4
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fba7 	bl	8001bf6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	3318      	adds	r3, #24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fba2 	bl	8001bf6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	f1c3 0207 	rsb	r2, r3, #7
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	2200      	movs	r2, #0
 80024cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	69b8      	ldr	r0, [r7, #24]
 80024dc:	f000 fe30 	bl	8003140 <pxPortInitialiseStack>
 80024e0:	4602      	mov	r2, r0
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024f2:	bf00      	nop
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002504:	f000 ff08 	bl	8003318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <prvAddNewTaskToReadyList+0xb8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <prvAddNewTaskToReadyList+0xb8>)
 8002510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <prvAddNewTaskToReadyList+0xbc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <prvAddNewTaskToReadyList+0xbc>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <prvAddNewTaskToReadyList+0xb8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d110      	bne.n	800254a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002528:	f000 fb90 	bl	8002c4c <prvInitialiseTaskLists>
 800252c:	e00d      	b.n	800254a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <prvAddNewTaskToReadyList+0xc0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <prvAddNewTaskToReadyList+0xbc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	429a      	cmp	r2, r3
 8002542:	d802      	bhi.n	800254a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <prvAddNewTaskToReadyList+0xbc>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <prvAddNewTaskToReadyList+0xc4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <prvAddNewTaskToReadyList+0xc4>)
 8002552:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	2201      	movs	r2, #1
 800255a:	409a      	lsls	r2, r3
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <prvAddNewTaskToReadyList+0xc8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <prvAddNewTaskToReadyList+0xc8>)
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <prvAddNewTaskToReadyList+0xcc>)
 8002574:	441a      	add	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff fb46 	bl	8001c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002582:	f000 fef7 	bl	8003374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <prvAddNewTaskToReadyList+0xc0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00e      	beq.n	80025ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <prvAddNewTaskToReadyList+0xbc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <prvAddNewTaskToReadyList+0xd0>)
 800259e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000380 	.word	0x20000380
 80025b8:	20000280 	.word	0x20000280
 80025bc:	2000038c 	.word	0x2000038c
 80025c0:	2000039c 	.word	0x2000039c
 80025c4:	20000388 	.word	0x20000388
 80025c8:	20000284 	.word	0x20000284
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025de:	463a      	mov	r2, r7
 80025e0:	1d39      	adds	r1, r7, #4
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fdb2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	9202      	str	r2, [sp, #8]
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	460a      	mov	r2, r1
 80025fe:	491d      	ldr	r1, [pc, #116]	; (8002674 <vTaskStartScheduler+0xa4>)
 8002600:	481d      	ldr	r0, [pc, #116]	; (8002678 <vTaskStartScheduler+0xa8>)
 8002602:	f7ff fe5e 	bl	80022c2 <xTaskCreateStatic>
 8002606:	4602      	mov	r2, r0
 8002608:	4b1c      	ldr	r3, [pc, #112]	; (800267c <vTaskStartScheduler+0xac>)
 800260a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <vTaskStartScheduler+0xac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002614:	2301      	movs	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e001      	b.n	800261e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d115      	bne.n	8002650 <vTaskStartScheduler+0x80>
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <vTaskStartScheduler+0xb0>)
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <vTaskStartScheduler+0xb4>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <vTaskStartScheduler+0xb8>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800264a:	f000 fdf5 	bl	8003238 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800264e:	e00d      	b.n	800266c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d109      	bne.n	800266c <vTaskStartScheduler+0x9c>
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e7fe      	b.n	800266a <vTaskStartScheduler+0x9a>
}
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	08003934 	.word	0x08003934
 8002678:	08002c1d 	.word	0x08002c1d
 800267c:	200003a4 	.word	0x200003a4
 8002680:	200003a0 	.word	0x200003a0
 8002684:	2000038c 	.word	0x2000038c
 8002688:	20000384 	.word	0x20000384

0800268c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <vTaskSuspendAll+0x18>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <vTaskSuspendAll+0x18>)
 8002698:	6013      	str	r3, [r2, #0]
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	200003a8 	.word	0x200003a8

080026a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <xTaskResumeAll+0x114>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <xTaskResumeAll+0x2a>
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	e7fe      	b.n	80026d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026d2:	f000 fe21 	bl	8003318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <xTaskResumeAll+0x114>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3b01      	subs	r3, #1
 80026dc:	4a37      	ldr	r2, [pc, #220]	; (80027bc <xTaskResumeAll+0x114>)
 80026de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <xTaskResumeAll+0x114>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d161      	bne.n	80027ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026e8:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <xTaskResumeAll+0x118>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05d      	beq.n	80027ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026f0:	e02e      	b.n	8002750 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <xTaskResumeAll+0x11c>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3318      	adds	r3, #24
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fae0 	bl	8001cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3304      	adds	r3, #4
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fadb 	bl	8001cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	2201      	movs	r2, #1
 8002714:	409a      	lsls	r2, r3
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <xTaskResumeAll+0x120>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <xTaskResumeAll+0x120>)
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <xTaskResumeAll+0x124>)
 800272e:	441a      	add	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f7ff fa69 	bl	8001c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <xTaskResumeAll+0x128>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <xTaskResumeAll+0x12c>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <xTaskResumeAll+0x11c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1cc      	bne.n	80026f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800275e:	f000 fb0f 	bl	8002d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <xTaskResumeAll+0x130>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800276e:	f000 f837 	bl	80027e0 <xTaskIncrementTick>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <xTaskResumeAll+0x12c>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3b01      	subs	r3, #1
 8002782:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f1      	bne.n	800276e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <xTaskResumeAll+0x130>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <xTaskResumeAll+0x12c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <xTaskResumeAll+0x134>)
 800279e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027ac:	f000 fde2 	bl	8003374 <vPortExitCritical>

	return xAlreadyYielded;
 80027b0:	68bb      	ldr	r3, [r7, #8]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200003a8 	.word	0x200003a8
 80027c0:	20000380 	.word	0x20000380
 80027c4:	20000340 	.word	0x20000340
 80027c8:	20000388 	.word	0x20000388
 80027cc:	20000284 	.word	0x20000284
 80027d0:	20000280 	.word	0x20000280
 80027d4:	20000394 	.word	0x20000394
 80027d8:	20000390 	.word	0x20000390
 80027dc:	e000ed04 	.word	0xe000ed04

080027e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ea:	4b50      	ldr	r3, [pc, #320]	; (800292c <xTaskIncrementTick+0x14c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 808c 	bne.w	800290c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <xTaskIncrementTick+0x150>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027fc:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <xTaskIncrementTick+0x150>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11f      	bne.n	8002848 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002808:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <xTaskIncrementTick+0x154>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <xTaskIncrementTick+0x46>
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	e7fe      	b.n	8002824 <xTaskIncrementTick+0x44>
 8002826:	4b43      	ldr	r3, [pc, #268]	; (8002934 <xTaskIncrementTick+0x154>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b42      	ldr	r3, [pc, #264]	; (8002938 <xTaskIncrementTick+0x158>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a40      	ldr	r2, [pc, #256]	; (8002934 <xTaskIncrementTick+0x154>)
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4a40      	ldr	r2, [pc, #256]	; (8002938 <xTaskIncrementTick+0x158>)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <xTaskIncrementTick+0x15c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a3e      	ldr	r2, [pc, #248]	; (800293c <xTaskIncrementTick+0x15c>)
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	f000 fa9c 	bl	8002d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002848:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <xTaskIncrementTick+0x160>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d34d      	bcc.n	80028ee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <xTaskIncrementTick+0x154>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <xTaskIncrementTick+0x80>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <xTaskIncrementTick+0x82>
 8002860:	2300      	movs	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002866:	4b36      	ldr	r3, [pc, #216]	; (8002940 <xTaskIncrementTick+0x160>)
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	601a      	str	r2, [r3, #0]
					break;
 800286e:	e03e      	b.n	80028ee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <xTaskIncrementTick+0x154>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d203      	bcs.n	8002890 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002888:	4a2d      	ldr	r2, [pc, #180]	; (8002940 <xTaskIncrementTick+0x160>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
						break;
 800288e:	e02e      	b.n	80028ee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	3304      	adds	r3, #4
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fa15 	bl	8001cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3318      	adds	r3, #24
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fa0c 	bl	8001cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	2201      	movs	r2, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <xTaskIncrementTick+0x164>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <xTaskIncrementTick+0x164>)
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <xTaskIncrementTick+0x168>)
 80028cc:	441a      	add	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3304      	adds	r3, #4
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7ff f99a 	bl	8001c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <xTaskIncrementTick+0x16c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3b4      	bcc.n	8002852 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ec:	e7b1      	b.n	8002852 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <xTaskIncrementTick+0x16c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f4:	4914      	ldr	r1, [pc, #80]	; (8002948 <xTaskIncrementTick+0x168>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d907      	bls.n	8002916 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002906:	2301      	movs	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e004      	b.n	8002916 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <xTaskIncrementTick+0x170>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <xTaskIncrementTick+0x170>)
 8002914:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <xTaskIncrementTick+0x174>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002922:	697b      	ldr	r3, [r7, #20]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200003a8 	.word	0x200003a8
 8002930:	20000384 	.word	0x20000384
 8002934:	20000338 	.word	0x20000338
 8002938:	2000033c 	.word	0x2000033c
 800293c:	20000398 	.word	0x20000398
 8002940:	200003a0 	.word	0x200003a0
 8002944:	20000388 	.word	0x20000388
 8002948:	20000284 	.word	0x20000284
 800294c:	20000280 	.word	0x20000280
 8002950:	20000390 	.word	0x20000390
 8002954:	20000394 	.word	0x20000394

08002958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <vTaskSwitchContext+0xa0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <vTaskSwitchContext+0xa4>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800296c:	e03e      	b.n	80029ec <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <vTaskSwitchContext+0xa4>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <vTaskSwitchContext+0xa8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	f1c3 031f 	rsb	r3, r3, #31
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	491e      	ldr	r1, [pc, #120]	; (8002a04 <vTaskSwitchContext+0xac>)
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	e7fe      	b.n	80029b0 <vTaskSwitchContext+0x58>
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <vTaskSwitchContext+0xac>)
 80029be:	4413      	add	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3308      	adds	r3, #8
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d104      	bne.n	80029e2 <vTaskSwitchContext+0x8a>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <vTaskSwitchContext+0xb0>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200003a8 	.word	0x200003a8
 80029fc:	20000394 	.word	0x20000394
 8002a00:	20000388 	.word	0x20000388
 8002a04:	20000284 	.word	0x20000284
 8002a08:	20000280 	.word	0x20000280

08002a0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <vTaskPlaceOnEventList+0x24>
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e7fe      	b.n	8002a2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <vTaskPlaceOnEventList+0x44>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3318      	adds	r3, #24
 8002a36:	4619      	mov	r1, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff f90b 	bl	8001c54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a3e:	2101      	movs	r1, #1
 8002a40:	6838      	ldr	r0, [r7, #0]
 8002a42:	f000 fb17 	bl	8003074 <prvAddCurrentTaskToDelayedList>
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000280 	.word	0x20000280

08002a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <xTaskRemoveFromEventList+0x2a>
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e7fe      	b.n	8002a7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	3318      	adds	r3, #24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f91e 	bl	8001cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <xTaskRemoveFromEventList+0xac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11c      	bne.n	8002aca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f915 	bl	8001cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <xTaskRemoveFromEventList+0xb0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <xTaskRemoveFromEventList+0xb0>)
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <xTaskRemoveFromEventList+0xb4>)
 8002aba:	441a      	add	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7ff f8a3 	bl	8001c0e <vListInsertEnd>
 8002ac8:	e005      	b.n	8002ad6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	3318      	adds	r3, #24
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480e      	ldr	r0, [pc, #56]	; (8002b0c <xTaskRemoveFromEventList+0xb8>)
 8002ad2:	f7ff f89c 	bl	8001c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <xTaskRemoveFromEventList+0xbc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d905      	bls.n	8002af0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <xTaskRemoveFromEventList+0xc0>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e001      	b.n	8002af4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002af4:	697b      	ldr	r3, [r7, #20]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200003a8 	.word	0x200003a8
 8002b04:	20000388 	.word	0x20000388
 8002b08:	20000284 	.word	0x20000284
 8002b0c:	20000340 	.word	0x20000340
 8002b10:	20000280 	.word	0x20000280
 8002b14:	20000394 	.word	0x20000394

08002b18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <vTaskInternalSetTimeOutState+0x24>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <vTaskInternalSetTimeOutState+0x28>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	605a      	str	r2, [r3, #4]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000398 	.word	0x20000398
 8002b40:	20000384 	.word	0x20000384

08002b44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <xTaskCheckForTimeOut+0x24>
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e7fe      	b.n	8002b66 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <xTaskCheckForTimeOut+0x3e>
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e7fe      	b.n	8002b80 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002b82:	f000 fbc9 	bl	8003318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <xTaskCheckForTimeOut+0xb8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d102      	bne.n	8002ba6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	e023      	b.n	8002bee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <xTaskCheckForTimeOut+0xbc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d007      	beq.n	8002bc2 <xTaskCheckForTimeOut+0x7e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e015      	b.n	8002bee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d20b      	bcs.n	8002be4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff9d 	bl	8002b18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e004      	b.n	8002bee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002bee:	f000 fbc1 	bl	8003374 <vPortExitCritical>

	return xReturn;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000384 	.word	0x20000384
 8002c00:	20000398 	.word	0x20000398

08002c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <vTaskMissedYield+0x14>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000394 	.word	0x20000394

08002c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c24:	f000 f852 	bl	8002ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <prvIdleTask+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d9f9      	bls.n	8002c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <prvIdleTask+0x2c>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c40:	e7f0      	b.n	8002c24 <prvIdleTask+0x8>
 8002c42:	bf00      	nop
 8002c44:	20000284 	.word	0x20000284
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e00c      	b.n	8002c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <prvInitialiseTaskLists+0x60>)
 8002c64:	4413      	add	r3, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe ffa6 	bl	8001bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d9ef      	bls.n	8002c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c7a:	f7fe ff9d 	bl	8001bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002c80:	f7fe ff9a 	bl	8001bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <prvInitialiseTaskLists+0x6c>)
 8002c86:	f7fe ff97 	bl	8001bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <prvInitialiseTaskLists+0x70>)
 8002c8c:	f7fe ff94 	bl	8001bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c90:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <prvInitialiseTaskLists+0x74>)
 8002c92:	f7fe ff91 	bl	8001bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <prvInitialiseTaskLists+0x78>)
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvInitialiseTaskLists+0x7c>)
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000284 	.word	0x20000284
 8002cb0:	20000310 	.word	0x20000310
 8002cb4:	20000324 	.word	0x20000324
 8002cb8:	20000340 	.word	0x20000340
 8002cbc:	20000354 	.word	0x20000354
 8002cc0:	2000036c 	.word	0x2000036c
 8002cc4:	20000338 	.word	0x20000338
 8002cc8:	2000033c 	.word	0x2000033c

08002ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cd2:	e019      	b.n	8002d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cd4:	f000 fb20 	bl	8003318 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <prvCheckTasksWaitingTermination+0x4c>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ffed 	bl	8001cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cfe:	f000 fb39 	bl	8003374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f80e 	bl	8002d24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e1      	bne.n	8002cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000354 	.word	0x20000354
 8002d1c:	20000380 	.word	0x20000380
 8002d20:	20000368 	.word	0x20000368

08002d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fca4 	bl	8003688 <vPortFree>
				vPortFree( pxTCB );
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fca1 	bl	8003688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d46:	e017      	b.n	8002d78 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d103      	bne.n	8002d5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fc98 	bl	8003688 <vPortFree>
	}
 8002d58:	e00e      	b.n	8002d78 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d009      	beq.n	8002d78 <prvDeleteTCB+0x54>
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e7fe      	b.n	8002d76 <prvDeleteTCB+0x52>
	}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <prvResetNextTaskUnblockTime+0x40>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <prvResetNextTaskUnblockTime+0x14>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <prvResetNextTaskUnblockTime+0x16>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <prvResetNextTaskUnblockTime+0x44>)
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002da2:	e008      	b.n	8002db6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <prvResetNextTaskUnblockTime+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <prvResetNextTaskUnblockTime+0x44>)
 8002db4:	6013      	str	r3, [r2, #0]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000338 	.word	0x20000338
 8002dc4:	200003a0 	.word	0x200003a0

08002dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <xTaskGetSchedulerState+0x34>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	e008      	b.n	8002dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <xTaskGetSchedulerState+0x38>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002de4:	2302      	movs	r3, #2
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	e001      	b.n	8002dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002dee:	687b      	ldr	r3, [r7, #4]
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	2000038c 	.word	0x2000038c
 8002e00:	200003a8 	.word	0x200003a8

08002e04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d06e      	beq.n	8002ef8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <xTaskPriorityInherit+0x100>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d25e      	bcs.n	8002ee6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	db06      	blt.n	8002e3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <xTaskPriorityInherit+0x100>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	f1c3 0207 	rsb	r2, r3, #7
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6959      	ldr	r1, [r3, #20]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <xTaskPriorityInherit+0x104>)
 8002e50:	4413      	add	r3, r2
 8002e52:	4299      	cmp	r1, r3
 8002e54:	d101      	bne.n	8002e5a <xTaskPriorityInherit+0x56>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xTaskPriorityInherit+0x58>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d03a      	beq.n	8002ed6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ff2d 	bl	8001cc4 <uxListRemove>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d115      	bne.n	8002e9c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4924      	ldr	r1, [pc, #144]	; (8002f08 <xTaskPriorityInherit+0x104>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <xTaskPriorityInherit+0x98>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <xTaskPriorityInherit+0x108>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4013      	ands	r3, r2
 8002e98:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <xTaskPriorityInherit+0x108>)
 8002e9a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <xTaskPriorityInherit+0x100>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	2201      	movs	r2, #1
 8002eac:	409a      	lsls	r2, r3
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <xTaskPriorityInherit+0x108>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <xTaskPriorityInherit+0x108>)
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <xTaskPriorityInherit+0x104>)
 8002ec6:	441a      	add	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f7fe fe9d 	bl	8001c0e <vListInsertEnd>
 8002ed4:	e004      	b.n	8002ee0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <xTaskPriorityInherit+0x100>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e008      	b.n	8002ef8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <xTaskPriorityInherit+0x100>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d201      	bcs.n	8002ef8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
	}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000280 	.word	0x20000280
 8002f08:	20000284 	.word	0x20000284
 8002f0c:	20000388 	.word	0x20000388

08002f10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8086 	beq.w	8003036 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e7fe      	b.n	8002f44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d902      	bls.n	8002f56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e002      	b.n	8002f5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d067      	beq.n	8003036 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d162      	bne.n	8003036 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d109      	bne.n	8002f8e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	e7fe      	b.n	8002f8c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db04      	blt.n	8002fac <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f1c3 0207 	rsb	r2, r3, #7
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6959      	ldr	r1, [r3, #20]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4a22      	ldr	r2, [pc, #136]	; (8003044 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4299      	cmp	r1, r3
 8002fc0:	d101      	bne.n	8002fc6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d034      	beq.n	8003036 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fe77 	bl	8001cc4 <uxListRemove>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	4918      	ldr	r1, [pc, #96]	; (8003044 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4013      	ands	r3, r2
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003006:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4a07      	ldr	r2, [pc, #28]	; (8003044 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003028:	441a      	add	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3304      	adds	r3, #4
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f7fe fdec 	bl	8001c0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000280 	.word	0x20000280
 8003044:	20000284 	.word	0x20000284
 8003048:	20000388 	.word	0x20000388

0800304c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <pvTaskIncrementMutexHeldCount+0x24>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <pvTaskIncrementMutexHeldCount+0x24>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800305e:	3201      	adds	r2, #1
 8003060:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003062:	4b03      	ldr	r3, [pc, #12]	; (8003070 <pvTaskIncrementMutexHeldCount+0x24>)
 8003064:	681b      	ldr	r3, [r3, #0]
	}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000280 	.word	0x20000280

08003074 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3304      	adds	r3, #4
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fe1a 	bl	8001cc4 <uxListRemove>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2201      	movs	r2, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4013      	ands	r3, r2
 80030aa:	4a20      	ldr	r2, [pc, #128]	; (800312c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d10a      	bne.n	80030cc <prvAddCurrentTaskToDelayedList+0x58>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	481a      	ldr	r0, [pc, #104]	; (8003130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80030c6:	f7fe fda2 	bl	8001c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030ca:	e026      	b.n	800311a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d209      	bcs.n	80030f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fe fdaf 	bl	8001c54 <vListInsert>
}
 80030f6:	e010      	b.n	800311a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7fe fda5 	bl	8001c54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <prvAddCurrentTaskToDelayedList+0xc8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d202      	bcs.n	800311a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003114:	4a09      	ldr	r2, [pc, #36]	; (800313c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000384 	.word	0x20000384
 8003128:	20000280 	.word	0x20000280
 800312c:	20000388 	.word	0x20000388
 8003130:	2000036c 	.word	0x2000036c
 8003134:	2000033c 	.word	0x2000033c
 8003138:	20000338 	.word	0x20000338
 800313c:	200003a0 	.word	0x200003a0

08003140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b04      	subs	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b04      	subs	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3b04      	subs	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003170:	4a08      	ldr	r2, [pc, #32]	; (8003194 <pxPortInitialiseStack+0x54>)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3b14      	subs	r3, #20
 800317a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b20      	subs	r3, #32
 8003186:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003188:	68fb      	ldr	r3, [r7, #12]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	08003199 	.word	0x08003199

08003198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <prvTaskExitError+0x4c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d009      	beq.n	80031c0 <prvTaskExitError+0x28>
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e7fe      	b.n	80031be <prvTaskExitError+0x26>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80031d2:	bf00      	nop
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0fc      	beq.n	80031d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	2000000c 	.word	0x2000000c
	...

080031f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <pxCurrentTCBConst2>)
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	6808      	ldr	r0, [r1, #0]
 80031f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031fa:	f380 8809 	msr	PSP, r0
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f04f 0000 	mov.w	r0, #0
 8003206:	f380 8811 	msr	BASEPRI, r0
 800320a:	f04e 0e0d 	orr.w	lr, lr, #13
 800320e:	4770      	bx	lr

08003210 <pxCurrentTCBConst2>:
 8003210:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop

08003218 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003218:	4806      	ldr	r0, [pc, #24]	; (8003234 <prvPortStartFirstTask+0x1c>)
 800321a:	6800      	ldr	r0, [r0, #0]
 800321c:	6800      	ldr	r0, [r0, #0]
 800321e:	f380 8808 	msr	MSP, r0
 8003222:	b662      	cpsie	i
 8003224:	b661      	cpsie	f
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	df00      	svc	0
 8003230:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003232:	bf00      	nop
 8003234:	e000ed08 	.word	0xe000ed08

08003238 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <xPortStartScheduler+0xcc>)
 8003240:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	22ff      	movs	r2, #255	; 0xff
 800324e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <xPortStartScheduler+0xd0>)
 8003264:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <xPortStartScheduler+0xd4>)
 8003268:	2207      	movs	r2, #7
 800326a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800326c:	e009      	b.n	8003282 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800326e:	4b27      	ldr	r3, [pc, #156]	; (800330c <xPortStartScheduler+0xd4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3b01      	subs	r3, #1
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <xPortStartScheduler+0xd4>)
 8003276:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d0ef      	beq.n	800326e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <xPortStartScheduler+0xd4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	d009      	beq.n	80032ae <xPortStartScheduler+0x76>
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	e7fe      	b.n	80032ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <xPortStartScheduler+0xd4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <xPortStartScheduler+0xd4>)
 80032b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <xPortStartScheduler+0xd4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <xPortStartScheduler+0xd4>)
 80032c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <xPortStartScheduler+0xd8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <xPortStartScheduler+0xd8>)
 80032d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <xPortStartScheduler+0xd8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <xPortStartScheduler+0xd8>)
 80032de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80032e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80032e4:	f000 f8b0 	bl	8003448 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <xPortStartScheduler+0xdc>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80032ee:	f7ff ff93 	bl	8003218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80032f2:	f7ff fb31 	bl	8002958 <vTaskSwitchContext>
	prvTaskExitError();
 80032f6:	f7ff ff4f 	bl	8003198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	e000e400 	.word	0xe000e400
 8003308:	200003ac 	.word	0x200003ac
 800330c:	200003b0 	.word	0x200003b0
 8003310:	e000ed20 	.word	0xe000ed20
 8003314:	2000000c 	.word	0x2000000c

08003318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <vPortEnterCritical+0x54>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <vPortEnterCritical+0x54>)
 8003338:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <vPortEnterCritical+0x54>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10e      	bne.n	8003360 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <vPortEnterCritical+0x58>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <vPortEnterCritical+0x48>
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	e7fe      	b.n	800335e <vPortEnterCritical+0x46>
	}
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <vPortExitCritical+0x48>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <vPortExitCritical+0x22>
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	e7fe      	b.n	8003394 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <vPortExitCritical+0x48>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	4a07      	ldr	r2, [pc, #28]	; (80033bc <vPortExitCritical+0x48>)
 800339e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <vPortExitCritical+0x48>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <vPortExitCritical+0x3e>
 80033a8:	2300      	movs	r3, #0
 80033aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80033c0:	f3ef 8009 	mrs	r0, PSP
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <pxCurrentTCBConst>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033d0:	6010      	str	r0, [r2, #0]
 80033d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80033d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033da:	f380 8811 	msr	BASEPRI, r0
 80033de:	f7ff fabb 	bl	8002958 <vTaskSwitchContext>
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8811 	msr	BASEPRI, r0
 80033ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	6808      	ldr	r0, [r1, #0]
 80033f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033f6:	f380 8809 	msr	PSP, r0
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	4770      	bx	lr

08003400 <pxCurrentTCBConst>:
 8003400:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop

08003408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003420:	f7ff f9de 	bl	80027e0 <xTaskIncrementTick>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <SysTick_Handler+0x3c>)
 800342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <vPortSetupTimerInterrupt+0x30>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <vPortSetupTimerInterrupt+0x34>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <vPortSetupTimerInterrupt+0x38>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a09      	ldr	r2, [pc, #36]	; (8003484 <vPortSetupTimerInterrupt+0x3c>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	4a08      	ldr	r2, [pc, #32]	; (8003488 <vPortSetupTimerInterrupt+0x40>)
 8003466:	3b01      	subs	r3, #1
 8003468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800346a:	4b03      	ldr	r3, [pc, #12]	; (8003478 <vPortSetupTimerInterrupt+0x30>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	e000e010 	.word	0xe000e010
 800347c:	e000e018 	.word	0xe000e018
 8003480:	20000000 	.word	0x20000000
 8003484:	10624dd3 	.word	0x10624dd3
 8003488:	e000e014 	.word	0xe000e014

0800348c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	d913      	bls.n	80034c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800349e:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <vPortValidateInterruptPriority+0x68>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <vPortValidateInterruptPriority+0x6c>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	7afa      	ldrb	r2, [r7, #11]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d209      	bcs.n	80034c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	e7fe      	b.n	80034c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <vPortValidateInterruptPriority+0x70>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <vPortValidateInterruptPriority+0x74>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d909      	bls.n	80034ea <vPortValidateInterruptPriority+0x5e>
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	e7fe      	b.n	80034e8 <vPortValidateInterruptPriority+0x5c>
	}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	e000e3f0 	.word	0xe000e3f0
 80034f8:	200003ac 	.word	0x200003ac
 80034fc:	e000ed0c 	.word	0xe000ed0c
 8003500:	200003b0 	.word	0x200003b0

08003504 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003510:	f7ff f8bc 	bl	800268c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <pvPortMalloc+0x170>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800351c:	f000 f90c 	bl	8003738 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003520:	4b55      	ldr	r3, [pc, #340]	; (8003678 <pvPortMalloc+0x174>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 808c 	bne.w	8003646 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01c      	beq.n	800356e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003534:	2208      	movs	r2, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	2b00      	cmp	r3, #0
 8003544:	d013      	beq.n	800356e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f023 0307 	bic.w	r3, r3, #7
 800354c:	3308      	adds	r3, #8
 800354e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <pvPortMalloc+0x6a>
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e7fe      	b.n	800356c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d068      	beq.n	8003646 <pvPortMalloc+0x142>
 8003574:	4b41      	ldr	r3, [pc, #260]	; (800367c <pvPortMalloc+0x178>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d863      	bhi.n	8003646 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800357e:	4b40      	ldr	r3, [pc, #256]	; (8003680 <pvPortMalloc+0x17c>)
 8003580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <pvPortMalloc+0x17c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003588:	e004      	b.n	8003594 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d903      	bls.n	80035a6 <pvPortMalloc+0xa2>
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f1      	bne.n	800358a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <pvPortMalloc+0x170>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d04a      	beq.n	8003646 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	4413      	add	r3, r2
 80035b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad2      	subs	r2, r2, r3
 80035ca:	2308      	movs	r3, #8
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d91e      	bls.n	8003610 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <pvPortMalloc+0xf4>
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e7fe      	b.n	80035f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800360a:	69b8      	ldr	r0, [r7, #24]
 800360c:	f000 f8f6 	bl	80037fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <pvPortMalloc+0x178>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	4a18      	ldr	r2, [pc, #96]	; (800367c <pvPortMalloc+0x178>)
 800361c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <pvPortMalloc+0x178>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <pvPortMalloc+0x180>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d203      	bcs.n	8003632 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <pvPortMalloc+0x178>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <pvPortMalloc+0x180>)
 8003630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <pvPortMalloc+0x174>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	431a      	orrs	r2, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003646:	f7ff f82f 	bl	80026a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <pvPortMalloc+0x164>
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e7fe      	b.n	8003666 <pvPortMalloc+0x162>
	return pvReturn;
 8003668:	69fb      	ldr	r3, [r7, #28]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000fbc 	.word	0x20000fbc
 8003678:	20000fc8 	.word	0x20000fc8
 800367c:	20000fc0 	.word	0x20000fc0
 8003680:	20000fb4 	.word	0x20000fb4
 8003684:	20000fc4 	.word	0x20000fc4

08003688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d046      	beq.n	8003728 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800369a:	2308      	movs	r3, #8
 800369c:	425b      	negs	r3, r3
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <vPortFree+0xa8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <vPortFree+0x42>
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e7fe      	b.n	80036c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <vPortFree+0x5e>
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	e7fe      	b.n	80036e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <vPortFree+0xa8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d019      	beq.n	8003728 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d115      	bne.n	8003728 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <vPortFree+0xa8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	43db      	mvns	r3, r3
 8003706:	401a      	ands	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800370c:	f7fe ffbe 	bl	800268c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <vPortFree+0xac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4413      	add	r3, r2
 800371a:	4a06      	ldr	r2, [pc, #24]	; (8003734 <vPortFree+0xac>)
 800371c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800371e:	6938      	ldr	r0, [r7, #16]
 8003720:	f000 f86c 	bl	80037fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003724:	f7fe ffc0 	bl	80026a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003728:	bf00      	nop
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000fc8 	.word	0x20000fc8
 8003734:	20000fc0 	.word	0x20000fc0

08003738 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800373e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003742:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <prvHeapInit+0xac>)
 8003746:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3307      	adds	r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <prvHeapInit+0xac>)
 8003768:	4413      	add	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <prvHeapInit+0xb0>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <prvHeapInit+0xb0>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003784:	2208      	movs	r2, #8
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <prvHeapInit+0xb4>)
 8003798:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <prvHeapInit+0xb4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <prvHeapInit+0xb4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <prvHeapInit+0xb4>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <prvHeapInit+0xb8>)
 80037c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <prvHeapInit+0xbc>)
 80037ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <prvHeapInit+0xc0>)
 80037d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	200003b4 	.word	0x200003b4
 80037e8:	20000fb4 	.word	0x20000fb4
 80037ec:	20000fbc 	.word	0x20000fbc
 80037f0:	20000fc4 	.word	0x20000fc4
 80037f4:	20000fc0 	.word	0x20000fc0
 80037f8:	20000fc8 	.word	0x20000fc8

080037fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <prvInsertBlockIntoFreeList+0xa8>)
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e002      	b.n	8003810 <prvInsertBlockIntoFreeList+0x14>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d8f7      	bhi.n	800380a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4413      	add	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d108      	bne.n	800383e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	441a      	add	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d118      	bne.n	8003884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <prvInsertBlockIntoFreeList+0xac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d00d      	beq.n	800387a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e008      	b.n	800388c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <prvInsertBlockIntoFreeList+0xac>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e003      	b.n	800388c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d002      	beq.n	800389a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	20000fb4 	.word	0x20000fb4
 80038a8:	20000fbc 	.word	0x20000fbc

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	2500      	movs	r5, #0
 80038b0:	4e0c      	ldr	r6, [pc, #48]	; (80038e4 <__libc_init_array+0x38>)
 80038b2:	4c0d      	ldr	r4, [pc, #52]	; (80038e8 <__libc_init_array+0x3c>)
 80038b4:	1ba4      	subs	r4, r4, r6
 80038b6:	10a4      	asrs	r4, r4, #2
 80038b8:	42a5      	cmp	r5, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	f000 f822 	bl	8003904 <_init>
 80038c0:	2500      	movs	r5, #0
 80038c2:	4e0a      	ldr	r6, [pc, #40]	; (80038ec <__libc_init_array+0x40>)
 80038c4:	4c0a      	ldr	r4, [pc, #40]	; (80038f0 <__libc_init_array+0x44>)
 80038c6:	1ba4      	subs	r4, r4, r6
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	42a5      	cmp	r5, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d4:	4798      	blx	r3
 80038d6:	3501      	adds	r5, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038de:	4798      	blx	r3
 80038e0:	3501      	adds	r5, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	08003954 	.word	0x08003954
 80038e8:	08003954 	.word	0x08003954
 80038ec:	08003954 	.word	0x08003954
 80038f0:	08003958 	.word	0x08003958

080038f4 <memset>:
 80038f4:	4603      	mov	r3, r0
 80038f6:	4402      	add	r2, r0
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
