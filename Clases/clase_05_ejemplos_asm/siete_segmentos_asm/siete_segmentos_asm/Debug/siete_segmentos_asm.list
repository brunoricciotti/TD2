
siete_segmentos_asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800030c  08000314  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800030c  0800030c  00010314  2**0
                  CONTENTS
  4 .ARM          00000000  0800030c  0800030c  00010314  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800030c  08000314  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800030c  0800030c  0001030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000314  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000314  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010314  2**0
                  CONTENTS, READONLY
 12 .debug_line   000001a6  00000000  00000000  0001033d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00000094  00000000  00000000  000104e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000004e  00000000  00000000  00010577  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000088  00000000  00000000  000105c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00000095  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000106e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  0000002c  00000000  00000000  00010708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f4 	.word	0x080002f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f4 	.word	0x080002f4

08000170 <siete_segmentos_init>:
/*		de anodo común en los pines de	*/
/*		B9 a B15						*/
/****************************************/
	.type	siete_segmentos_init, %function
siete_segmentos_init:
	PUSH	{R0, R1, R2}
 8000170:	b407      	push	{r0, r1, r2}
	LDR		R1, =#RCC_APB2ENR
 8000172:	490e      	ldr	r1, [pc, #56]	; (80001ac <tabla_siete_segmentos+0xa>)
	LDR		R0,[R1]
 8000174:	6808      	ldr	r0, [r1, #0]
	MOVS	R2,#(1<<3)
 8000176:	2208      	movs	r2, #8
	ORRS	R0,R0,R2
 8000178:	4310      	orrs	r0, r2
	STR		R0,[R1]				// Habilito el CLK en el port b
 800017a:	6008      	str	r0, [r1, #0]
	LDR		R1,=#GPIOB_CHR
 800017c:	490c      	ldr	r1, [pc, #48]	; (80001b0 <tabla_siete_segmentos+0xe>)
	LDR		R0,[R1]
 800017e:	6808      	ldr	r0, [r1, #0]
	LDR		R2,=#(0x33333330)
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <tabla_siete_segmentos+0x12>)
	ORRS	R0,R0,R2
 8000182:	4310      	orrs	r0, r2
	STR		R0,[R1]				//Puertos B9 a B15 como salidas.
 8000184:	6008      	str	r0, [r1, #0]
	POP		{R0, R1, R2}		//Ver manual del chip https://www.st.com/resource/en/reference_manual/cd00171190-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-arm-based-32-bit-mcus-stmicroelectronics.pdf
 8000186:	bc07      	pop	{r0, r1, r2}
	BX		LR					// return
 8000188:	4770      	bx	lr

0800018a <siete_segmentos_set>:
/*		en el display. Si es mayor a 9	*/
/*		borra el display				*/
/****************************************/
	.type	siete_segmentos_set, %function
siete_segmentos_set:
	PUSH	{R0,R1,R2}
 800018a:	b407      	push	{r0, r1, r2}
	LDR		R1,=#(0x7F<<9)
 800018c:	490a      	ldr	r1, [pc, #40]	; (80001b8 <tabla_siete_segmentos+0x16>)
	CMP		R0,#9
 800018e:	2809      	cmp	r0, #9
	BHI		setear_pines
 8000190:	d803      	bhi.n	800019a <setear_pines>
	LDR		R2,=tabla_siete_segmentos	//Pongo R2 a la dirección de la tabla
 8000192:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <tabla_siete_segmentos+0x1a>)
	LDRB	R1,[R2,R0]					//Me traigo el valor 7 segmentos a R1 desde [R0+R2]
 8000194:	5c11      	ldrb	r1, [r2, r0]
	MOVS	R2,#9						//
 8000196:	2209      	movs	r2, #9
	LSLS	R1,R1,R2					//Lo desplazo 9 posiciones porque uso
 8000198:	4091      	lsls	r1, r2

0800019a <setear_pines>:
setear_pines:							//de R15 a R9
	LDR		R2,=#PORTB_ODR				//Me fijo donde escribo
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <tabla_siete_segmentos+0x1e>)
	STR		R1,[R2]						//Escribo el puerto
 800019c:	6011      	str	r1, [r2, #0]
	POP		{R0,R1,R2}					//Dejo R0, R1 y R2 como estaban
 800019e:	bc07      	pop	{r0, r1, r2}
	BX		LR							// return
 80001a0:	4770      	bx	lr

080001a2 <tabla_siete_segmentos>:
 80001a2:	7640      	.short	0x7640
 80001a4:	0c162421 	.word	0x0c162421
 80001a8:	04006608 	.word	0x04006608
	LDR		R1, =#RCC_APB2ENR
 80001ac:	40021018 	.word	0x40021018
	LDR		R1,=#GPIOB_CHR
 80001b0:	40010c04 	.word	0x40010c04
	LDR		R2,=#(0x33333330)
 80001b4:	33333330 	.word	0x33333330
	LDR		R1,=#(0x7F<<9)
 80001b8:	0000fe00 	.word	0x0000fe00
	LDR		R2,=tabla_siete_segmentos	//Pongo R2 a la dirección de la tabla
 80001bc:	080001a2 	.word	0x080001a2
	LDR		R2,=#PORTB_ODR				//Me fijo donde escribo
 80001c0:	40010c0c 	.word	0x40010c0c

080001c4 <led_init>:
/*	Función led_init. 				 	*/
/*	Inicializa El LED					*/
/****************************************/
		.type	led_init, %function
led_init:
		PUSH	{R1, R2, LR}		// Mando a la pila los registros que modifico y LR
 80001c4:	b506      	push	{r1, r2, lr}
		LDR		R1, =(1 << 4)       // Cargo en R1 el bit que me habilita el GPIOC
 80001c6:	4908      	ldr	r1, [pc, #32]	; (80001e8 <led_set+0x14>)
		LDR 	R2, =#RCC_APB2ENR   // Cargo la dirección de memoria
 80001c8:	4a08      	ldr	r2, [pc, #32]	; (80001ec <led_set+0x18>)
		STR		R1, [R2]            // Habilito la señal de reloj para GPIOC
 80001ca:	6011      	str	r1, [r2, #0]
									//Pongo GPIOC13 como salida.
		LDR 	R1, =(0b11 << 20)
 80001cc:	4908      	ldr	r1, [pc, #32]	; (80001f0 <led_set+0x1c>)
		LDR 	R2, =#GPIOC_CHR
 80001ce:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <led_set+0x20>)
		STR 	R1, [R2]
 80001d0:	6011      	str	r1, [r2, #0]
		POP		{R1, R2, PC}
 80001d2:	bd06      	pop	{r1, r2, pc}

080001d4 <led_set>:
/*	Función led_set. 				 	*/
/*	Setea el led en funcion de R0		*/
/****************************************/
		.type	led_set, %function
led_set:
		PUSH	{R0, R1, R2}		// Mando a la pila todos los registros que modifico
 80001d4:	b407      	push	{r0, r1, r2}
		MVNS	R0,R0				// R0   = ~R0
 80001d6:	43c0      	mvns	r0, r0
		MOVS	R1,#1				// R1   = 0x01
 80001d8:	2101      	movs	r1, #1
		ANDS	R0,R0,R1			// R0 & = 0x01
 80001da:	4008      	ands	r0, r1
		LSLS	R0,R0,#13			// R0 <<= 13
 80001dc:	0340      	lsls	r0, r0, #13
		ldr 	R2, =#PORTC_ODR   	// Escribo la dirección de memoria para setear GPIOC
 80001de:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <led_set+0x24>)
		STR 	R0, [R2]          	// Escribo el puerto de salida
 80001e0:	6010      	str	r0, [r2, #0]
		POP		{R0, R1, R2}		// Repongo los registros que toqué.
 80001e2:	bc07      	pop	{r0, r1, r2}
		BX		LR					// return
 80001e4:	4770      	bx	lr
 80001e6:	0000      	.short	0x0000
		LDR		R1, =(1 << 4)       // Cargo en R1 el bit que me habilita el GPIOC
 80001e8:	00000010 	.word	0x00000010
		LDR 	R2, =#RCC_APB2ENR   // Cargo la dirección de memoria
 80001ec:	40021018 	.word	0x40021018
		LDR 	R1, =(0b11 << 20)
 80001f0:	00300000 	.word	0x00300000
		LDR 	R2, =#GPIOC_CHR
 80001f4:	40011004 	.word	0x40011004
		ldr 	R2, =#PORTC_ODR   	// Escribo la dirección de memoria para setear GPIOC
 80001f8:	4001100c 	.word	0x4001100c

080001fc <main>:
		.section	.text
		.align		2
 		.global		main
		.type		main, %function
main:
		BL		led_init				//Inicializo led
 80001fc:	f7ff ffe2 	bl	80001c4 <led_init>
		BL		siete_segmentos_init	//Inicializo siete segmentos.
 8000200:	f7ff ffb6 	bl	8000170 <siete_segmentos_init>
		MOVS	R0,#10					//
 8000204:	200a      	movs	r0, #10
		BL		siete_segmentos_set		//Borro siete segmentos.
 8000206:	f7ff ffc0 	bl	800018a <siete_segmentos_set>
		MOVS	R0,#9					//
 800020a:	2009      	movs	r0, #9
		LDR		R1,=valor_a_mostrar		//
 800020c:	490f      	ldr	r1, [pc, #60]	; (800024c <delay_dec+0x6>)
		STR		R0,[R1]					//Inicializo valor_a_mostrar en 9
 800020e:	6008      	str	r0, [r1, #0]

08000210 <main_loop>:

main_loop:
		MOVS	R0,#1
 8000210:	2001      	movs	r0, #1
		BL		led_set					//Enciendo el led
 8000212:	f7ff ffdf 	bl	80001d4 <led_set>
		BL		cuenta_para_atras		//Pongo valor_a_mostrar en el display
 8000216:	f000 f80a 	bl	800022e <cuenta_para_atras>
		LDR		R0,=#LOOP_COMPARE		//
 800021a:	480d      	ldr	r0, [pc, #52]	; (8000250 <delay_dec+0xa>)
		BL		delay					//demora por software
 800021c:	f000 f812 	bl	8000244 <delay>

		MOVS	R0,#0					//
 8000220:	2000      	movs	r0, #0
		BL		led_set					//
 8000222:	f7ff ffd7 	bl	80001d4 <led_set>
		LDR		R0,=#LOOP_COMPARE*8		//
 8000226:	480b      	ldr	r0, [pc, #44]	; (8000254 <delay_dec+0xe>)
		BL		delay					//Apago el led y espero 8 veces más que cuando lo encendí
 8000228:	f000 f80c 	bl	8000244 <delay>
		B		main_loop				//Vuelvo a encender el led.
 800022c:	e7f0      	b.n	8000210 <main_loop>

0800022e <cuenta_para_atras>:
/*	Función cuenta_para_atras. 			*/
/*	usa la variable valor_a_mostrar		*/
/****************************************/
		.type	cuenta_para_atras, %function
cuenta_para_atras:
		PUSH	{R0,R1,LR}				//Guardo R0, R1 y LR (anido funciones)
 800022e:	b503      	push	{r0, r1, lr}
		LDR		R1,=valor_a_mostrar		//voy a buscar la
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <delay_dec+0x6>)
		LDR		R0,[R1]					//variable "valor_a_mostrar" y la pongo en R0
 8000232:	6808      	ldr	r0, [r1, #0]
		BL		siete_segmentos_set		//Cargo R0 en el digito
 8000234:	f7ff ffa9 	bl	800018a <siete_segmentos_set>
		SUBS	R0,R0,#1				//decremento R0
 8000238:	3801      	subs	r0, #1
		CMP		R0,#0					//
 800023a:	2800      	cmp	r0, #0
		BGE		cuenta_guardar_valor	//Si es mayor o igual a cero (con signo).
 800023c:	da00      	bge.n	8000240 <cuenta_guardar_valor>
		MOVS	R0,#9					//cargo 9 en R0
 800023e:	2009      	movs	r0, #9

08000240 <cuenta_guardar_valor>:
cuenta_guardar_valor:					//
		STR		R0,[R1]					//guardo R0 en la variable "valor_a_mostrar"
 8000240:	6008      	str	r0, [r1, #0]
		POP		{R0, R1, PC}			//restauro R0, R1 y vuelvo
 8000242:	bd03      	pop	{r0, r1, pc}

08000244 <delay>:
/*	Función delay. 				 		*/
/*	Recibe por R0 la demora				*/
/****************************************/
		.type	delay, %function
delay:
		PUSH	{R0, LR}			// Guardo el parámetro y LR en la pila.
 8000244:	b501      	push	{r0, lr}

08000246 <delay_dec>:
delay_dec:
        SUBS	R0, 1				//
 8000246:	3801      	subs	r0, #1
        BNE		delay_dec			// while(--R0);
 8000248:	d1fd      	bne.n	8000246 <delay_dec>
		POP		{R0, PC}			// repongo R0 y vuelvo.
 800024a:	bd01      	pop	{r0, pc}
		LDR		R1,=valor_a_mostrar		//
 800024c:	2000001c 	.word	0x2000001c
		LDR		R0,=#LOOP_COMPARE		//
 8000250:	0002ffff 	.word	0x0002ffff
		LDR		R0,=#LOOP_COMPARE*8		//
 8000254:	0017fff8 	.word	0x0017fff8

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490e      	ldr	r1, [pc, #56]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0b      	ldr	r4, [pc, #44]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000282:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 f811 	bl	80002ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ffb7 	bl	80001fc <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000314 	.word	0x08000314
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	20000020 	.word	0x20000020

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <__libc_init_array>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2500      	movs	r5, #0
 80002b0:	4e0c      	ldr	r6, [pc, #48]	; (80002e4 <__libc_init_array+0x38>)
 80002b2:	4c0d      	ldr	r4, [pc, #52]	; (80002e8 <__libc_init_array+0x3c>)
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	42a5      	cmp	r5, r4
 80002ba:	d109      	bne.n	80002d0 <__libc_init_array+0x24>
 80002bc:	f000 f81a 	bl	80002f4 <_init>
 80002c0:	2500      	movs	r5, #0
 80002c2:	4e0a      	ldr	r6, [pc, #40]	; (80002ec <__libc_init_array+0x40>)
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <__libc_init_array+0x44>)
 80002c6:	1ba4      	subs	r4, r4, r6
 80002c8:	10a4      	asrs	r4, r4, #2
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	d105      	bne.n	80002da <__libc_init_array+0x2e>
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d4:	4798      	blx	r3
 80002d6:	3501      	adds	r5, #1
 80002d8:	e7ee      	b.n	80002b8 <__libc_init_array+0xc>
 80002da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002de:	4798      	blx	r3
 80002e0:	3501      	adds	r5, #1
 80002e2:	e7f2      	b.n	80002ca <__libc_init_array+0x1e>
 80002e4:	0800030c 	.word	0x0800030c
 80002e8:	0800030c 	.word	0x0800030c
 80002ec:	0800030c 	.word	0x0800030c
 80002f0:	08000310 	.word	0x08000310

080002f4 <_init>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr

08000300 <_fini>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr
